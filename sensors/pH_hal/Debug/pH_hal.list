
pH_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800a3b8  0800a3b8  0000b3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a910  0800a910  0000b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a918  0800a918  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a918  0800a918  0000b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a91c  0800a91c  0000b91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a920  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001d4  0800aaf4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800aaf4  0000c4ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b184  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf5  00000000  00000000  00017380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00019078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000727  00000000  00000000  000199e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b4a  00000000  00000000  0001a107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdc4  00000000  00000000  0002fc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d6c  00000000  00000000  0003ba15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000be7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000c1db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a39c 	.word	0x0800a39c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a39c 	.word	0x0800a39c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa71 	bl	8001924 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b1 	bl	80017b4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa63 	bl	8001924 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa59 	bl	8001924 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9db 	bl	800183c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9d1 	bl	800183c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a2 	bl	8000620 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f8db 	bl	8002714 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fd16 	bl	8001f98 <__aeabi_dsub>
 800056c:	f002 f8d2 	bl	8002714 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0004      	movs	r4, r0
 8000588:	000d      	movs	r5, r1
 800058a:	f7ff ff65 	bl	8000458 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x24>
 8000592:	0020      	movs	r0, r4
 8000594:	0029      	movs	r1, r5
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e9      	adds	r1, r5, r3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x1e>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 fa21 	bl	8001a08 <__aeabi_dmul>
 80005c6:	f7ff ffbd 	bl	8000544 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f002 f90c 	bl	80027e8 <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 fa18 	bl	8001a08 <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fcda 	bl	8001f98 <__aeabi_dsub>
 80005e4:	f7ff ffae 	bl	8000544 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f002 f8c7 	bl	800278c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 fa01 	bl	8001a08 <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f002 f8ec 	bl	80027e8 <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 fa50 	bl	8000ab8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f002 f9e0 	bl	8002a04 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f002 f9db 	bl	8002a04 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_fmul>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	0045      	lsls	r5, r0, #1
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	4699      	mov	r9, r3
 80007ca:	1c0f      	adds	r7, r1, #0
 80007cc:	0e2d      	lsrs	r5, r5, #24
 80007ce:	0fc6      	lsrs	r6, r0, #31
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x1e>
 80007d4:	e088      	b.n	80008e8 <__aeabi_fmul+0x130>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fmul+0x24>
 80007da:	e08d      	b.n	80008f8 <__aeabi_fmul+0x140>
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	04d2      	lsls	r2, r2, #19
 80007e2:	431a      	orrs	r2, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	4691      	mov	r9, r2
 80007e8:	4698      	mov	r8, r3
 80007ea:	469a      	mov	sl, r3
 80007ec:	3d7f      	subs	r5, #127	@ 0x7f
 80007ee:	027c      	lsls	r4, r7, #9
 80007f0:	007b      	lsls	r3, r7, #1
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	0e1b      	lsrs	r3, r3, #24
 80007f6:	0fff      	lsrs	r7, r7, #31
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d068      	beq.n	80008ce <__aeabi_fmul+0x116>
 80007fc:	2bff      	cmp	r3, #255	@ 0xff
 80007fe:	d021      	beq.n	8000844 <__aeabi_fmul+0x8c>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	00e4      	lsls	r4, r4, #3
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4314      	orrs	r4, r2
 8000808:	4642      	mov	r2, r8
 800080a:	3b7f      	subs	r3, #127	@ 0x7f
 800080c:	195b      	adds	r3, r3, r5
 800080e:	2100      	movs	r1, #0
 8000810:	1c5d      	adds	r5, r3, #1
 8000812:	2a0a      	cmp	r2, #10
 8000814:	dc2e      	bgt.n	8000874 <__aeabi_fmul+0xbc>
 8000816:	407e      	eors	r6, r7
 8000818:	4642      	mov	r2, r8
 800081a:	2a02      	cmp	r2, #2
 800081c:	dc23      	bgt.n	8000866 <__aeabi_fmul+0xae>
 800081e:	3a01      	subs	r2, #1
 8000820:	2a01      	cmp	r2, #1
 8000822:	d900      	bls.n	8000826 <__aeabi_fmul+0x6e>
 8000824:	e0bd      	b.n	80009a2 <__aeabi_fmul+0x1ea>
 8000826:	2902      	cmp	r1, #2
 8000828:	d06e      	beq.n	8000908 <__aeabi_fmul+0x150>
 800082a:	2901      	cmp	r1, #1
 800082c:	d12c      	bne.n	8000888 <__aeabi_fmul+0xd0>
 800082e:	2000      	movs	r0, #0
 8000830:	2200      	movs	r2, #0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	07f6      	lsls	r6, r6, #31
 8000836:	4310      	orrs	r0, r2
 8000838:	4330      	orrs	r0, r6
 800083a:	bce0      	pop	{r5, r6, r7}
 800083c:	46ba      	mov	sl, r7
 800083e:	46b1      	mov	r9, r6
 8000840:	46a8      	mov	r8, r5
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000844:	002b      	movs	r3, r5
 8000846:	33ff      	adds	r3, #255	@ 0xff
 8000848:	2c00      	cmp	r4, #0
 800084a:	d065      	beq.n	8000918 <__aeabi_fmul+0x160>
 800084c:	2203      	movs	r2, #3
 800084e:	4641      	mov	r1, r8
 8000850:	4311      	orrs	r1, r2
 8000852:	0032      	movs	r2, r6
 8000854:	3501      	adds	r5, #1
 8000856:	4688      	mov	r8, r1
 8000858:	407a      	eors	r2, r7
 800085a:	35ff      	adds	r5, #255	@ 0xff
 800085c:	290a      	cmp	r1, #10
 800085e:	dd00      	ble.n	8000862 <__aeabi_fmul+0xaa>
 8000860:	e0d8      	b.n	8000a14 <__aeabi_fmul+0x25c>
 8000862:	0016      	movs	r6, r2
 8000864:	2103      	movs	r1, #3
 8000866:	4640      	mov	r0, r8
 8000868:	2201      	movs	r2, #1
 800086a:	4082      	lsls	r2, r0
 800086c:	20a6      	movs	r0, #166	@ 0xa6
 800086e:	00c0      	lsls	r0, r0, #3
 8000870:	4202      	tst	r2, r0
 8000872:	d020      	beq.n	80008b6 <__aeabi_fmul+0xfe>
 8000874:	4653      	mov	r3, sl
 8000876:	2b02      	cmp	r3, #2
 8000878:	d046      	beq.n	8000908 <__aeabi_fmul+0x150>
 800087a:	2b03      	cmp	r3, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fmul+0xc8>
 800087e:	e0bb      	b.n	80009f8 <__aeabi_fmul+0x240>
 8000880:	4651      	mov	r1, sl
 8000882:	464c      	mov	r4, r9
 8000884:	2901      	cmp	r1, #1
 8000886:	d0d2      	beq.n	800082e <__aeabi_fmul+0x76>
 8000888:	002b      	movs	r3, r5
 800088a:	337f      	adds	r3, #127	@ 0x7f
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd70      	ble.n	8000972 <__aeabi_fmul+0x1ba>
 8000890:	0762      	lsls	r2, r4, #29
 8000892:	d004      	beq.n	800089e <__aeabi_fmul+0xe6>
 8000894:	220f      	movs	r2, #15
 8000896:	4022      	ands	r2, r4
 8000898:	2a04      	cmp	r2, #4
 800089a:	d000      	beq.n	800089e <__aeabi_fmul+0xe6>
 800089c:	3404      	adds	r4, #4
 800089e:	0122      	lsls	r2, r4, #4
 80008a0:	d503      	bpl.n	80008aa <__aeabi_fmul+0xf2>
 80008a2:	4b63      	ldr	r3, [pc, #396]	@ (8000a30 <__aeabi_fmul+0x278>)
 80008a4:	401c      	ands	r4, r3
 80008a6:	002b      	movs	r3, r5
 80008a8:	3380      	adds	r3, #128	@ 0x80
 80008aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80008ac:	dc2c      	bgt.n	8000908 <__aeabi_fmul+0x150>
 80008ae:	01a2      	lsls	r2, r4, #6
 80008b0:	0a52      	lsrs	r2, r2, #9
 80008b2:	b2d8      	uxtb	r0, r3
 80008b4:	e7bd      	b.n	8000832 <__aeabi_fmul+0x7a>
 80008b6:	2090      	movs	r0, #144	@ 0x90
 80008b8:	0080      	lsls	r0, r0, #2
 80008ba:	4202      	tst	r2, r0
 80008bc:	d127      	bne.n	800090e <__aeabi_fmul+0x156>
 80008be:	38b9      	subs	r0, #185	@ 0xb9
 80008c0:	38ff      	subs	r0, #255	@ 0xff
 80008c2:	4210      	tst	r0, r2
 80008c4:	d06d      	beq.n	80009a2 <__aeabi_fmul+0x1ea>
 80008c6:	003e      	movs	r6, r7
 80008c8:	46a1      	mov	r9, r4
 80008ca:	468a      	mov	sl, r1
 80008cc:	e7d2      	b.n	8000874 <__aeabi_fmul+0xbc>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d141      	bne.n	8000956 <__aeabi_fmul+0x19e>
 80008d2:	2301      	movs	r3, #1
 80008d4:	4642      	mov	r2, r8
 80008d6:	431a      	orrs	r2, r3
 80008d8:	4690      	mov	r8, r2
 80008da:	002b      	movs	r3, r5
 80008dc:	4642      	mov	r2, r8
 80008de:	2101      	movs	r1, #1
 80008e0:	1c5d      	adds	r5, r3, #1
 80008e2:	2a0a      	cmp	r2, #10
 80008e4:	dd97      	ble.n	8000816 <__aeabi_fmul+0x5e>
 80008e6:	e7c5      	b.n	8000874 <__aeabi_fmul+0xbc>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d126      	bne.n	800093a <__aeabi_fmul+0x182>
 80008ec:	2304      	movs	r3, #4
 80008ee:	4698      	mov	r8, r3
 80008f0:	3b03      	subs	r3, #3
 80008f2:	2500      	movs	r5, #0
 80008f4:	469a      	mov	sl, r3
 80008f6:	e77a      	b.n	80007ee <__aeabi_fmul+0x36>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d118      	bne.n	800092e <__aeabi_fmul+0x176>
 80008fc:	2308      	movs	r3, #8
 80008fe:	4698      	mov	r8, r3
 8000900:	3b06      	subs	r3, #6
 8000902:	25ff      	movs	r5, #255	@ 0xff
 8000904:	469a      	mov	sl, r3
 8000906:	e772      	b.n	80007ee <__aeabi_fmul+0x36>
 8000908:	20ff      	movs	r0, #255	@ 0xff
 800090a:	2200      	movs	r2, #0
 800090c:	e791      	b.n	8000832 <__aeabi_fmul+0x7a>
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	2600      	movs	r6, #0
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	03d2      	lsls	r2, r2, #15
 8000916:	e78c      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000918:	4641      	mov	r1, r8
 800091a:	2202      	movs	r2, #2
 800091c:	3501      	adds	r5, #1
 800091e:	4311      	orrs	r1, r2
 8000920:	4688      	mov	r8, r1
 8000922:	35ff      	adds	r5, #255	@ 0xff
 8000924:	290a      	cmp	r1, #10
 8000926:	dca5      	bgt.n	8000874 <__aeabi_fmul+0xbc>
 8000928:	2102      	movs	r1, #2
 800092a:	407e      	eors	r6, r7
 800092c:	e774      	b.n	8000818 <__aeabi_fmul+0x60>
 800092e:	230c      	movs	r3, #12
 8000930:	4698      	mov	r8, r3
 8000932:	3b09      	subs	r3, #9
 8000934:	25ff      	movs	r5, #255	@ 0xff
 8000936:	469a      	mov	sl, r3
 8000938:	e759      	b.n	80007ee <__aeabi_fmul+0x36>
 800093a:	0018      	movs	r0, r3
 800093c:	f002 f844 	bl	80029c8 <__clzsi2>
 8000940:	464a      	mov	r2, r9
 8000942:	1f43      	subs	r3, r0, #5
 8000944:	2576      	movs	r5, #118	@ 0x76
 8000946:	409a      	lsls	r2, r3
 8000948:	2300      	movs	r3, #0
 800094a:	426d      	negs	r5, r5
 800094c:	4691      	mov	r9, r2
 800094e:	4698      	mov	r8, r3
 8000950:	469a      	mov	sl, r3
 8000952:	1a2d      	subs	r5, r5, r0
 8000954:	e74b      	b.n	80007ee <__aeabi_fmul+0x36>
 8000956:	0020      	movs	r0, r4
 8000958:	f002 f836 	bl	80029c8 <__clzsi2>
 800095c:	4642      	mov	r2, r8
 800095e:	1f43      	subs	r3, r0, #5
 8000960:	409c      	lsls	r4, r3
 8000962:	1a2b      	subs	r3, r5, r0
 8000964:	3b76      	subs	r3, #118	@ 0x76
 8000966:	2100      	movs	r1, #0
 8000968:	1c5d      	adds	r5, r3, #1
 800096a:	2a0a      	cmp	r2, #10
 800096c:	dc00      	bgt.n	8000970 <__aeabi_fmul+0x1b8>
 800096e:	e752      	b.n	8000816 <__aeabi_fmul+0x5e>
 8000970:	e780      	b.n	8000874 <__aeabi_fmul+0xbc>
 8000972:	2201      	movs	r2, #1
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b1b      	cmp	r3, #27
 8000978:	dd00      	ble.n	800097c <__aeabi_fmul+0x1c4>
 800097a:	e758      	b.n	800082e <__aeabi_fmul+0x76>
 800097c:	359e      	adds	r5, #158	@ 0x9e
 800097e:	0022      	movs	r2, r4
 8000980:	40ac      	lsls	r4, r5
 8000982:	40da      	lsrs	r2, r3
 8000984:	1e63      	subs	r3, r4, #1
 8000986:	419c      	sbcs	r4, r3
 8000988:	4322      	orrs	r2, r4
 800098a:	0753      	lsls	r3, r2, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fmul+0x1e0>
 800098e:	230f      	movs	r3, #15
 8000990:	4013      	ands	r3, r2
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fmul+0x1e0>
 8000996:	3204      	adds	r2, #4
 8000998:	0153      	lsls	r3, r2, #5
 800099a:	d537      	bpl.n	8000a0c <__aeabi_fmul+0x254>
 800099c:	2001      	movs	r0, #1
 800099e:	2200      	movs	r2, #0
 80009a0:	e747      	b.n	8000832 <__aeabi_fmul+0x7a>
 80009a2:	0c21      	lsrs	r1, r4, #16
 80009a4:	464a      	mov	r2, r9
 80009a6:	0424      	lsls	r4, r4, #16
 80009a8:	0c24      	lsrs	r4, r4, #16
 80009aa:	0027      	movs	r7, r4
 80009ac:	0c10      	lsrs	r0, r2, #16
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	0c12      	lsrs	r2, r2, #16
 80009b2:	4344      	muls	r4, r0
 80009b4:	4357      	muls	r7, r2
 80009b6:	4348      	muls	r0, r1
 80009b8:	4351      	muls	r1, r2
 80009ba:	0c3a      	lsrs	r2, r7, #16
 80009bc:	1909      	adds	r1, r1, r4
 80009be:	1852      	adds	r2, r2, r1
 80009c0:	4294      	cmp	r4, r2
 80009c2:	d903      	bls.n	80009cc <__aeabi_fmul+0x214>
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0249      	lsls	r1, r1, #9
 80009c8:	468c      	mov	ip, r1
 80009ca:	4460      	add	r0, ip
 80009cc:	043f      	lsls	r7, r7, #16
 80009ce:	0411      	lsls	r1, r2, #16
 80009d0:	0c3f      	lsrs	r7, r7, #16
 80009d2:	19c9      	adds	r1, r1, r7
 80009d4:	018c      	lsls	r4, r1, #6
 80009d6:	1e67      	subs	r7, r4, #1
 80009d8:	41bc      	sbcs	r4, r7
 80009da:	0c12      	lsrs	r2, r2, #16
 80009dc:	0e89      	lsrs	r1, r1, #26
 80009de:	1812      	adds	r2, r2, r0
 80009e0:	430c      	orrs	r4, r1
 80009e2:	0192      	lsls	r2, r2, #6
 80009e4:	4314      	orrs	r4, r2
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	d50e      	bpl.n	8000a08 <__aeabi_fmul+0x250>
 80009ea:	2301      	movs	r3, #1
 80009ec:	0862      	lsrs	r2, r4, #1
 80009ee:	401c      	ands	r4, r3
 80009f0:	4314      	orrs	r4, r2
 80009f2:	e749      	b.n	8000888 <__aeabi_fmul+0xd0>
 80009f4:	003e      	movs	r6, r7
 80009f6:	46a1      	mov	r9, r4
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	464b      	mov	r3, r9
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	431a      	orrs	r2, r3
 8000a00:	0252      	lsls	r2, r2, #9
 8000a02:	20ff      	movs	r0, #255	@ 0xff
 8000a04:	0a52      	lsrs	r2, r2, #9
 8000a06:	e714      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a08:	001d      	movs	r5, r3
 8000a0a:	e73d      	b.n	8000888 <__aeabi_fmul+0xd0>
 8000a0c:	0192      	lsls	r2, r2, #6
 8000a0e:	2000      	movs	r0, #0
 8000a10:	0a52      	lsrs	r2, r2, #9
 8000a12:	e70e      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a14:	290f      	cmp	r1, #15
 8000a16:	d1ed      	bne.n	80009f4 <__aeabi_fmul+0x23c>
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	03d2      	lsls	r2, r2, #15
 8000a1e:	4213      	tst	r3, r2
 8000a20:	d0ea      	beq.n	80009f8 <__aeabi_fmul+0x240>
 8000a22:	4214      	tst	r4, r2
 8000a24:	d1e8      	bne.n	80009f8 <__aeabi_fmul+0x240>
 8000a26:	003e      	movs	r6, r7
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	4322      	orrs	r2, r4
 8000a2c:	e701      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	f7ffffff 	.word	0xf7ffffff

08000a34 <__aeabi_ui2f>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	1e04      	subs	r4, r0, #0
 8000a38:	d00e      	beq.n	8000a58 <__aeabi_ui2f+0x24>
 8000a3a:	f001 ffc5 	bl	80029c8 <__clzsi2>
 8000a3e:	239e      	movs	r3, #158	@ 0x9e
 8000a40:	0001      	movs	r1, r0
 8000a42:	1a1b      	subs	r3, r3, r0
 8000a44:	2b96      	cmp	r3, #150	@ 0x96
 8000a46:	dc0c      	bgt.n	8000a62 <__aeabi_ui2f+0x2e>
 8000a48:	2808      	cmp	r0, #8
 8000a4a:	d02f      	beq.n	8000aac <__aeabi_ui2f+0x78>
 8000a4c:	3908      	subs	r1, #8
 8000a4e:	408c      	lsls	r4, r1
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	0a64      	lsrs	r4, r4, #9
 8000a54:	b2d8      	uxtb	r0, r3
 8000a56:	e001      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	05c0      	lsls	r0, r0, #23
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	2b99      	cmp	r3, #153	@ 0x99
 8000a64:	dc16      	bgt.n	8000a94 <__aeabi_ui2f+0x60>
 8000a66:	1f42      	subs	r2, r0, #5
 8000a68:	2805      	cmp	r0, #5
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_ui2f+0x3a>
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	0022      	movs	r2, r4
 8000a70:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <__aeabi_ui2f+0x80>)
 8000a72:	4002      	ands	r2, r0
 8000a74:	0765      	lsls	r5, r4, #29
 8000a76:	d009      	beq.n	8000a8c <__aeabi_ui2f+0x58>
 8000a78:	250f      	movs	r5, #15
 8000a7a:	402c      	ands	r4, r5
 8000a7c:	2c04      	cmp	r4, #4
 8000a7e:	d005      	beq.n	8000a8c <__aeabi_ui2f+0x58>
 8000a80:	3204      	adds	r2, #4
 8000a82:	0154      	lsls	r4, r2, #5
 8000a84:	d502      	bpl.n	8000a8c <__aeabi_ui2f+0x58>
 8000a86:	239f      	movs	r3, #159	@ 0x9f
 8000a88:	4002      	ands	r2, r0
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	0192      	lsls	r2, r2, #6
 8000a8e:	0a54      	lsrs	r4, r2, #9
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	e7e3      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000a94:	0002      	movs	r2, r0
 8000a96:	0020      	movs	r0, r4
 8000a98:	321b      	adds	r2, #27
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	1e50      	subs	r0, r2, #1
 8000aa0:	4182      	sbcs	r2, r0
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	1a40      	subs	r0, r0, r1
 8000aa6:	40c4      	lsrs	r4, r0
 8000aa8:	4314      	orrs	r4, r2
 8000aaa:	e7e0      	b.n	8000a6e <__aeabi_ui2f+0x3a>
 8000aac:	0264      	lsls	r4, r4, #9
 8000aae:	2096      	movs	r0, #150	@ 0x96
 8000ab0:	0a64      	lsrs	r4, r4, #9
 8000ab2:	e7d3      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000ab4:	fbffffff 	.word	0xfbffffff

08000ab8 <__aeabi_dadd>:
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	4657      	mov	r7, sl
 8000abc:	464e      	mov	r6, r9
 8000abe:	4645      	mov	r5, r8
 8000ac0:	46de      	mov	lr, fp
 8000ac2:	b5e0      	push	{r5, r6, r7, lr}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	9000      	str	r0, [sp, #0]
 8000ac8:	9101      	str	r1, [sp, #4]
 8000aca:	030c      	lsls	r4, r1, #12
 8000acc:	004f      	lsls	r7, r1, #1
 8000ace:	0fce      	lsrs	r6, r1, #31
 8000ad0:	0a61      	lsrs	r1, r4, #9
 8000ad2:	9c00      	ldr	r4, [sp, #0]
 8000ad4:	031d      	lsls	r5, r3, #12
 8000ad6:	0f64      	lsrs	r4, r4, #29
 8000ad8:	430c      	orrs	r4, r1
 8000ada:	9900      	ldr	r1, [sp, #0]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	00c8      	lsls	r0, r1, #3
 8000ae2:	0059      	lsls	r1, r3, #1
 8000ae4:	0d4b      	lsrs	r3, r1, #21
 8000ae6:	4699      	mov	r9, r3
 8000ae8:	9a00      	ldr	r2, [sp, #0]
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0fd9      	lsrs	r1, r3, #31
 8000af0:	0f53      	lsrs	r3, r2, #29
 8000af2:	432b      	orrs	r3, r5
 8000af4:	469a      	mov	sl, r3
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	0d7f      	lsrs	r7, r7, #21
 8000afa:	00da      	lsls	r2, r3, #3
 8000afc:	4694      	mov	ip, r2
 8000afe:	464a      	mov	r2, r9
 8000b00:	46b0      	mov	r8, r6
 8000b02:	1aba      	subs	r2, r7, r2
 8000b04:	428e      	cmp	r6, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x52>
 8000b08:	e0b0      	b.n	8000c6c <__aeabi_dadd+0x1b4>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	dc00      	bgt.n	8000b10 <__aeabi_dadd+0x58>
 8000b0e:	e078      	b.n	8000c02 <__aeabi_dadd+0x14a>
 8000b10:	4649      	mov	r1, r9
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x60>
 8000b16:	e0e9      	b.n	8000cec <__aeabi_dadd+0x234>
 8000b18:	49c9      	ldr	r1, [pc, #804]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000b1a:	428f      	cmp	r7, r1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x68>
 8000b1e:	e195      	b.n	8000e4c <__aeabi_dadd+0x394>
 8000b20:	2501      	movs	r5, #1
 8000b22:	2a38      	cmp	r2, #56	@ 0x38
 8000b24:	dc16      	bgt.n	8000b54 <__aeabi_dadd+0x9c>
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4653      	mov	r3, sl
 8000b2a:	0409      	lsls	r1, r1, #16
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	469a      	mov	sl, r3
 8000b30:	2a1f      	cmp	r2, #31
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_dadd+0x7e>
 8000b34:	e1e7      	b.n	8000f06 <__aeabi_dadd+0x44e>
 8000b36:	2120      	movs	r1, #32
 8000b38:	4655      	mov	r5, sl
 8000b3a:	1a8b      	subs	r3, r1, r2
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	409d      	lsls	r5, r3
 8000b40:	40d1      	lsrs	r1, r2
 8000b42:	430d      	orrs	r5, r1
 8000b44:	4661      	mov	r1, ip
 8000b46:	4099      	lsls	r1, r3
 8000b48:	1e4b      	subs	r3, r1, #1
 8000b4a:	4199      	sbcs	r1, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	40d3      	lsrs	r3, r2
 8000b50:	430d      	orrs	r5, r1
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	1b45      	subs	r5, r0, r5
 8000b56:	42a8      	cmp	r0, r5
 8000b58:	4180      	sbcs	r0, r0
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	1a24      	subs	r4, r4, r0
 8000b5e:	0223      	lsls	r3, r4, #8
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_dadd+0xac>
 8000b62:	e10f      	b.n	8000d84 <__aeabi_dadd+0x2cc>
 8000b64:	0264      	lsls	r4, r4, #9
 8000b66:	0a64      	lsrs	r4, r4, #9
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0xb6>
 8000b6c:	e139      	b.n	8000de2 <__aeabi_dadd+0x32a>
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f001 ff2a 	bl	80029c8 <__clzsi2>
 8000b74:	0003      	movs	r3, r0
 8000b76:	3b08      	subs	r3, #8
 8000b78:	2120      	movs	r1, #32
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	40d0      	lsrs	r0, r2
 8000b80:	409c      	lsls	r4, r3
 8000b82:	0002      	movs	r2, r0
 8000b84:	409d      	lsls	r5, r3
 8000b86:	4322      	orrs	r2, r4
 8000b88:	429f      	cmp	r7, r3
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0xd6>
 8000b8c:	e173      	b.n	8000e76 <__aeabi_dadd+0x3be>
 8000b8e:	1bd8      	subs	r0, r3, r7
 8000b90:	3001      	adds	r0, #1
 8000b92:	1a09      	subs	r1, r1, r0
 8000b94:	002c      	movs	r4, r5
 8000b96:	408d      	lsls	r5, r1
 8000b98:	40c4      	lsrs	r4, r0
 8000b9a:	1e6b      	subs	r3, r5, #1
 8000b9c:	419d      	sbcs	r5, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	40c2      	lsrs	r2, r0
 8000ba2:	408b      	lsls	r3, r1
 8000ba4:	4325      	orrs	r5, r4
 8000ba6:	2700      	movs	r7, #0
 8000ba8:	0014      	movs	r4, r2
 8000baa:	431d      	orrs	r5, r3
 8000bac:	076b      	lsls	r3, r5, #29
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_dadd+0x10c>
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	402b      	ands	r3, r5
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d005      	beq.n	8000bc4 <__aeabi_dadd+0x10c>
 8000bb8:	1d2b      	adds	r3, r5, #4
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	41ad      	sbcs	r5, r5
 8000bbe:	426d      	negs	r5, r5
 8000bc0:	1964      	adds	r4, r4, r5
 8000bc2:	001d      	movs	r5, r3
 8000bc4:	0223      	lsls	r3, r4, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x112>
 8000bc8:	e12d      	b.n	8000e26 <__aeabi_dadd+0x36e>
 8000bca:	4a9d      	ldr	r2, [pc, #628]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000bcc:	3701      	adds	r7, #1
 8000bce:	4297      	cmp	r7, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x11c>
 8000bd2:	e0d3      	b.n	8000d7c <__aeabi_dadd+0x2c4>
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	499b      	ldr	r1, [pc, #620]	@ (8000e44 <__aeabi_dadd+0x38c>)
 8000bd8:	08ed      	lsrs	r5, r5, #3
 8000bda:	4021      	ands	r1, r4
 8000bdc:	074a      	lsls	r2, r1, #29
 8000bde:	432a      	orrs	r2, r5
 8000be0:	057c      	lsls	r4, r7, #21
 8000be2:	024d      	lsls	r5, r1, #9
 8000be4:	0b2d      	lsrs	r5, r5, #12
 8000be6:	0d64      	lsrs	r4, r4, #21
 8000be8:	0524      	lsls	r4, r4, #20
 8000bea:	432c      	orrs	r4, r5
 8000bec:	07f6      	lsls	r6, r6, #31
 8000bee:	4334      	orrs	r4, r6
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	b003      	add	sp, #12
 8000bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf8:	46bb      	mov	fp, r7
 8000bfa:	46b2      	mov	sl, r6
 8000bfc:	46a9      	mov	r9, r5
 8000bfe:	46a0      	mov	r8, r4
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x150>
 8000c06:	e084      	b.n	8000d12 <__aeabi_dadd+0x25a>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	1bd2      	subs	r2, r2, r7
 8000c0c:	2f00      	cmp	r7, #0
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_dadd+0x15a>
 8000c10:	e16d      	b.n	8000eee <__aeabi_dadd+0x436>
 8000c12:	0025      	movs	r5, r4
 8000c14:	4305      	orrs	r5, r0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x162>
 8000c18:	e127      	b.n	8000e6a <__aeabi_dadd+0x3b2>
 8000c1a:	1e56      	subs	r6, r2, #1
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x16a>
 8000c20:	e23b      	b.n	800109a <__aeabi_dadd+0x5e2>
 8000c22:	4d87      	ldr	r5, [pc, #540]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000c24:	42aa      	cmp	r2, r5
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x172>
 8000c28:	e26a      	b.n	8001100 <__aeabi_dadd+0x648>
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	2e38      	cmp	r6, #56	@ 0x38
 8000c2e:	dc12      	bgt.n	8000c56 <__aeabi_dadd+0x19e>
 8000c30:	0032      	movs	r2, r6
 8000c32:	2a1f      	cmp	r2, #31
 8000c34:	dd00      	ble.n	8000c38 <__aeabi_dadd+0x180>
 8000c36:	e1f8      	b.n	800102a <__aeabi_dadd+0x572>
 8000c38:	2620      	movs	r6, #32
 8000c3a:	0025      	movs	r5, r4
 8000c3c:	1ab6      	subs	r6, r6, r2
 8000c3e:	0007      	movs	r7, r0
 8000c40:	4653      	mov	r3, sl
 8000c42:	40b0      	lsls	r0, r6
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	40b5      	lsls	r5, r6
 8000c48:	40d7      	lsrs	r7, r2
 8000c4a:	1e46      	subs	r6, r0, #1
 8000c4c:	41b0      	sbcs	r0, r6
 8000c4e:	1b1b      	subs	r3, r3, r4
 8000c50:	469a      	mov	sl, r3
 8000c52:	433d      	orrs	r5, r7
 8000c54:	4305      	orrs	r5, r0
 8000c56:	4662      	mov	r2, ip
 8000c58:	1b55      	subs	r5, r2, r5
 8000c5a:	45ac      	cmp	ip, r5
 8000c5c:	4192      	sbcs	r2, r2
 8000c5e:	4653      	mov	r3, sl
 8000c60:	4252      	negs	r2, r2
 8000c62:	000e      	movs	r6, r1
 8000c64:	464f      	mov	r7, r9
 8000c66:	4688      	mov	r8, r1
 8000c68:	1a9c      	subs	r4, r3, r2
 8000c6a:	e778      	b.n	8000b5e <__aeabi_dadd+0xa6>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	dc00      	bgt.n	8000c72 <__aeabi_dadd+0x1ba>
 8000c70:	e08e      	b.n	8000d90 <__aeabi_dadd+0x2d8>
 8000c72:	4649      	mov	r1, r9
 8000c74:	2900      	cmp	r1, #0
 8000c76:	d175      	bne.n	8000d64 <__aeabi_dadd+0x2ac>
 8000c78:	4661      	mov	r1, ip
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x1ca>
 8000c80:	e0f6      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000c82:	1e51      	subs	r1, r2, #1
 8000c84:	2a01      	cmp	r2, #1
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x1d2>
 8000c88:	e191      	b.n	8000fae <__aeabi_dadd+0x4f6>
 8000c8a:	4d6d      	ldr	r5, [pc, #436]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000c8c:	42aa      	cmp	r2, r5
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x1da>
 8000c90:	e0dc      	b.n	8000e4c <__aeabi_dadd+0x394>
 8000c92:	2501      	movs	r5, #1
 8000c94:	2938      	cmp	r1, #56	@ 0x38
 8000c96:	dc14      	bgt.n	8000cc2 <__aeabi_dadd+0x20a>
 8000c98:	000a      	movs	r2, r1
 8000c9a:	2a1f      	cmp	r2, #31
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_dadd+0x1e8>
 8000c9e:	e1a2      	b.n	8000fe6 <__aeabi_dadd+0x52e>
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4653      	mov	r3, sl
 8000ca4:	1a89      	subs	r1, r1, r2
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	001d      	movs	r5, r3
 8000caa:	4663      	mov	r3, ip
 8000cac:	40d3      	lsrs	r3, r2
 8000cae:	431d      	orrs	r5, r3
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	408b      	lsls	r3, r1
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	1e4b      	subs	r3, r1, #1
 8000cb8:	4199      	sbcs	r1, r3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	430d      	orrs	r5, r1
 8000cc0:	18e4      	adds	r4, r4, r3
 8000cc2:	182d      	adds	r5, r5, r0
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	4180      	sbcs	r0, r0
 8000cc8:	4240      	negs	r0, r0
 8000cca:	1824      	adds	r4, r4, r0
 8000ccc:	0223      	lsls	r3, r4, #8
 8000cce:	d559      	bpl.n	8000d84 <__aeabi_dadd+0x2cc>
 8000cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000cd2:	3701      	adds	r7, #1
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	d051      	beq.n	8000d7c <__aeabi_dadd+0x2c4>
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4b5a      	ldr	r3, [pc, #360]	@ (8000e44 <__aeabi_dadd+0x38c>)
 8000cdc:	086a      	lsrs	r2, r5, #1
 8000cde:	401c      	ands	r4, r3
 8000ce0:	4029      	ands	r1, r5
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	07e5      	lsls	r5, r4, #31
 8000ce6:	4315      	orrs	r5, r2
 8000ce8:	0864      	lsrs	r4, r4, #1
 8000cea:	e75f      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000cec:	4661      	mov	r1, ip
 8000cee:	4653      	mov	r3, sl
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x23e>
 8000cf4:	e0bc      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000cf6:	1e51      	subs	r1, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dadd+0x246>
 8000cfc:	e164      	b.n	8000fc8 <__aeabi_dadd+0x510>
 8000cfe:	4d50      	ldr	r5, [pc, #320]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000d00:	42aa      	cmp	r2, r5
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x24e>
 8000d04:	e16a      	b.n	8000fdc <__aeabi_dadd+0x524>
 8000d06:	2501      	movs	r5, #1
 8000d08:	2938      	cmp	r1, #56	@ 0x38
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_dadd+0x256>
 8000d0c:	e722      	b.n	8000b54 <__aeabi_dadd+0x9c>
 8000d0e:	000a      	movs	r2, r1
 8000d10:	e70e      	b.n	8000b30 <__aeabi_dadd+0x78>
 8000d12:	4a4d      	ldr	r2, [pc, #308]	@ (8000e48 <__aeabi_dadd+0x390>)
 8000d14:	1c7d      	adds	r5, r7, #1
 8000d16:	4215      	tst	r5, r2
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x264>
 8000d1a:	e0d0      	b.n	8000ebe <__aeabi_dadd+0x406>
 8000d1c:	0025      	movs	r5, r4
 8000d1e:	4662      	mov	r2, ip
 8000d20:	4653      	mov	r3, sl
 8000d22:	4305      	orrs	r5, r0
 8000d24:	431a      	orrs	r2, r3
 8000d26:	2f00      	cmp	r7, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dadd+0x274>
 8000d2a:	e137      	b.n	8000f9c <__aeabi_dadd+0x4e4>
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x27a>
 8000d30:	e1a8      	b.n	8001084 <__aeabi_dadd+0x5cc>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x280>
 8000d36:	e16a      	b.n	800100e <__aeabi_dadd+0x556>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	1ac5      	subs	r5, r0, r3
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	1ae2      	subs	r2, r4, r3
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	419b      	sbcs	r3, r3
 8000d44:	425b      	negs	r3, r3
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	021a      	lsls	r2, r3, #8
 8000d4a:	d400      	bmi.n	8000d4e <__aeabi_dadd+0x296>
 8000d4c:	e203      	b.n	8001156 <__aeabi_dadd+0x69e>
 8000d4e:	4663      	mov	r3, ip
 8000d50:	1a1d      	subs	r5, r3, r0
 8000d52:	45ac      	cmp	ip, r5
 8000d54:	4192      	sbcs	r2, r2
 8000d56:	4653      	mov	r3, sl
 8000d58:	4252      	negs	r2, r2
 8000d5a:	1b1c      	subs	r4, r3, r4
 8000d5c:	000e      	movs	r6, r1
 8000d5e:	4688      	mov	r8, r1
 8000d60:	1aa4      	subs	r4, r4, r2
 8000d62:	e723      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000d64:	4936      	ldr	r1, [pc, #216]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000d66:	428f      	cmp	r7, r1
 8000d68:	d070      	beq.n	8000e4c <__aeabi_dadd+0x394>
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	2a38      	cmp	r2, #56	@ 0x38
 8000d6e:	dca8      	bgt.n	8000cc2 <__aeabi_dadd+0x20a>
 8000d70:	2180      	movs	r1, #128	@ 0x80
 8000d72:	4653      	mov	r3, sl
 8000d74:	0409      	lsls	r1, r1, #16
 8000d76:	430b      	orrs	r3, r1
 8000d78:	469a      	mov	sl, r3
 8000d7a:	e78e      	b.n	8000c9a <__aeabi_dadd+0x1e2>
 8000d7c:	003c      	movs	r4, r7
 8000d7e:	2500      	movs	r5, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	e731      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000d84:	2307      	movs	r3, #7
 8000d86:	402b      	ands	r3, r5
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x2d6>
 8000d8c:	e710      	b.n	8000bb0 <__aeabi_dadd+0xf8>
 8000d8e:	e093      	b.n	8000eb8 <__aeabi_dadd+0x400>
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d074      	beq.n	8000e7e <__aeabi_dadd+0x3c6>
 8000d94:	464a      	mov	r2, r9
 8000d96:	1bd2      	subs	r2, r2, r7
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x2e6>
 8000d9c:	e0c7      	b.n	8000f2e <__aeabi_dadd+0x476>
 8000d9e:	4928      	ldr	r1, [pc, #160]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000da0:	4589      	cmp	r9, r1
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x2ee>
 8000da4:	e185      	b.n	80010b2 <__aeabi_dadd+0x5fa>
 8000da6:	2501      	movs	r5, #1
 8000da8:	2a38      	cmp	r2, #56	@ 0x38
 8000daa:	dc12      	bgt.n	8000dd2 <__aeabi_dadd+0x31a>
 8000dac:	2180      	movs	r1, #128	@ 0x80
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	430c      	orrs	r4, r1
 8000db2:	2a1f      	cmp	r2, #31
 8000db4:	dd00      	ble.n	8000db8 <__aeabi_dadd+0x300>
 8000db6:	e1ab      	b.n	8001110 <__aeabi_dadd+0x658>
 8000db8:	2120      	movs	r1, #32
 8000dba:	0025      	movs	r5, r4
 8000dbc:	1a89      	subs	r1, r1, r2
 8000dbe:	0007      	movs	r7, r0
 8000dc0:	4088      	lsls	r0, r1
 8000dc2:	408d      	lsls	r5, r1
 8000dc4:	40d7      	lsrs	r7, r2
 8000dc6:	1e41      	subs	r1, r0, #1
 8000dc8:	4188      	sbcs	r0, r1
 8000dca:	40d4      	lsrs	r4, r2
 8000dcc:	433d      	orrs	r5, r7
 8000dce:	4305      	orrs	r5, r0
 8000dd0:	44a2      	add	sl, r4
 8000dd2:	4465      	add	r5, ip
 8000dd4:	4565      	cmp	r5, ip
 8000dd6:	4192      	sbcs	r2, r2
 8000dd8:	4252      	negs	r2, r2
 8000dda:	4452      	add	r2, sl
 8000ddc:	0014      	movs	r4, r2
 8000dde:	464f      	mov	r7, r9
 8000de0:	e774      	b.n	8000ccc <__aeabi_dadd+0x214>
 8000de2:	0028      	movs	r0, r5
 8000de4:	f001 fdf0 	bl	80029c8 <__clzsi2>
 8000de8:	0003      	movs	r3, r0
 8000dea:	3318      	adds	r3, #24
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_dadd+0x33a>
 8000df0:	e6c2      	b.n	8000b78 <__aeabi_dadd+0xc0>
 8000df2:	002a      	movs	r2, r5
 8000df4:	3808      	subs	r0, #8
 8000df6:	4082      	lsls	r2, r0
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x346>
 8000dfc:	e0a9      	b.n	8000f52 <__aeabi_dadd+0x49a>
 8000dfe:	1bdb      	subs	r3, r3, r7
 8000e00:	1c58      	adds	r0, r3, #1
 8000e02:	281f      	cmp	r0, #31
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_dadd+0x350>
 8000e06:	e1ac      	b.n	8001162 <__aeabi_dadd+0x6aa>
 8000e08:	0015      	movs	r5, r2
 8000e0a:	3b1f      	subs	r3, #31
 8000e0c:	40dd      	lsrs	r5, r3
 8000e0e:	2820      	cmp	r0, #32
 8000e10:	d005      	beq.n	8000e1e <__aeabi_dadd+0x366>
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	1a1b      	subs	r3, r3, r0
 8000e16:	409a      	lsls	r2, r3
 8000e18:	1e53      	subs	r3, r2, #1
 8000e1a:	419a      	sbcs	r2, r3
 8000e1c:	4315      	orrs	r5, r2
 8000e1e:	2307      	movs	r3, #7
 8000e20:	2700      	movs	r7, #0
 8000e22:	402b      	ands	r3, r5
 8000e24:	e7b0      	b.n	8000d88 <__aeabi_dadd+0x2d0>
 8000e26:	08ed      	lsrs	r5, r5, #3
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000e2a:	0762      	lsls	r2, r4, #29
 8000e2c:	432a      	orrs	r2, r5
 8000e2e:	08e4      	lsrs	r4, r4, #3
 8000e30:	429f      	cmp	r7, r3
 8000e32:	d00f      	beq.n	8000e54 <__aeabi_dadd+0x39c>
 8000e34:	0324      	lsls	r4, r4, #12
 8000e36:	0b25      	lsrs	r5, r4, #12
 8000e38:	057c      	lsls	r4, r7, #21
 8000e3a:	0d64      	lsrs	r4, r4, #21
 8000e3c:	e6d4      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	000007ff 	.word	0x000007ff
 8000e44:	ff7fffff 	.word	0xff7fffff
 8000e48:	000007fe 	.word	0x000007fe
 8000e4c:	08c0      	lsrs	r0, r0, #3
 8000e4e:	0762      	lsls	r2, r4, #29
 8000e50:	4302      	orrs	r2, r0
 8000e52:	08e4      	lsrs	r4, r4, #3
 8000e54:	0013      	movs	r3, r2
 8000e56:	4323      	orrs	r3, r4
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dadd+0x3a4>
 8000e5a:	e186      	b.n	800116a <__aeabi_dadd+0x6b2>
 8000e5c:	2580      	movs	r5, #128	@ 0x80
 8000e5e:	032d      	lsls	r5, r5, #12
 8000e60:	4325      	orrs	r5, r4
 8000e62:	032d      	lsls	r5, r5, #12
 8000e64:	4cc3      	ldr	r4, [pc, #780]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000e66:	0b2d      	lsrs	r5, r5, #12
 8000e68:	e6be      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000e6a:	4660      	mov	r0, ip
 8000e6c:	4654      	mov	r4, sl
 8000e6e:	000e      	movs	r6, r1
 8000e70:	0017      	movs	r7, r2
 8000e72:	08c5      	lsrs	r5, r0, #3
 8000e74:	e7d8      	b.n	8000e28 <__aeabi_dadd+0x370>
 8000e76:	4cc0      	ldr	r4, [pc, #768]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000e78:	1aff      	subs	r7, r7, r3
 8000e7a:	4014      	ands	r4, r2
 8000e7c:	e696      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000e7e:	4abf      	ldr	r2, [pc, #764]	@ (800117c <__aeabi_dadd+0x6c4>)
 8000e80:	1c79      	adds	r1, r7, #1
 8000e82:	4211      	tst	r1, r2
 8000e84:	d16b      	bne.n	8000f5e <__aeabi_dadd+0x4a6>
 8000e86:	0022      	movs	r2, r4
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	2f00      	cmp	r7, #0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_dadd+0x3d8>
 8000e8e:	e0db      	b.n	8001048 <__aeabi_dadd+0x590>
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dadd+0x3de>
 8000e94:	e12d      	b.n	80010f2 <__aeabi_dadd+0x63a>
 8000e96:	4662      	mov	r2, ip
 8000e98:	4653      	mov	r3, sl
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x3e8>
 8000e9e:	e0b6      	b.n	800100e <__aeabi_dadd+0x556>
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	18c5      	adds	r5, r0, r3
 8000ea4:	4285      	cmp	r5, r0
 8000ea6:	4180      	sbcs	r0, r0
 8000ea8:	4454      	add	r4, sl
 8000eaa:	4240      	negs	r0, r0
 8000eac:	1824      	adds	r4, r4, r0
 8000eae:	0223      	lsls	r3, r4, #8
 8000eb0:	d502      	bpl.n	8000eb8 <__aeabi_dadd+0x400>
 8000eb2:	000f      	movs	r7, r1
 8000eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000eb6:	401c      	ands	r4, r3
 8000eb8:	003a      	movs	r2, r7
 8000eba:	0028      	movs	r0, r5
 8000ebc:	e7d8      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000ebe:	4662      	mov	r2, ip
 8000ec0:	1a85      	subs	r5, r0, r2
 8000ec2:	42a8      	cmp	r0, r5
 8000ec4:	4192      	sbcs	r2, r2
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	4252      	negs	r2, r2
 8000eca:	4691      	mov	r9, r2
 8000ecc:	1ae3      	subs	r3, r4, r3
 8000ece:	001a      	movs	r2, r3
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	021a      	lsls	r2, r3, #8
 8000eda:	d454      	bmi.n	8000f86 <__aeabi_dadd+0x4ce>
 8000edc:	464a      	mov	r2, r9
 8000ede:	464c      	mov	r4, r9
 8000ee0:	432a      	orrs	r2, r5
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_dadd+0x42e>
 8000ee4:	e640      	b.n	8000b68 <__aeabi_dadd+0xb0>
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	2400      	movs	r4, #0
 8000eea:	2500      	movs	r5, #0
 8000eec:	e67c      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000eee:	4da1      	ldr	r5, [pc, #644]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000ef0:	45a9      	cmp	r9, r5
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x43e>
 8000ef4:	e090      	b.n	8001018 <__aeabi_dadd+0x560>
 8000ef6:	2501      	movs	r5, #1
 8000ef8:	2a38      	cmp	r2, #56	@ 0x38
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0x446>
 8000efc:	e6ab      	b.n	8000c56 <__aeabi_dadd+0x19e>
 8000efe:	2580      	movs	r5, #128	@ 0x80
 8000f00:	042d      	lsls	r5, r5, #16
 8000f02:	432c      	orrs	r4, r5
 8000f04:	e695      	b.n	8000c32 <__aeabi_dadd+0x17a>
 8000f06:	0011      	movs	r1, r2
 8000f08:	4655      	mov	r5, sl
 8000f0a:	3920      	subs	r1, #32
 8000f0c:	40cd      	lsrs	r5, r1
 8000f0e:	46a9      	mov	r9, r5
 8000f10:	2a20      	cmp	r2, #32
 8000f12:	d006      	beq.n	8000f22 <__aeabi_dadd+0x46a>
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	4653      	mov	r3, sl
 8000f18:	1a8a      	subs	r2, r1, r2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	4694      	mov	ip, r2
 8000f22:	4665      	mov	r5, ip
 8000f24:	1e6b      	subs	r3, r5, #1
 8000f26:	419d      	sbcs	r5, r3
 8000f28:	464b      	mov	r3, r9
 8000f2a:	431d      	orrs	r5, r3
 8000f2c:	e612      	b.n	8000b54 <__aeabi_dadd+0x9c>
 8000f2e:	0021      	movs	r1, r4
 8000f30:	4301      	orrs	r1, r0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x47e>
 8000f34:	e0c4      	b.n	80010c0 <__aeabi_dadd+0x608>
 8000f36:	1e51      	subs	r1, r2, #1
 8000f38:	2a01      	cmp	r2, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x486>
 8000f3c:	e0fb      	b.n	8001136 <__aeabi_dadd+0x67e>
 8000f3e:	4d8d      	ldr	r5, [pc, #564]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000f40:	42aa      	cmp	r2, r5
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x48e>
 8000f44:	e0b5      	b.n	80010b2 <__aeabi_dadd+0x5fa>
 8000f46:	2501      	movs	r5, #1
 8000f48:	2938      	cmp	r1, #56	@ 0x38
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_dadd+0x496>
 8000f4c:	e741      	b.n	8000dd2 <__aeabi_dadd+0x31a>
 8000f4e:	000a      	movs	r2, r1
 8000f50:	e72f      	b.n	8000db2 <__aeabi_dadd+0x2fa>
 8000f52:	4c89      	ldr	r4, [pc, #548]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000f54:	1aff      	subs	r7, r7, r3
 8000f56:	4014      	ands	r4, r2
 8000f58:	0762      	lsls	r2, r4, #29
 8000f5a:	08e4      	lsrs	r4, r4, #3
 8000f5c:	e76a      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8000f5e:	4a85      	ldr	r2, [pc, #532]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x4ae>
 8000f64:	e0e3      	b.n	800112e <__aeabi_dadd+0x676>
 8000f66:	4663      	mov	r3, ip
 8000f68:	18c2      	adds	r2, r0, r3
 8000f6a:	4282      	cmp	r2, r0
 8000f6c:	4180      	sbcs	r0, r0
 8000f6e:	0023      	movs	r3, r4
 8000f70:	4240      	negs	r0, r0
 8000f72:	4453      	add	r3, sl
 8000f74:	181b      	adds	r3, r3, r0
 8000f76:	07dd      	lsls	r5, r3, #31
 8000f78:	085c      	lsrs	r4, r3, #1
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	0852      	lsrs	r2, r2, #1
 8000f7e:	4315      	orrs	r5, r2
 8000f80:	000f      	movs	r7, r1
 8000f82:	402b      	ands	r3, r5
 8000f84:	e700      	b.n	8000d88 <__aeabi_dadd+0x2d0>
 8000f86:	4663      	mov	r3, ip
 8000f88:	1a1d      	subs	r5, r3, r0
 8000f8a:	45ac      	cmp	ip, r5
 8000f8c:	4192      	sbcs	r2, r2
 8000f8e:	4653      	mov	r3, sl
 8000f90:	4252      	negs	r2, r2
 8000f92:	1b1c      	subs	r4, r3, r4
 8000f94:	000e      	movs	r6, r1
 8000f96:	4688      	mov	r8, r1
 8000f98:	1aa4      	subs	r4, r4, r2
 8000f9a:	e5e5      	b.n	8000b68 <__aeabi_dadd+0xb0>
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_dadd+0x4ea>
 8000fa0:	e091      	b.n	80010c6 <__aeabi_dadd+0x60e>
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d138      	bne.n	8001018 <__aeabi_dadd+0x560>
 8000fa6:	2480      	movs	r4, #128	@ 0x80
 8000fa8:	2600      	movs	r6, #0
 8000faa:	0324      	lsls	r4, r4, #12
 8000fac:	e756      	b.n	8000e5c <__aeabi_dadd+0x3a4>
 8000fae:	4663      	mov	r3, ip
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	4285      	cmp	r5, r0
 8000fb4:	4180      	sbcs	r0, r0
 8000fb6:	4454      	add	r4, sl
 8000fb8:	4240      	negs	r0, r0
 8000fba:	1824      	adds	r4, r4, r0
 8000fbc:	2701      	movs	r7, #1
 8000fbe:	0223      	lsls	r3, r4, #8
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_dadd+0x50c>
 8000fc2:	e6df      	b.n	8000d84 <__aeabi_dadd+0x2cc>
 8000fc4:	2702      	movs	r7, #2
 8000fc6:	e687      	b.n	8000cd8 <__aeabi_dadd+0x220>
 8000fc8:	4663      	mov	r3, ip
 8000fca:	1ac5      	subs	r5, r0, r3
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	4180      	sbcs	r0, r0
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	1ae4      	subs	r4, r4, r3
 8000fd6:	2701      	movs	r7, #1
 8000fd8:	1a24      	subs	r4, r4, r0
 8000fda:	e5c0      	b.n	8000b5e <__aeabi_dadd+0xa6>
 8000fdc:	0762      	lsls	r2, r4, #29
 8000fde:	08c0      	lsrs	r0, r0, #3
 8000fe0:	4302      	orrs	r2, r0
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	e736      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	4653      	mov	r3, sl
 8000fea:	3920      	subs	r1, #32
 8000fec:	40cb      	lsrs	r3, r1
 8000fee:	4699      	mov	r9, r3
 8000ff0:	2a20      	cmp	r2, #32
 8000ff2:	d006      	beq.n	8001002 <__aeabi_dadd+0x54a>
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	4653      	mov	r3, sl
 8000ff8:	1a8a      	subs	r2, r1, r2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4694      	mov	ip, r2
 8001002:	4665      	mov	r5, ip
 8001004:	1e6b      	subs	r3, r5, #1
 8001006:	419d      	sbcs	r5, r3
 8001008:	464b      	mov	r3, r9
 800100a:	431d      	orrs	r5, r3
 800100c:	e659      	b.n	8000cc2 <__aeabi_dadd+0x20a>
 800100e:	0762      	lsls	r2, r4, #29
 8001010:	08c0      	lsrs	r0, r0, #3
 8001012:	4302      	orrs	r2, r0
 8001014:	08e4      	lsrs	r4, r4, #3
 8001016:	e70d      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8001018:	4653      	mov	r3, sl
 800101a:	075a      	lsls	r2, r3, #29
 800101c:	4663      	mov	r3, ip
 800101e:	08d8      	lsrs	r0, r3, #3
 8001020:	4653      	mov	r3, sl
 8001022:	000e      	movs	r6, r1
 8001024:	4302      	orrs	r2, r0
 8001026:	08dc      	lsrs	r4, r3, #3
 8001028:	e714      	b.n	8000e54 <__aeabi_dadd+0x39c>
 800102a:	0015      	movs	r5, r2
 800102c:	0026      	movs	r6, r4
 800102e:	3d20      	subs	r5, #32
 8001030:	40ee      	lsrs	r6, r5
 8001032:	2a20      	cmp	r2, #32
 8001034:	d003      	beq.n	800103e <__aeabi_dadd+0x586>
 8001036:	2540      	movs	r5, #64	@ 0x40
 8001038:	1aaa      	subs	r2, r5, r2
 800103a:	4094      	lsls	r4, r2
 800103c:	4320      	orrs	r0, r4
 800103e:	1e42      	subs	r2, r0, #1
 8001040:	4190      	sbcs	r0, r2
 8001042:	0005      	movs	r5, r0
 8001044:	4335      	orrs	r5, r6
 8001046:	e606      	b.n	8000c56 <__aeabi_dadd+0x19e>
 8001048:	2a00      	cmp	r2, #0
 800104a:	d07c      	beq.n	8001146 <__aeabi_dadd+0x68e>
 800104c:	4662      	mov	r2, ip
 800104e:	4653      	mov	r3, sl
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	431a      	orrs	r2, r3
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x5a0>
 8001056:	e6fa      	b.n	8000e4e <__aeabi_dadd+0x396>
 8001058:	0762      	lsls	r2, r4, #29
 800105a:	4310      	orrs	r0, r2
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	08e4      	lsrs	r4, r4, #3
 8001060:	0312      	lsls	r2, r2, #12
 8001062:	4214      	tst	r4, r2
 8001064:	d008      	beq.n	8001078 <__aeabi_dadd+0x5c0>
 8001066:	08d9      	lsrs	r1, r3, #3
 8001068:	4211      	tst	r1, r2
 800106a:	d105      	bne.n	8001078 <__aeabi_dadd+0x5c0>
 800106c:	4663      	mov	r3, ip
 800106e:	08d8      	lsrs	r0, r3, #3
 8001070:	4653      	mov	r3, sl
 8001072:	000c      	movs	r4, r1
 8001074:	075b      	lsls	r3, r3, #29
 8001076:	4318      	orrs	r0, r3
 8001078:	0f42      	lsrs	r2, r0, #29
 800107a:	00c0      	lsls	r0, r0, #3
 800107c:	08c0      	lsrs	r0, r0, #3
 800107e:	0752      	lsls	r2, r2, #29
 8001080:	4302      	orrs	r2, r0
 8001082:	e6e7      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001084:	2a00      	cmp	r2, #0
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x5d2>
 8001088:	e72d      	b.n	8000ee6 <__aeabi_dadd+0x42e>
 800108a:	4663      	mov	r3, ip
 800108c:	08d8      	lsrs	r0, r3, #3
 800108e:	4653      	mov	r3, sl
 8001090:	075a      	lsls	r2, r3, #29
 8001092:	000e      	movs	r6, r1
 8001094:	4302      	orrs	r2, r0
 8001096:	08dc      	lsrs	r4, r3, #3
 8001098:	e6cc      	b.n	8000e34 <__aeabi_dadd+0x37c>
 800109a:	4663      	mov	r3, ip
 800109c:	1a1d      	subs	r5, r3, r0
 800109e:	45ac      	cmp	ip, r5
 80010a0:	4192      	sbcs	r2, r2
 80010a2:	4653      	mov	r3, sl
 80010a4:	4252      	negs	r2, r2
 80010a6:	1b1c      	subs	r4, r3, r4
 80010a8:	000e      	movs	r6, r1
 80010aa:	4688      	mov	r8, r1
 80010ac:	1aa4      	subs	r4, r4, r2
 80010ae:	3701      	adds	r7, #1
 80010b0:	e555      	b.n	8000b5e <__aeabi_dadd+0xa6>
 80010b2:	4663      	mov	r3, ip
 80010b4:	08d9      	lsrs	r1, r3, #3
 80010b6:	4653      	mov	r3, sl
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	430a      	orrs	r2, r1
 80010bc:	08dc      	lsrs	r4, r3, #3
 80010be:	e6c9      	b.n	8000e54 <__aeabi_dadd+0x39c>
 80010c0:	4660      	mov	r0, ip
 80010c2:	4654      	mov	r4, sl
 80010c4:	e6d4      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 80010c6:	08c0      	lsrs	r0, r0, #3
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x616>
 80010cc:	e6bf      	b.n	8000e4e <__aeabi_dadd+0x396>
 80010ce:	0762      	lsls	r2, r4, #29
 80010d0:	4310      	orrs	r0, r2
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	08e4      	lsrs	r4, r4, #3
 80010d6:	0312      	lsls	r2, r2, #12
 80010d8:	4214      	tst	r4, r2
 80010da:	d0cd      	beq.n	8001078 <__aeabi_dadd+0x5c0>
 80010dc:	08dd      	lsrs	r5, r3, #3
 80010de:	4215      	tst	r5, r2
 80010e0:	d1ca      	bne.n	8001078 <__aeabi_dadd+0x5c0>
 80010e2:	4663      	mov	r3, ip
 80010e4:	08d8      	lsrs	r0, r3, #3
 80010e6:	4653      	mov	r3, sl
 80010e8:	075b      	lsls	r3, r3, #29
 80010ea:	000e      	movs	r6, r1
 80010ec:	002c      	movs	r4, r5
 80010ee:	4318      	orrs	r0, r3
 80010f0:	e7c2      	b.n	8001078 <__aeabi_dadd+0x5c0>
 80010f2:	4663      	mov	r3, ip
 80010f4:	08d9      	lsrs	r1, r3, #3
 80010f6:	4653      	mov	r3, sl
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	430a      	orrs	r2, r1
 80010fc:	08dc      	lsrs	r4, r3, #3
 80010fe:	e699      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8001100:	4663      	mov	r3, ip
 8001102:	08d8      	lsrs	r0, r3, #3
 8001104:	4653      	mov	r3, sl
 8001106:	075a      	lsls	r2, r3, #29
 8001108:	000e      	movs	r6, r1
 800110a:	4302      	orrs	r2, r0
 800110c:	08dc      	lsrs	r4, r3, #3
 800110e:	e6a1      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001110:	0011      	movs	r1, r2
 8001112:	0027      	movs	r7, r4
 8001114:	3920      	subs	r1, #32
 8001116:	40cf      	lsrs	r7, r1
 8001118:	2a20      	cmp	r2, #32
 800111a:	d003      	beq.n	8001124 <__aeabi_dadd+0x66c>
 800111c:	2140      	movs	r1, #64	@ 0x40
 800111e:	1a8a      	subs	r2, r1, r2
 8001120:	4094      	lsls	r4, r2
 8001122:	4320      	orrs	r0, r4
 8001124:	1e42      	subs	r2, r0, #1
 8001126:	4190      	sbcs	r0, r2
 8001128:	0005      	movs	r5, r0
 800112a:	433d      	orrs	r5, r7
 800112c:	e651      	b.n	8000dd2 <__aeabi_dadd+0x31a>
 800112e:	000c      	movs	r4, r1
 8001130:	2500      	movs	r5, #0
 8001132:	2200      	movs	r2, #0
 8001134:	e558      	b.n	8000be8 <__aeabi_dadd+0x130>
 8001136:	4460      	add	r0, ip
 8001138:	4560      	cmp	r0, ip
 800113a:	4192      	sbcs	r2, r2
 800113c:	4454      	add	r4, sl
 800113e:	4252      	negs	r2, r2
 8001140:	0005      	movs	r5, r0
 8001142:	18a4      	adds	r4, r4, r2
 8001144:	e73a      	b.n	8000fbc <__aeabi_dadd+0x504>
 8001146:	4653      	mov	r3, sl
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	4663      	mov	r3, ip
 800114c:	08d9      	lsrs	r1, r3, #3
 800114e:	4653      	mov	r3, sl
 8001150:	430a      	orrs	r2, r1
 8001152:	08dc      	lsrs	r4, r3, #3
 8001154:	e67e      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001156:	001a      	movs	r2, r3
 8001158:	001c      	movs	r4, r3
 800115a:	432a      	orrs	r2, r5
 800115c:	d000      	beq.n	8001160 <__aeabi_dadd+0x6a8>
 800115e:	e6ab      	b.n	8000eb8 <__aeabi_dadd+0x400>
 8001160:	e6c1      	b.n	8000ee6 <__aeabi_dadd+0x42e>
 8001162:	2120      	movs	r1, #32
 8001164:	2500      	movs	r5, #0
 8001166:	1a09      	subs	r1, r1, r0
 8001168:	e519      	b.n	8000b9e <__aeabi_dadd+0xe6>
 800116a:	2200      	movs	r2, #0
 800116c:	2500      	movs	r5, #0
 800116e:	4c01      	ldr	r4, [pc, #4]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8001170:	e53a      	b.n	8000be8 <__aeabi_dadd+0x130>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	000007fe 	.word	0x000007fe

08001180 <__aeabi_ddiv>:
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	46de      	mov	lr, fp
 8001184:	4645      	mov	r5, r8
 8001186:	4657      	mov	r7, sl
 8001188:	464e      	mov	r6, r9
 800118a:	b5e0      	push	{r5, r6, r7, lr}
 800118c:	b087      	sub	sp, #28
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	030b      	lsls	r3, r1, #12
 8001194:	0b1b      	lsrs	r3, r3, #12
 8001196:	469b      	mov	fp, r3
 8001198:	0fca      	lsrs	r2, r1, #31
 800119a:	004b      	lsls	r3, r1, #1
 800119c:	0004      	movs	r4, r0
 800119e:	4680      	mov	r8, r0
 80011a0:	0d5b      	lsrs	r3, r3, #21
 80011a2:	9202      	str	r2, [sp, #8]
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x28>
 80011a6:	e16a      	b.n	800147e <__aeabi_ddiv+0x2fe>
 80011a8:	4ad4      	ldr	r2, [pc, #848]	@ (80014fc <__aeabi_ddiv+0x37c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x30>
 80011ae:	e18c      	b.n	80014ca <__aeabi_ddiv+0x34a>
 80011b0:	4659      	mov	r1, fp
 80011b2:	0f42      	lsrs	r2, r0, #29
 80011b4:	00c9      	lsls	r1, r1, #3
 80011b6:	430a      	orrs	r2, r1
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	4311      	orrs	r1, r2
 80011be:	00c2      	lsls	r2, r0, #3
 80011c0:	4690      	mov	r8, r2
 80011c2:	4acf      	ldr	r2, [pc, #828]	@ (8001500 <__aeabi_ddiv+0x380>)
 80011c4:	4689      	mov	r9, r1
 80011c6:	4692      	mov	sl, r2
 80011c8:	449a      	add	sl, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	2400      	movs	r4, #0
 80011ce:	9303      	str	r3, [sp, #12]
 80011d0:	9e00      	ldr	r6, [sp, #0]
 80011d2:	9f01      	ldr	r7, [sp, #4]
 80011d4:	033b      	lsls	r3, r7, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	469b      	mov	fp, r3
 80011da:	007b      	lsls	r3, r7, #1
 80011dc:	0030      	movs	r0, r6
 80011de:	0d5b      	lsrs	r3, r3, #21
 80011e0:	0ffd      	lsrs	r5, r7, #31
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x68>
 80011e6:	e128      	b.n	800143a <__aeabi_ddiv+0x2ba>
 80011e8:	4ac4      	ldr	r2, [pc, #784]	@ (80014fc <__aeabi_ddiv+0x37c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x70>
 80011ee:	e177      	b.n	80014e0 <__aeabi_ddiv+0x360>
 80011f0:	4659      	mov	r1, fp
 80011f2:	0f72      	lsrs	r2, r6, #29
 80011f4:	00c9      	lsls	r1, r1, #3
 80011f6:	430a      	orrs	r2, r1
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	0409      	lsls	r1, r1, #16
 80011fc:	4311      	orrs	r1, r2
 80011fe:	468b      	mov	fp, r1
 8001200:	49bf      	ldr	r1, [pc, #764]	@ (8001500 <__aeabi_ddiv+0x380>)
 8001202:	00f2      	lsls	r2, r6, #3
 8001204:	468c      	mov	ip, r1
 8001206:	4651      	mov	r1, sl
 8001208:	4463      	add	r3, ip
 800120a:	1acb      	subs	r3, r1, r3
 800120c:	469a      	mov	sl, r3
 800120e:	2300      	movs	r3, #0
 8001210:	9e02      	ldr	r6, [sp, #8]
 8001212:	406e      	eors	r6, r5
 8001214:	2c0f      	cmp	r4, #15
 8001216:	d827      	bhi.n	8001268 <__aeabi_ddiv+0xe8>
 8001218:	49ba      	ldr	r1, [pc, #744]	@ (8001504 <__aeabi_ddiv+0x384>)
 800121a:	00a4      	lsls	r4, r4, #2
 800121c:	5909      	ldr	r1, [r1, r4]
 800121e:	468f      	mov	pc, r1
 8001220:	46cb      	mov	fp, r9
 8001222:	4642      	mov	r2, r8
 8001224:	9e02      	ldr	r6, [sp, #8]
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d016      	beq.n	800125a <__aeabi_ddiv+0xda>
 800122c:	2b03      	cmp	r3, #3
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0xb2>
 8001230:	e2a6      	b.n	8001780 <__aeabi_ddiv+0x600>
 8001232:	2b01      	cmp	r3, #1
 8001234:	d000      	beq.n	8001238 <__aeabi_ddiv+0xb8>
 8001236:	e0df      	b.n	80013f8 <__aeabi_ddiv+0x278>
 8001238:	2200      	movs	r2, #0
 800123a:	2300      	movs	r3, #0
 800123c:	2400      	movs	r4, #0
 800123e:	4690      	mov	r8, r2
 8001240:	051b      	lsls	r3, r3, #20
 8001242:	4323      	orrs	r3, r4
 8001244:	07f6      	lsls	r6, r6, #31
 8001246:	4333      	orrs	r3, r6
 8001248:	4640      	mov	r0, r8
 800124a:	0019      	movs	r1, r3
 800124c:	b007      	add	sp, #28
 800124e:	bcf0      	pop	{r4, r5, r6, r7}
 8001250:	46bb      	mov	fp, r7
 8001252:	46b2      	mov	sl, r6
 8001254:	46a9      	mov	r9, r5
 8001256:	46a0      	mov	r8, r4
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125a:	2200      	movs	r2, #0
 800125c:	2400      	movs	r4, #0
 800125e:	4690      	mov	r8, r2
 8001260:	4ba6      	ldr	r3, [pc, #664]	@ (80014fc <__aeabi_ddiv+0x37c>)
 8001262:	e7ed      	b.n	8001240 <__aeabi_ddiv+0xc0>
 8001264:	002e      	movs	r6, r5
 8001266:	e7df      	b.n	8001228 <__aeabi_ddiv+0xa8>
 8001268:	45cb      	cmp	fp, r9
 800126a:	d200      	bcs.n	800126e <__aeabi_ddiv+0xee>
 800126c:	e1d4      	b.n	8001618 <__aeabi_ddiv+0x498>
 800126e:	d100      	bne.n	8001272 <__aeabi_ddiv+0xf2>
 8001270:	e1cf      	b.n	8001612 <__aeabi_ddiv+0x492>
 8001272:	2301      	movs	r3, #1
 8001274:	425b      	negs	r3, r3
 8001276:	469c      	mov	ip, r3
 8001278:	4644      	mov	r4, r8
 800127a:	4648      	mov	r0, r9
 800127c:	2700      	movs	r7, #0
 800127e:	44e2      	add	sl, ip
 8001280:	465b      	mov	r3, fp
 8001282:	0e15      	lsrs	r5, r2, #24
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	431d      	orrs	r5, r3
 8001288:	0c19      	lsrs	r1, r3, #16
 800128a:	042b      	lsls	r3, r5, #16
 800128c:	0212      	lsls	r2, r2, #8
 800128e:	9500      	str	r5, [sp, #0]
 8001290:	0c1d      	lsrs	r5, r3, #16
 8001292:	4691      	mov	r9, r2
 8001294:	9102      	str	r1, [sp, #8]
 8001296:	9503      	str	r5, [sp, #12]
 8001298:	f7fe ffd8 	bl	800024c <__aeabi_uidivmod>
 800129c:	0002      	movs	r2, r0
 800129e:	436a      	muls	r2, r5
 80012a0:	040b      	lsls	r3, r1, #16
 80012a2:	0c21      	lsrs	r1, r4, #16
 80012a4:	4680      	mov	r8, r0
 80012a6:	4319      	orrs	r1, r3
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d909      	bls.n	80012c0 <__aeabi_ddiv+0x140>
 80012ac:	9d00      	ldr	r5, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	46ac      	mov	ip, r5
 80012b2:	425b      	negs	r3, r3
 80012b4:	4461      	add	r1, ip
 80012b6:	469c      	mov	ip, r3
 80012b8:	44e0      	add	r8, ip
 80012ba:	428d      	cmp	r5, r1
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x140>
 80012be:	e1fb      	b.n	80016b8 <__aeabi_ddiv+0x538>
 80012c0:	1a88      	subs	r0, r1, r2
 80012c2:	9902      	ldr	r1, [sp, #8]
 80012c4:	f7fe ffc2 	bl	800024c <__aeabi_uidivmod>
 80012c8:	9a03      	ldr	r2, [sp, #12]
 80012ca:	0424      	lsls	r4, r4, #16
 80012cc:	4342      	muls	r2, r0
 80012ce:	0409      	lsls	r1, r1, #16
 80012d0:	0c24      	lsrs	r4, r4, #16
 80012d2:	0003      	movs	r3, r0
 80012d4:	430c      	orrs	r4, r1
 80012d6:	42a2      	cmp	r2, r4
 80012d8:	d906      	bls.n	80012e8 <__aeabi_ddiv+0x168>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	468c      	mov	ip, r1
 80012e0:	4464      	add	r4, ip
 80012e2:	42a1      	cmp	r1, r4
 80012e4:	d800      	bhi.n	80012e8 <__aeabi_ddiv+0x168>
 80012e6:	e1e1      	b.n	80016ac <__aeabi_ddiv+0x52c>
 80012e8:	1aa0      	subs	r0, r4, r2
 80012ea:	4642      	mov	r2, r8
 80012ec:	0412      	lsls	r2, r2, #16
 80012ee:	431a      	orrs	r2, r3
 80012f0:	4693      	mov	fp, r2
 80012f2:	464b      	mov	r3, r9
 80012f4:	4659      	mov	r1, fp
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	001d      	movs	r5, r3
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	040b      	lsls	r3, r1, #16
 80012fe:	4649      	mov	r1, r9
 8001300:	0409      	lsls	r1, r1, #16
 8001302:	0c09      	lsrs	r1, r1, #16
 8001304:	000c      	movs	r4, r1
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	435c      	muls	r4, r3
 800130a:	0c12      	lsrs	r2, r2, #16
 800130c:	436b      	muls	r3, r5
 800130e:	4688      	mov	r8, r1
 8001310:	4351      	muls	r1, r2
 8001312:	436a      	muls	r2, r5
 8001314:	0c25      	lsrs	r5, r4, #16
 8001316:	46ac      	mov	ip, r5
 8001318:	185b      	adds	r3, r3, r1
 800131a:	4463      	add	r3, ip
 800131c:	4299      	cmp	r1, r3
 800131e:	d903      	bls.n	8001328 <__aeabi_ddiv+0x1a8>
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	0249      	lsls	r1, r1, #9
 8001324:	468c      	mov	ip, r1
 8001326:	4462      	add	r2, ip
 8001328:	0c19      	lsrs	r1, r3, #16
 800132a:	0424      	lsls	r4, r4, #16
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	0c24      	lsrs	r4, r4, #16
 8001330:	188a      	adds	r2, r1, r2
 8001332:	191c      	adds	r4, r3, r4
 8001334:	4290      	cmp	r0, r2
 8001336:	d302      	bcc.n	800133e <__aeabi_ddiv+0x1be>
 8001338:	d116      	bne.n	8001368 <__aeabi_ddiv+0x1e8>
 800133a:	42a7      	cmp	r7, r4
 800133c:	d214      	bcs.n	8001368 <__aeabi_ddiv+0x1e8>
 800133e:	465b      	mov	r3, fp
 8001340:	9d00      	ldr	r5, [sp, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	444f      	add	r7, r9
 8001346:	9305      	str	r3, [sp, #20]
 8001348:	454f      	cmp	r7, r9
 800134a:	419b      	sbcs	r3, r3
 800134c:	46ac      	mov	ip, r5
 800134e:	425b      	negs	r3, r3
 8001350:	4463      	add	r3, ip
 8001352:	18c0      	adds	r0, r0, r3
 8001354:	4285      	cmp	r5, r0
 8001356:	d300      	bcc.n	800135a <__aeabi_ddiv+0x1da>
 8001358:	e1a1      	b.n	800169e <__aeabi_ddiv+0x51e>
 800135a:	4282      	cmp	r2, r0
 800135c:	d900      	bls.n	8001360 <__aeabi_ddiv+0x1e0>
 800135e:	e1f6      	b.n	800174e <__aeabi_ddiv+0x5ce>
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x1e4>
 8001362:	e1f1      	b.n	8001748 <__aeabi_ddiv+0x5c8>
 8001364:	9b05      	ldr	r3, [sp, #20]
 8001366:	469b      	mov	fp, r3
 8001368:	1b3c      	subs	r4, r7, r4
 800136a:	42a7      	cmp	r7, r4
 800136c:	41bf      	sbcs	r7, r7
 800136e:	9d00      	ldr	r5, [sp, #0]
 8001370:	1a80      	subs	r0, r0, r2
 8001372:	427f      	negs	r7, r7
 8001374:	1bc0      	subs	r0, r0, r7
 8001376:	4285      	cmp	r5, r0
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x1fc>
 800137a:	e1d0      	b.n	800171e <__aeabi_ddiv+0x59e>
 800137c:	9902      	ldr	r1, [sp, #8]
 800137e:	f7fe ff65 	bl	800024c <__aeabi_uidivmod>
 8001382:	9a03      	ldr	r2, [sp, #12]
 8001384:	040b      	lsls	r3, r1, #16
 8001386:	4342      	muls	r2, r0
 8001388:	0c21      	lsrs	r1, r4, #16
 800138a:	0007      	movs	r7, r0
 800138c:	4319      	orrs	r1, r3
 800138e:	428a      	cmp	r2, r1
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x214>
 8001392:	e178      	b.n	8001686 <__aeabi_ddiv+0x506>
 8001394:	1a88      	subs	r0, r1, r2
 8001396:	9902      	ldr	r1, [sp, #8]
 8001398:	f7fe ff58 	bl	800024c <__aeabi_uidivmod>
 800139c:	9a03      	ldr	r2, [sp, #12]
 800139e:	0424      	lsls	r4, r4, #16
 80013a0:	4342      	muls	r2, r0
 80013a2:	0409      	lsls	r1, r1, #16
 80013a4:	0c24      	lsrs	r4, r4, #16
 80013a6:	0003      	movs	r3, r0
 80013a8:	430c      	orrs	r4, r1
 80013aa:	42a2      	cmp	r2, r4
 80013ac:	d900      	bls.n	80013b0 <__aeabi_ddiv+0x230>
 80013ae:	e15d      	b.n	800166c <__aeabi_ddiv+0x4ec>
 80013b0:	4641      	mov	r1, r8
 80013b2:	1aa4      	subs	r4, r4, r2
 80013b4:	043a      	lsls	r2, r7, #16
 80013b6:	431a      	orrs	r2, r3
 80013b8:	9d04      	ldr	r5, [sp, #16]
 80013ba:	0413      	lsls	r3, r2, #16
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	4359      	muls	r1, r3
 80013c0:	4647      	mov	r7, r8
 80013c2:	436b      	muls	r3, r5
 80013c4:	469c      	mov	ip, r3
 80013c6:	0c10      	lsrs	r0, r2, #16
 80013c8:	4347      	muls	r7, r0
 80013ca:	0c0b      	lsrs	r3, r1, #16
 80013cc:	44bc      	add	ip, r7
 80013ce:	4463      	add	r3, ip
 80013d0:	4368      	muls	r0, r5
 80013d2:	429f      	cmp	r7, r3
 80013d4:	d903      	bls.n	80013de <__aeabi_ddiv+0x25e>
 80013d6:	2580      	movs	r5, #128	@ 0x80
 80013d8:	026d      	lsls	r5, r5, #9
 80013da:	46ac      	mov	ip, r5
 80013dc:	4460      	add	r0, ip
 80013de:	0c1f      	lsrs	r7, r3, #16
 80013e0:	0409      	lsls	r1, r1, #16
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	0c09      	lsrs	r1, r1, #16
 80013e6:	183f      	adds	r7, r7, r0
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	42bc      	cmp	r4, r7
 80013ec:	d200      	bcs.n	80013f0 <__aeabi_ddiv+0x270>
 80013ee:	e102      	b.n	80015f6 <__aeabi_ddiv+0x476>
 80013f0:	d100      	bne.n	80013f4 <__aeabi_ddiv+0x274>
 80013f2:	e0fd      	b.n	80015f0 <__aeabi_ddiv+0x470>
 80013f4:	2301      	movs	r3, #1
 80013f6:	431a      	orrs	r2, r3
 80013f8:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <__aeabi_ddiv+0x388>)
 80013fa:	4453      	add	r3, sl
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_ddiv+0x282>
 8001400:	e0ae      	b.n	8001560 <__aeabi_ddiv+0x3e0>
 8001402:	0751      	lsls	r1, r2, #29
 8001404:	d000      	beq.n	8001408 <__aeabi_ddiv+0x288>
 8001406:	e198      	b.n	800173a <__aeabi_ddiv+0x5ba>
 8001408:	4659      	mov	r1, fp
 800140a:	01c9      	lsls	r1, r1, #7
 800140c:	d506      	bpl.n	800141c <__aeabi_ddiv+0x29c>
 800140e:	4659      	mov	r1, fp
 8001410:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <__aeabi_ddiv+0x38c>)
 8001412:	4019      	ands	r1, r3
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	468b      	mov	fp, r1
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4453      	add	r3, sl
 800141c:	493c      	ldr	r1, [pc, #240]	@ (8001510 <__aeabi_ddiv+0x390>)
 800141e:	428b      	cmp	r3, r1
 8001420:	dd00      	ble.n	8001424 <__aeabi_ddiv+0x2a4>
 8001422:	e71a      	b.n	800125a <__aeabi_ddiv+0xda>
 8001424:	4659      	mov	r1, fp
 8001426:	08d2      	lsrs	r2, r2, #3
 8001428:	0749      	lsls	r1, r1, #29
 800142a:	4311      	orrs	r1, r2
 800142c:	465a      	mov	r2, fp
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	0254      	lsls	r4, r2, #9
 8001432:	4688      	mov	r8, r1
 8001434:	0b24      	lsrs	r4, r4, #12
 8001436:	0d5b      	lsrs	r3, r3, #21
 8001438:	e702      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800143a:	465a      	mov	r2, fp
 800143c:	9b00      	ldr	r3, [sp, #0]
 800143e:	431a      	orrs	r2, r3
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x2c4>
 8001442:	e07e      	b.n	8001542 <__aeabi_ddiv+0x3c2>
 8001444:	465b      	mov	r3, fp
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0x2cc>
 800144a:	e100      	b.n	800164e <__aeabi_ddiv+0x4ce>
 800144c:	4658      	mov	r0, fp
 800144e:	f001 fabb 	bl	80029c8 <__clzsi2>
 8001452:	0002      	movs	r2, r0
 8001454:	0003      	movs	r3, r0
 8001456:	3a0b      	subs	r2, #11
 8001458:	271d      	movs	r7, #29
 800145a:	9e00      	ldr	r6, [sp, #0]
 800145c:	1aba      	subs	r2, r7, r2
 800145e:	0019      	movs	r1, r3
 8001460:	4658      	mov	r0, fp
 8001462:	40d6      	lsrs	r6, r2
 8001464:	3908      	subs	r1, #8
 8001466:	4088      	lsls	r0, r1
 8001468:	0032      	movs	r2, r6
 800146a:	4302      	orrs	r2, r0
 800146c:	4693      	mov	fp, r2
 800146e:	9a00      	ldr	r2, [sp, #0]
 8001470:	408a      	lsls	r2, r1
 8001472:	4928      	ldr	r1, [pc, #160]	@ (8001514 <__aeabi_ddiv+0x394>)
 8001474:	4453      	add	r3, sl
 8001476:	468a      	mov	sl, r1
 8001478:	449a      	add	sl, r3
 800147a:	2300      	movs	r3, #0
 800147c:	e6c8      	b.n	8001210 <__aeabi_ddiv+0x90>
 800147e:	465b      	mov	r3, fp
 8001480:	4303      	orrs	r3, r0
 8001482:	4699      	mov	r9, r3
 8001484:	d056      	beq.n	8001534 <__aeabi_ddiv+0x3b4>
 8001486:	465b      	mov	r3, fp
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x30e>
 800148c:	e0cd      	b.n	800162a <__aeabi_ddiv+0x4aa>
 800148e:	4658      	mov	r0, fp
 8001490:	f001 fa9a 	bl	80029c8 <__clzsi2>
 8001494:	230b      	movs	r3, #11
 8001496:	425b      	negs	r3, r3
 8001498:	469c      	mov	ip, r3
 800149a:	0002      	movs	r2, r0
 800149c:	4484      	add	ip, r0
 800149e:	4666      	mov	r6, ip
 80014a0:	231d      	movs	r3, #29
 80014a2:	1b9b      	subs	r3, r3, r6
 80014a4:	0026      	movs	r6, r4
 80014a6:	0011      	movs	r1, r2
 80014a8:	4658      	mov	r0, fp
 80014aa:	40de      	lsrs	r6, r3
 80014ac:	3908      	subs	r1, #8
 80014ae:	4088      	lsls	r0, r1
 80014b0:	0033      	movs	r3, r6
 80014b2:	4303      	orrs	r3, r0
 80014b4:	4699      	mov	r9, r3
 80014b6:	0023      	movs	r3, r4
 80014b8:	408b      	lsls	r3, r1
 80014ba:	4698      	mov	r8, r3
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <__aeabi_ddiv+0x398>)
 80014be:	2400      	movs	r4, #0
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	469a      	mov	sl, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	e682      	b.n	80011d0 <__aeabi_ddiv+0x50>
 80014ca:	465a      	mov	r2, fp
 80014cc:	4302      	orrs	r2, r0
 80014ce:	4691      	mov	r9, r2
 80014d0:	d12a      	bne.n	8001528 <__aeabi_ddiv+0x3a8>
 80014d2:	2200      	movs	r2, #0
 80014d4:	469a      	mov	sl, r3
 80014d6:	2302      	movs	r3, #2
 80014d8:	4690      	mov	r8, r2
 80014da:	2408      	movs	r4, #8
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	e677      	b.n	80011d0 <__aeabi_ddiv+0x50>
 80014e0:	465a      	mov	r2, fp
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <__aeabi_ddiv+0x39c>)
 80014e8:	469c      	mov	ip, r3
 80014ea:	44e2      	add	sl, ip
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d117      	bne.n	8001520 <__aeabi_ddiv+0x3a0>
 80014f0:	2302      	movs	r3, #2
 80014f2:	431c      	orrs	r4, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	469b      	mov	fp, r3
 80014f8:	3302      	adds	r3, #2
 80014fa:	e689      	b.n	8001210 <__aeabi_ddiv+0x90>
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	fffffc01 	.word	0xfffffc01
 8001504:	0800a434 	.word	0x0800a434
 8001508:	000003ff 	.word	0x000003ff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	000003f3 	.word	0x000003f3
 8001518:	fffffc0d 	.word	0xfffffc0d
 800151c:	fffff801 	.word	0xfffff801
 8001520:	2303      	movs	r3, #3
 8001522:	0032      	movs	r2, r6
 8001524:	431c      	orrs	r4, r3
 8001526:	e673      	b.n	8001210 <__aeabi_ddiv+0x90>
 8001528:	469a      	mov	sl, r3
 800152a:	2303      	movs	r3, #3
 800152c:	46d9      	mov	r9, fp
 800152e:	240c      	movs	r4, #12
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	e64d      	b.n	80011d0 <__aeabi_ddiv+0x50>
 8001534:	2300      	movs	r3, #0
 8001536:	4698      	mov	r8, r3
 8001538:	469a      	mov	sl, r3
 800153a:	3301      	adds	r3, #1
 800153c:	2404      	movs	r4, #4
 800153e:	9303      	str	r3, [sp, #12]
 8001540:	e646      	b.n	80011d0 <__aeabi_ddiv+0x50>
 8001542:	2301      	movs	r3, #1
 8001544:	431c      	orrs	r4, r3
 8001546:	2300      	movs	r3, #0
 8001548:	469b      	mov	fp, r3
 800154a:	3301      	adds	r3, #1
 800154c:	e660      	b.n	8001210 <__aeabi_ddiv+0x90>
 800154e:	2300      	movs	r3, #0
 8001550:	2480      	movs	r4, #128	@ 0x80
 8001552:	4698      	mov	r8, r3
 8001554:	2600      	movs	r6, #0
 8001556:	4b92      	ldr	r3, [pc, #584]	@ (80017a0 <__aeabi_ddiv+0x620>)
 8001558:	0324      	lsls	r4, r4, #12
 800155a:	e671      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800155c:	2201      	movs	r2, #1
 800155e:	4252      	negs	r2, r2
 8001560:	2101      	movs	r1, #1
 8001562:	1ac9      	subs	r1, r1, r3
 8001564:	2938      	cmp	r1, #56	@ 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_ddiv+0x3ea>
 8001568:	e666      	b.n	8001238 <__aeabi_ddiv+0xb8>
 800156a:	291f      	cmp	r1, #31
 800156c:	dc00      	bgt.n	8001570 <__aeabi_ddiv+0x3f0>
 800156e:	e0ab      	b.n	80016c8 <__aeabi_ddiv+0x548>
 8001570:	201f      	movs	r0, #31
 8001572:	4240      	negs	r0, r0
 8001574:	1ac3      	subs	r3, r0, r3
 8001576:	4658      	mov	r0, fp
 8001578:	40d8      	lsrs	r0, r3
 800157a:	0003      	movs	r3, r0
 800157c:	2920      	cmp	r1, #32
 800157e:	d004      	beq.n	800158a <__aeabi_ddiv+0x40a>
 8001580:	4658      	mov	r0, fp
 8001582:	4988      	ldr	r1, [pc, #544]	@ (80017a4 <__aeabi_ddiv+0x624>)
 8001584:	4451      	add	r1, sl
 8001586:	4088      	lsls	r0, r1
 8001588:	4302      	orrs	r2, r0
 800158a:	1e51      	subs	r1, r2, #1
 800158c:	418a      	sbcs	r2, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	2307      	movs	r3, #7
 8001592:	0019      	movs	r1, r3
 8001594:	2400      	movs	r4, #0
 8001596:	4011      	ands	r1, r2
 8001598:	4213      	tst	r3, r2
 800159a:	d00c      	beq.n	80015b6 <__aeabi_ddiv+0x436>
 800159c:	230f      	movs	r3, #15
 800159e:	4013      	ands	r3, r2
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x426>
 80015a4:	e0f9      	b.n	800179a <__aeabi_ddiv+0x61a>
 80015a6:	1d11      	adds	r1, r2, #4
 80015a8:	4291      	cmp	r1, r2
 80015aa:	419b      	sbcs	r3, r3
 80015ac:	000a      	movs	r2, r1
 80015ae:	425b      	negs	r3, r3
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	0b1c      	lsrs	r4, r3, #12
 80015b6:	08d2      	lsrs	r2, r2, #3
 80015b8:	430a      	orrs	r2, r1
 80015ba:	4690      	mov	r8, r2
 80015bc:	2300      	movs	r3, #0
 80015be:	e63f      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015c0:	2480      	movs	r4, #128	@ 0x80
 80015c2:	464b      	mov	r3, r9
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	4223      	tst	r3, r4
 80015c8:	d009      	beq.n	80015de <__aeabi_ddiv+0x45e>
 80015ca:	465b      	mov	r3, fp
 80015cc:	4223      	tst	r3, r4
 80015ce:	d106      	bne.n	80015de <__aeabi_ddiv+0x45e>
 80015d0:	431c      	orrs	r4, r3
 80015d2:	0324      	lsls	r4, r4, #12
 80015d4:	002e      	movs	r6, r5
 80015d6:	4690      	mov	r8, r2
 80015d8:	4b71      	ldr	r3, [pc, #452]	@ (80017a0 <__aeabi_ddiv+0x620>)
 80015da:	0b24      	lsrs	r4, r4, #12
 80015dc:	e630      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015de:	2480      	movs	r4, #128	@ 0x80
 80015e0:	464b      	mov	r3, r9
 80015e2:	0324      	lsls	r4, r4, #12
 80015e4:	431c      	orrs	r4, r3
 80015e6:	0324      	lsls	r4, r4, #12
 80015e8:	9e02      	ldr	r6, [sp, #8]
 80015ea:	4b6d      	ldr	r3, [pc, #436]	@ (80017a0 <__aeabi_ddiv+0x620>)
 80015ec:	0b24      	lsrs	r4, r4, #12
 80015ee:	e627      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_ddiv+0x476>
 80015f4:	e700      	b.n	80013f8 <__aeabi_ddiv+0x278>
 80015f6:	9800      	ldr	r0, [sp, #0]
 80015f8:	1e51      	subs	r1, r2, #1
 80015fa:	4684      	mov	ip, r0
 80015fc:	4464      	add	r4, ip
 80015fe:	4284      	cmp	r4, r0
 8001600:	d200      	bcs.n	8001604 <__aeabi_ddiv+0x484>
 8001602:	e084      	b.n	800170e <__aeabi_ddiv+0x58e>
 8001604:	42bc      	cmp	r4, r7
 8001606:	d200      	bcs.n	800160a <__aeabi_ddiv+0x48a>
 8001608:	e0ae      	b.n	8001768 <__aeabi_ddiv+0x5e8>
 800160a:	d100      	bne.n	800160e <__aeabi_ddiv+0x48e>
 800160c:	e0c1      	b.n	8001792 <__aeabi_ddiv+0x612>
 800160e:	000a      	movs	r2, r1
 8001610:	e6f0      	b.n	80013f4 <__aeabi_ddiv+0x274>
 8001612:	4542      	cmp	r2, r8
 8001614:	d900      	bls.n	8001618 <__aeabi_ddiv+0x498>
 8001616:	e62c      	b.n	8001272 <__aeabi_ddiv+0xf2>
 8001618:	464b      	mov	r3, r9
 800161a:	07dc      	lsls	r4, r3, #31
 800161c:	0858      	lsrs	r0, r3, #1
 800161e:	4643      	mov	r3, r8
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	431c      	orrs	r4, r3
 8001624:	4643      	mov	r3, r8
 8001626:	07df      	lsls	r7, r3, #31
 8001628:	e62a      	b.n	8001280 <__aeabi_ddiv+0x100>
 800162a:	f001 f9cd 	bl	80029c8 <__clzsi2>
 800162e:	2315      	movs	r3, #21
 8001630:	469c      	mov	ip, r3
 8001632:	4484      	add	ip, r0
 8001634:	0002      	movs	r2, r0
 8001636:	4663      	mov	r3, ip
 8001638:	3220      	adds	r2, #32
 800163a:	2b1c      	cmp	r3, #28
 800163c:	dc00      	bgt.n	8001640 <__aeabi_ddiv+0x4c0>
 800163e:	e72e      	b.n	800149e <__aeabi_ddiv+0x31e>
 8001640:	0023      	movs	r3, r4
 8001642:	3808      	subs	r0, #8
 8001644:	4083      	lsls	r3, r0
 8001646:	4699      	mov	r9, r3
 8001648:	2300      	movs	r3, #0
 800164a:	4698      	mov	r8, r3
 800164c:	e736      	b.n	80014bc <__aeabi_ddiv+0x33c>
 800164e:	f001 f9bb 	bl	80029c8 <__clzsi2>
 8001652:	0002      	movs	r2, r0
 8001654:	0003      	movs	r3, r0
 8001656:	3215      	adds	r2, #21
 8001658:	3320      	adds	r3, #32
 800165a:	2a1c      	cmp	r2, #28
 800165c:	dc00      	bgt.n	8001660 <__aeabi_ddiv+0x4e0>
 800165e:	e6fb      	b.n	8001458 <__aeabi_ddiv+0x2d8>
 8001660:	9900      	ldr	r1, [sp, #0]
 8001662:	3808      	subs	r0, #8
 8001664:	4081      	lsls	r1, r0
 8001666:	2200      	movs	r2, #0
 8001668:	468b      	mov	fp, r1
 800166a:	e702      	b.n	8001472 <__aeabi_ddiv+0x2f2>
 800166c:	9900      	ldr	r1, [sp, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	468c      	mov	ip, r1
 8001672:	4464      	add	r4, ip
 8001674:	42a1      	cmp	r1, r4
 8001676:	d900      	bls.n	800167a <__aeabi_ddiv+0x4fa>
 8001678:	e69a      	b.n	80013b0 <__aeabi_ddiv+0x230>
 800167a:	42a2      	cmp	r2, r4
 800167c:	d800      	bhi.n	8001680 <__aeabi_ddiv+0x500>
 800167e:	e697      	b.n	80013b0 <__aeabi_ddiv+0x230>
 8001680:	1e83      	subs	r3, r0, #2
 8001682:	4464      	add	r4, ip
 8001684:	e694      	b.n	80013b0 <__aeabi_ddiv+0x230>
 8001686:	46ac      	mov	ip, r5
 8001688:	4461      	add	r1, ip
 800168a:	3f01      	subs	r7, #1
 800168c:	428d      	cmp	r5, r1
 800168e:	d900      	bls.n	8001692 <__aeabi_ddiv+0x512>
 8001690:	e680      	b.n	8001394 <__aeabi_ddiv+0x214>
 8001692:	428a      	cmp	r2, r1
 8001694:	d800      	bhi.n	8001698 <__aeabi_ddiv+0x518>
 8001696:	e67d      	b.n	8001394 <__aeabi_ddiv+0x214>
 8001698:	1e87      	subs	r7, r0, #2
 800169a:	4461      	add	r1, ip
 800169c:	e67a      	b.n	8001394 <__aeabi_ddiv+0x214>
 800169e:	4285      	cmp	r5, r0
 80016a0:	d000      	beq.n	80016a4 <__aeabi_ddiv+0x524>
 80016a2:	e65f      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 80016a4:	45b9      	cmp	r9, r7
 80016a6:	d900      	bls.n	80016aa <__aeabi_ddiv+0x52a>
 80016a8:	e65c      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 80016aa:	e656      	b.n	800135a <__aeabi_ddiv+0x1da>
 80016ac:	42a2      	cmp	r2, r4
 80016ae:	d800      	bhi.n	80016b2 <__aeabi_ddiv+0x532>
 80016b0:	e61a      	b.n	80012e8 <__aeabi_ddiv+0x168>
 80016b2:	1e83      	subs	r3, r0, #2
 80016b4:	4464      	add	r4, ip
 80016b6:	e617      	b.n	80012e8 <__aeabi_ddiv+0x168>
 80016b8:	428a      	cmp	r2, r1
 80016ba:	d800      	bhi.n	80016be <__aeabi_ddiv+0x53e>
 80016bc:	e600      	b.n	80012c0 <__aeabi_ddiv+0x140>
 80016be:	46ac      	mov	ip, r5
 80016c0:	1e83      	subs	r3, r0, #2
 80016c2:	4698      	mov	r8, r3
 80016c4:	4461      	add	r1, ip
 80016c6:	e5fb      	b.n	80012c0 <__aeabi_ddiv+0x140>
 80016c8:	4837      	ldr	r0, [pc, #220]	@ (80017a8 <__aeabi_ddiv+0x628>)
 80016ca:	0014      	movs	r4, r2
 80016cc:	4450      	add	r0, sl
 80016ce:	4082      	lsls	r2, r0
 80016d0:	465b      	mov	r3, fp
 80016d2:	0017      	movs	r7, r2
 80016d4:	4083      	lsls	r3, r0
 80016d6:	40cc      	lsrs	r4, r1
 80016d8:	1e7a      	subs	r2, r7, #1
 80016da:	4197      	sbcs	r7, r2
 80016dc:	4323      	orrs	r3, r4
 80016de:	433b      	orrs	r3, r7
 80016e0:	001a      	movs	r2, r3
 80016e2:	465b      	mov	r3, fp
 80016e4:	40cb      	lsrs	r3, r1
 80016e6:	0751      	lsls	r1, r2, #29
 80016e8:	d009      	beq.n	80016fe <__aeabi_ddiv+0x57e>
 80016ea:	210f      	movs	r1, #15
 80016ec:	4011      	ands	r1, r2
 80016ee:	2904      	cmp	r1, #4
 80016f0:	d005      	beq.n	80016fe <__aeabi_ddiv+0x57e>
 80016f2:	1d11      	adds	r1, r2, #4
 80016f4:	4291      	cmp	r1, r2
 80016f6:	4192      	sbcs	r2, r2
 80016f8:	4252      	negs	r2, r2
 80016fa:	189b      	adds	r3, r3, r2
 80016fc:	000a      	movs	r2, r1
 80016fe:	0219      	lsls	r1, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_ddiv+0x584>
 8001702:	e755      	b.n	80015b0 <__aeabi_ddiv+0x430>
 8001704:	2200      	movs	r2, #0
 8001706:	2301      	movs	r3, #1
 8001708:	2400      	movs	r4, #0
 800170a:	4690      	mov	r8, r2
 800170c:	e598      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800170e:	000a      	movs	r2, r1
 8001710:	42bc      	cmp	r4, r7
 8001712:	d000      	beq.n	8001716 <__aeabi_ddiv+0x596>
 8001714:	e66e      	b.n	80013f4 <__aeabi_ddiv+0x274>
 8001716:	454b      	cmp	r3, r9
 8001718:	d000      	beq.n	800171c <__aeabi_ddiv+0x59c>
 800171a:	e66b      	b.n	80013f4 <__aeabi_ddiv+0x274>
 800171c:	e66c      	b.n	80013f8 <__aeabi_ddiv+0x278>
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <__aeabi_ddiv+0x62c>)
 8001720:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <__aeabi_ddiv+0x630>)
 8001722:	4453      	add	r3, sl
 8001724:	4592      	cmp	sl, r2
 8001726:	da00      	bge.n	800172a <__aeabi_ddiv+0x5aa>
 8001728:	e718      	b.n	800155c <__aeabi_ddiv+0x3dc>
 800172a:	2101      	movs	r1, #1
 800172c:	4249      	negs	r1, r1
 800172e:	1d0a      	adds	r2, r1, #4
 8001730:	428a      	cmp	r2, r1
 8001732:	4189      	sbcs	r1, r1
 8001734:	4249      	negs	r1, r1
 8001736:	448b      	add	fp, r1
 8001738:	e666      	b.n	8001408 <__aeabi_ddiv+0x288>
 800173a:	210f      	movs	r1, #15
 800173c:	4011      	ands	r1, r2
 800173e:	2904      	cmp	r1, #4
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x5c4>
 8001742:	e661      	b.n	8001408 <__aeabi_ddiv+0x288>
 8001744:	0011      	movs	r1, r2
 8001746:	e7f2      	b.n	800172e <__aeabi_ddiv+0x5ae>
 8001748:	42bc      	cmp	r4, r7
 800174a:	d800      	bhi.n	800174e <__aeabi_ddiv+0x5ce>
 800174c:	e60a      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 800174e:	2302      	movs	r3, #2
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	9900      	ldr	r1, [sp, #0]
 8001756:	444f      	add	r7, r9
 8001758:	454f      	cmp	r7, r9
 800175a:	419b      	sbcs	r3, r3
 800175c:	44e3      	add	fp, ip
 800175e:	468c      	mov	ip, r1
 8001760:	425b      	negs	r3, r3
 8001762:	4463      	add	r3, ip
 8001764:	18c0      	adds	r0, r0, r3
 8001766:	e5ff      	b.n	8001368 <__aeabi_ddiv+0x1e8>
 8001768:	4649      	mov	r1, r9
 800176a:	9d00      	ldr	r5, [sp, #0]
 800176c:	0048      	lsls	r0, r1, #1
 800176e:	4548      	cmp	r0, r9
 8001770:	4189      	sbcs	r1, r1
 8001772:	46ac      	mov	ip, r5
 8001774:	4249      	negs	r1, r1
 8001776:	4461      	add	r1, ip
 8001778:	4681      	mov	r9, r0
 800177a:	3a02      	subs	r2, #2
 800177c:	1864      	adds	r4, r4, r1
 800177e:	e7c7      	b.n	8001710 <__aeabi_ddiv+0x590>
 8001780:	2480      	movs	r4, #128	@ 0x80
 8001782:	465b      	mov	r3, fp
 8001784:	0324      	lsls	r4, r4, #12
 8001786:	431c      	orrs	r4, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4690      	mov	r8, r2
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__aeabi_ddiv+0x620>)
 800178e:	0b24      	lsrs	r4, r4, #12
 8001790:	e556      	b.n	8001240 <__aeabi_ddiv+0xc0>
 8001792:	4599      	cmp	r9, r3
 8001794:	d3e8      	bcc.n	8001768 <__aeabi_ddiv+0x5e8>
 8001796:	000a      	movs	r2, r1
 8001798:	e7bd      	b.n	8001716 <__aeabi_ddiv+0x596>
 800179a:	2300      	movs	r3, #0
 800179c:	e708      	b.n	80015b0 <__aeabi_ddiv+0x430>
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	0000043e 	.word	0x0000043e
 80017a8:	0000041e 	.word	0x0000041e
 80017ac:	000003ff 	.word	0x000003ff
 80017b0:	fffffc02 	.word	0xfffffc02

080017b4 <__eqdf2>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	4657      	mov	r7, sl
 80017b8:	46de      	mov	lr, fp
 80017ba:	464e      	mov	r6, r9
 80017bc:	4645      	mov	r5, r8
 80017be:	b5e0      	push	{r5, r6, r7, lr}
 80017c0:	000d      	movs	r5, r1
 80017c2:	0004      	movs	r4, r0
 80017c4:	0fe8      	lsrs	r0, r5, #31
 80017c6:	4683      	mov	fp, r0
 80017c8:	0309      	lsls	r1, r1, #12
 80017ca:	0fd8      	lsrs	r0, r3, #31
 80017cc:	0b09      	lsrs	r1, r1, #12
 80017ce:	4682      	mov	sl, r0
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <__eqdf2+0x84>)
 80017d2:	468c      	mov	ip, r1
 80017d4:	031f      	lsls	r7, r3, #12
 80017d6:	0069      	lsls	r1, r5, #1
 80017d8:	005e      	lsls	r6, r3, #1
 80017da:	0d49      	lsrs	r1, r1, #21
 80017dc:	0b3f      	lsrs	r7, r7, #12
 80017de:	0d76      	lsrs	r6, r6, #21
 80017e0:	4281      	cmp	r1, r0
 80017e2:	d018      	beq.n	8001816 <__eqdf2+0x62>
 80017e4:	4286      	cmp	r6, r0
 80017e6:	d00f      	beq.n	8001808 <__eqdf2+0x54>
 80017e8:	2001      	movs	r0, #1
 80017ea:	42b1      	cmp	r1, r6
 80017ec:	d10d      	bne.n	800180a <__eqdf2+0x56>
 80017ee:	45bc      	cmp	ip, r7
 80017f0:	d10b      	bne.n	800180a <__eqdf2+0x56>
 80017f2:	4294      	cmp	r4, r2
 80017f4:	d109      	bne.n	800180a <__eqdf2+0x56>
 80017f6:	45d3      	cmp	fp, sl
 80017f8:	d01c      	beq.n	8001834 <__eqdf2+0x80>
 80017fa:	2900      	cmp	r1, #0
 80017fc:	d105      	bne.n	800180a <__eqdf2+0x56>
 80017fe:	4660      	mov	r0, ip
 8001800:	4320      	orrs	r0, r4
 8001802:	1e43      	subs	r3, r0, #1
 8001804:	4198      	sbcs	r0, r3
 8001806:	e000      	b.n	800180a <__eqdf2+0x56>
 8001808:	2001      	movs	r0, #1
 800180a:	bcf0      	pop	{r4, r5, r6, r7}
 800180c:	46bb      	mov	fp, r7
 800180e:	46b2      	mov	sl, r6
 8001810:	46a9      	mov	r9, r5
 8001812:	46a0      	mov	r8, r4
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	2001      	movs	r0, #1
 8001818:	428e      	cmp	r6, r1
 800181a:	d1f6      	bne.n	800180a <__eqdf2+0x56>
 800181c:	4661      	mov	r1, ip
 800181e:	4339      	orrs	r1, r7
 8001820:	000f      	movs	r7, r1
 8001822:	4317      	orrs	r7, r2
 8001824:	4327      	orrs	r7, r4
 8001826:	d1f0      	bne.n	800180a <__eqdf2+0x56>
 8001828:	465b      	mov	r3, fp
 800182a:	4652      	mov	r2, sl
 800182c:	1a98      	subs	r0, r3, r2
 800182e:	1e43      	subs	r3, r0, #1
 8001830:	4198      	sbcs	r0, r3
 8001832:	e7ea      	b.n	800180a <__eqdf2+0x56>
 8001834:	2000      	movs	r0, #0
 8001836:	e7e8      	b.n	800180a <__eqdf2+0x56>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__gedf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	000d      	movs	r5, r1
 800184a:	030f      	lsls	r7, r1, #12
 800184c:	0b39      	lsrs	r1, r7, #12
 800184e:	b083      	sub	sp, #12
 8001850:	0004      	movs	r4, r0
 8001852:	4680      	mov	r8, r0
 8001854:	9101      	str	r1, [sp, #4]
 8001856:	0058      	lsls	r0, r3, #1
 8001858:	0fe9      	lsrs	r1, r5, #31
 800185a:	4f31      	ldr	r7, [pc, #196]	@ (8001920 <__gedf2+0xe4>)
 800185c:	0d40      	lsrs	r0, r0, #21
 800185e:	468c      	mov	ip, r1
 8001860:	006e      	lsls	r6, r5, #1
 8001862:	0319      	lsls	r1, r3, #12
 8001864:	4682      	mov	sl, r0
 8001866:	4691      	mov	r9, r2
 8001868:	0d76      	lsrs	r6, r6, #21
 800186a:	0b09      	lsrs	r1, r1, #12
 800186c:	0fd8      	lsrs	r0, r3, #31
 800186e:	42be      	cmp	r6, r7
 8001870:	d01f      	beq.n	80018b2 <__gedf2+0x76>
 8001872:	45ba      	cmp	sl, r7
 8001874:	d00f      	beq.n	8001896 <__gedf2+0x5a>
 8001876:	2e00      	cmp	r6, #0
 8001878:	d12f      	bne.n	80018da <__gedf2+0x9e>
 800187a:	4655      	mov	r5, sl
 800187c:	9e01      	ldr	r6, [sp, #4]
 800187e:	4334      	orrs	r4, r6
 8001880:	2d00      	cmp	r5, #0
 8001882:	d127      	bne.n	80018d4 <__gedf2+0x98>
 8001884:	430a      	orrs	r2, r1
 8001886:	d03a      	beq.n	80018fe <__gedf2+0xc2>
 8001888:	2c00      	cmp	r4, #0
 800188a:	d145      	bne.n	8001918 <__gedf2+0xdc>
 800188c:	2800      	cmp	r0, #0
 800188e:	d11a      	bne.n	80018c6 <__gedf2+0x8a>
 8001890:	2001      	movs	r0, #1
 8001892:	4240      	negs	r0, r0
 8001894:	e017      	b.n	80018c6 <__gedf2+0x8a>
 8001896:	4311      	orrs	r1, r2
 8001898:	d13b      	bne.n	8001912 <__gedf2+0xd6>
 800189a:	2e00      	cmp	r6, #0
 800189c:	d102      	bne.n	80018a4 <__gedf2+0x68>
 800189e:	9f01      	ldr	r7, [sp, #4]
 80018a0:	4327      	orrs	r7, r4
 80018a2:	d0f3      	beq.n	800188c <__gedf2+0x50>
 80018a4:	4584      	cmp	ip, r0
 80018a6:	d109      	bne.n	80018bc <__gedf2+0x80>
 80018a8:	4663      	mov	r3, ip
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <__gedf2+0x54>
 80018ae:	4660      	mov	r0, ip
 80018b0:	e009      	b.n	80018c6 <__gedf2+0x8a>
 80018b2:	9f01      	ldr	r7, [sp, #4]
 80018b4:	4327      	orrs	r7, r4
 80018b6:	d12c      	bne.n	8001912 <__gedf2+0xd6>
 80018b8:	45b2      	cmp	sl, r6
 80018ba:	d024      	beq.n	8001906 <__gedf2+0xca>
 80018bc:	4663      	mov	r3, ip
 80018be:	2002      	movs	r0, #2
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4018      	ands	r0, r3
 80018c4:	3801      	subs	r0, #1
 80018c6:	b003      	add	sp, #12
 80018c8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ca:	46bb      	mov	fp, r7
 80018cc:	46b2      	mov	sl, r6
 80018ce:	46a9      	mov	r9, r5
 80018d0:	46a0      	mov	r8, r4
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d0d9      	beq.n	800188c <__gedf2+0x50>
 80018d8:	e7e4      	b.n	80018a4 <__gedf2+0x68>
 80018da:	4654      	mov	r4, sl
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d0ed      	beq.n	80018bc <__gedf2+0x80>
 80018e0:	4584      	cmp	ip, r0
 80018e2:	d1eb      	bne.n	80018bc <__gedf2+0x80>
 80018e4:	4556      	cmp	r6, sl
 80018e6:	dce9      	bgt.n	80018bc <__gedf2+0x80>
 80018e8:	dbde      	blt.n	80018a8 <__gedf2+0x6c>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d8e5      	bhi.n	80018bc <__gedf2+0x80>
 80018f0:	d1da      	bne.n	80018a8 <__gedf2+0x6c>
 80018f2:	45c8      	cmp	r8, r9
 80018f4:	d8e2      	bhi.n	80018bc <__gedf2+0x80>
 80018f6:	2000      	movs	r0, #0
 80018f8:	45c8      	cmp	r8, r9
 80018fa:	d2e4      	bcs.n	80018c6 <__gedf2+0x8a>
 80018fc:	e7d4      	b.n	80018a8 <__gedf2+0x6c>
 80018fe:	2000      	movs	r0, #0
 8001900:	2c00      	cmp	r4, #0
 8001902:	d0e0      	beq.n	80018c6 <__gedf2+0x8a>
 8001904:	e7da      	b.n	80018bc <__gedf2+0x80>
 8001906:	4311      	orrs	r1, r2
 8001908:	d103      	bne.n	8001912 <__gedf2+0xd6>
 800190a:	4584      	cmp	ip, r0
 800190c:	d1d6      	bne.n	80018bc <__gedf2+0x80>
 800190e:	2000      	movs	r0, #0
 8001910:	e7d9      	b.n	80018c6 <__gedf2+0x8a>
 8001912:	2002      	movs	r0, #2
 8001914:	4240      	negs	r0, r0
 8001916:	e7d6      	b.n	80018c6 <__gedf2+0x8a>
 8001918:	4584      	cmp	ip, r0
 800191a:	d0e6      	beq.n	80018ea <__gedf2+0xae>
 800191c:	e7ce      	b.n	80018bc <__gedf2+0x80>
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	000007ff 	.word	0x000007ff

08001924 <__ledf2>:
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	464e      	mov	r6, r9
 800192a:	4645      	mov	r5, r8
 800192c:	46de      	mov	lr, fp
 800192e:	b5e0      	push	{r5, r6, r7, lr}
 8001930:	000d      	movs	r5, r1
 8001932:	030f      	lsls	r7, r1, #12
 8001934:	0004      	movs	r4, r0
 8001936:	4680      	mov	r8, r0
 8001938:	0fe8      	lsrs	r0, r5, #31
 800193a:	0b39      	lsrs	r1, r7, #12
 800193c:	4684      	mov	ip, r0
 800193e:	b083      	sub	sp, #12
 8001940:	0058      	lsls	r0, r3, #1
 8001942:	4f30      	ldr	r7, [pc, #192]	@ (8001a04 <__ledf2+0xe0>)
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	9101      	str	r1, [sp, #4]
 8001948:	031e      	lsls	r6, r3, #12
 800194a:	0069      	lsls	r1, r5, #1
 800194c:	4682      	mov	sl, r0
 800194e:	4691      	mov	r9, r2
 8001950:	0d49      	lsrs	r1, r1, #21
 8001952:	0b36      	lsrs	r6, r6, #12
 8001954:	0fd8      	lsrs	r0, r3, #31
 8001956:	42b9      	cmp	r1, r7
 8001958:	d020      	beq.n	800199c <__ledf2+0x78>
 800195a:	45ba      	cmp	sl, r7
 800195c:	d00f      	beq.n	800197e <__ledf2+0x5a>
 800195e:	2900      	cmp	r1, #0
 8001960:	d12b      	bne.n	80019ba <__ledf2+0x96>
 8001962:	9901      	ldr	r1, [sp, #4]
 8001964:	430c      	orrs	r4, r1
 8001966:	4651      	mov	r1, sl
 8001968:	2900      	cmp	r1, #0
 800196a:	d137      	bne.n	80019dc <__ledf2+0xb8>
 800196c:	4332      	orrs	r2, r6
 800196e:	d038      	beq.n	80019e2 <__ledf2+0xbe>
 8001970:	2c00      	cmp	r4, #0
 8001972:	d144      	bne.n	80019fe <__ledf2+0xda>
 8001974:	2800      	cmp	r0, #0
 8001976:	d119      	bne.n	80019ac <__ledf2+0x88>
 8001978:	2001      	movs	r0, #1
 800197a:	4240      	negs	r0, r0
 800197c:	e016      	b.n	80019ac <__ledf2+0x88>
 800197e:	4316      	orrs	r6, r2
 8001980:	d113      	bne.n	80019aa <__ledf2+0x86>
 8001982:	2900      	cmp	r1, #0
 8001984:	d102      	bne.n	800198c <__ledf2+0x68>
 8001986:	9f01      	ldr	r7, [sp, #4]
 8001988:	4327      	orrs	r7, r4
 800198a:	d0f3      	beq.n	8001974 <__ledf2+0x50>
 800198c:	4584      	cmp	ip, r0
 800198e:	d020      	beq.n	80019d2 <__ledf2+0xae>
 8001990:	4663      	mov	r3, ip
 8001992:	2002      	movs	r0, #2
 8001994:	3b01      	subs	r3, #1
 8001996:	4018      	ands	r0, r3
 8001998:	3801      	subs	r0, #1
 800199a:	e007      	b.n	80019ac <__ledf2+0x88>
 800199c:	9f01      	ldr	r7, [sp, #4]
 800199e:	4327      	orrs	r7, r4
 80019a0:	d103      	bne.n	80019aa <__ledf2+0x86>
 80019a2:	458a      	cmp	sl, r1
 80019a4:	d1f4      	bne.n	8001990 <__ledf2+0x6c>
 80019a6:	4316      	orrs	r6, r2
 80019a8:	d01f      	beq.n	80019ea <__ledf2+0xc6>
 80019aa:	2002      	movs	r0, #2
 80019ac:	b003      	add	sp, #12
 80019ae:	bcf0      	pop	{r4, r5, r6, r7}
 80019b0:	46bb      	mov	fp, r7
 80019b2:	46b2      	mov	sl, r6
 80019b4:	46a9      	mov	r9, r5
 80019b6:	46a0      	mov	r8, r4
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	4654      	mov	r4, sl
 80019bc:	2c00      	cmp	r4, #0
 80019be:	d0e7      	beq.n	8001990 <__ledf2+0x6c>
 80019c0:	4584      	cmp	ip, r0
 80019c2:	d1e5      	bne.n	8001990 <__ledf2+0x6c>
 80019c4:	4551      	cmp	r1, sl
 80019c6:	dce3      	bgt.n	8001990 <__ledf2+0x6c>
 80019c8:	db03      	blt.n	80019d2 <__ledf2+0xae>
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	42b3      	cmp	r3, r6
 80019ce:	d8df      	bhi.n	8001990 <__ledf2+0x6c>
 80019d0:	d00f      	beq.n	80019f2 <__ledf2+0xce>
 80019d2:	4663      	mov	r3, ip
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0cf      	beq.n	8001978 <__ledf2+0x54>
 80019d8:	4660      	mov	r0, ip
 80019da:	e7e7      	b.n	80019ac <__ledf2+0x88>
 80019dc:	2c00      	cmp	r4, #0
 80019de:	d0c9      	beq.n	8001974 <__ledf2+0x50>
 80019e0:	e7d4      	b.n	800198c <__ledf2+0x68>
 80019e2:	2000      	movs	r0, #0
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d0e1      	beq.n	80019ac <__ledf2+0x88>
 80019e8:	e7d2      	b.n	8001990 <__ledf2+0x6c>
 80019ea:	4584      	cmp	ip, r0
 80019ec:	d1d0      	bne.n	8001990 <__ledf2+0x6c>
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7dc      	b.n	80019ac <__ledf2+0x88>
 80019f2:	45c8      	cmp	r8, r9
 80019f4:	d8cc      	bhi.n	8001990 <__ledf2+0x6c>
 80019f6:	2000      	movs	r0, #0
 80019f8:	45c8      	cmp	r8, r9
 80019fa:	d2d7      	bcs.n	80019ac <__ledf2+0x88>
 80019fc:	e7e9      	b.n	80019d2 <__ledf2+0xae>
 80019fe:	4584      	cmp	ip, r0
 8001a00:	d0e3      	beq.n	80019ca <__ledf2+0xa6>
 8001a02:	e7c5      	b.n	8001990 <__ledf2+0x6c>
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__aeabi_dmul>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	46de      	mov	lr, fp
 8001a0e:	464e      	mov	r6, r9
 8001a10:	4645      	mov	r5, r8
 8001a12:	b5e0      	push	{r5, r6, r7, lr}
 8001a14:	001f      	movs	r7, r3
 8001a16:	030b      	lsls	r3, r1, #12
 8001a18:	0b1b      	lsrs	r3, r3, #12
 8001a1a:	0016      	movs	r6, r2
 8001a1c:	469a      	mov	sl, r3
 8001a1e:	0fca      	lsrs	r2, r1, #31
 8001a20:	004b      	lsls	r3, r1, #1
 8001a22:	0004      	movs	r4, r0
 8001a24:	4693      	mov	fp, r2
 8001a26:	b087      	sub	sp, #28
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dmul+0x26>
 8001a2c:	e0d5      	b.n	8001bda <__aeabi_dmul+0x1d2>
 8001a2e:	4abb      	ldr	r2, [pc, #748]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dmul+0x2e>
 8001a34:	e0f8      	b.n	8001c28 <__aeabi_dmul+0x220>
 8001a36:	4651      	mov	r1, sl
 8001a38:	0f42      	lsrs	r2, r0, #29
 8001a3a:	00c9      	lsls	r1, r1, #3
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	0409      	lsls	r1, r1, #16
 8001a42:	4311      	orrs	r1, r2
 8001a44:	00c2      	lsls	r2, r0, #3
 8001a46:	4691      	mov	r9, r2
 8001a48:	4ab5      	ldr	r2, [pc, #724]	@ (8001d20 <__aeabi_dmul+0x318>)
 8001a4a:	468a      	mov	sl, r1
 8001a4c:	189d      	adds	r5, r3, r2
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4698      	mov	r8, r3
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	033c      	lsls	r4, r7, #12
 8001a56:	007b      	lsls	r3, r7, #1
 8001a58:	0ffa      	lsrs	r2, r7, #31
 8001a5a:	0030      	movs	r0, r6
 8001a5c:	0b24      	lsrs	r4, r4, #12
 8001a5e:	0d5b      	lsrs	r3, r3, #21
 8001a60:	9200      	str	r2, [sp, #0]
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dmul+0x5e>
 8001a64:	e096      	b.n	8001b94 <__aeabi_dmul+0x18c>
 8001a66:	4aad      	ldr	r2, [pc, #692]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d031      	beq.n	8001ad0 <__aeabi_dmul+0xc8>
 8001a6c:	0f72      	lsrs	r2, r6, #29
 8001a6e:	00e4      	lsls	r4, r4, #3
 8001a70:	4322      	orrs	r2, r4
 8001a72:	2480      	movs	r4, #128	@ 0x80
 8001a74:	0424      	lsls	r4, r4, #16
 8001a76:	4314      	orrs	r4, r2
 8001a78:	4aa9      	ldr	r2, [pc, #676]	@ (8001d20 <__aeabi_dmul+0x318>)
 8001a7a:	00f0      	lsls	r0, r6, #3
 8001a7c:	4694      	mov	ip, r2
 8001a7e:	4463      	add	r3, ip
 8001a80:	195b      	adds	r3, r3, r5
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	9201      	str	r2, [sp, #4]
 8001a86:	4642      	mov	r2, r8
 8001a88:	2600      	movs	r6, #0
 8001a8a:	2a0a      	cmp	r2, #10
 8001a8c:	dc42      	bgt.n	8001b14 <__aeabi_dmul+0x10c>
 8001a8e:	465a      	mov	r2, fp
 8001a90:	9900      	ldr	r1, [sp, #0]
 8001a92:	404a      	eors	r2, r1
 8001a94:	4693      	mov	fp, r2
 8001a96:	4642      	mov	r2, r8
 8001a98:	2a02      	cmp	r2, #2
 8001a9a:	dc32      	bgt.n	8001b02 <__aeabi_dmul+0xfa>
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d900      	bls.n	8001aa4 <__aeabi_dmul+0x9c>
 8001aa2:	e149      	b.n	8001d38 <__aeabi_dmul+0x330>
 8001aa4:	2e02      	cmp	r6, #2
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dmul+0xa2>
 8001aa8:	e0ca      	b.n	8001c40 <__aeabi_dmul+0x238>
 8001aaa:	2e01      	cmp	r6, #1
 8001aac:	d13d      	bne.n	8001b2a <__aeabi_dmul+0x122>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	465a      	mov	r2, fp
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	4323      	orrs	r3, r4
 8001abc:	07d2      	lsls	r2, r2, #31
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	b007      	add	sp, #28
 8001ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac6:	46bb      	mov	fp, r7
 8001ac8:	46b2      	mov	sl, r6
 8001aca:	46a9      	mov	r9, r5
 8001acc:	46a0      	mov	r8, r4
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	4b92      	ldr	r3, [pc, #584]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001ad2:	4326      	orrs	r6, r4
 8001ad4:	18eb      	adds	r3, r5, r3
 8001ad6:	2e00      	cmp	r6, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0xd4>
 8001ada:	e0bb      	b.n	8001c54 <__aeabi_dmul+0x24c>
 8001adc:	2203      	movs	r2, #3
 8001ade:	4641      	mov	r1, r8
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	465a      	mov	r2, fp
 8001ae4:	4688      	mov	r8, r1
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	404a      	eors	r2, r1
 8001aea:	2180      	movs	r1, #128	@ 0x80
 8001aec:	0109      	lsls	r1, r1, #4
 8001aee:	468c      	mov	ip, r1
 8001af0:	0029      	movs	r1, r5
 8001af2:	4461      	add	r1, ip
 8001af4:	9101      	str	r1, [sp, #4]
 8001af6:	4641      	mov	r1, r8
 8001af8:	290a      	cmp	r1, #10
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dmul+0xf6>
 8001afc:	e233      	b.n	8001f66 <__aeabi_dmul+0x55e>
 8001afe:	4693      	mov	fp, r2
 8001b00:	2603      	movs	r6, #3
 8001b02:	4642      	mov	r2, r8
 8001b04:	2701      	movs	r7, #1
 8001b06:	4097      	lsls	r7, r2
 8001b08:	21a6      	movs	r1, #166	@ 0xa6
 8001b0a:	003a      	movs	r2, r7
 8001b0c:	00c9      	lsls	r1, r1, #3
 8001b0e:	400a      	ands	r2, r1
 8001b10:	420f      	tst	r7, r1
 8001b12:	d031      	beq.n	8001b78 <__aeabi_dmul+0x170>
 8001b14:	9e02      	ldr	r6, [sp, #8]
 8001b16:	2e02      	cmp	r6, #2
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dmul+0x114>
 8001b1a:	e235      	b.n	8001f88 <__aeabi_dmul+0x580>
 8001b1c:	2e03      	cmp	r6, #3
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x11a>
 8001b20:	e1d2      	b.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001b22:	4654      	mov	r4, sl
 8001b24:	4648      	mov	r0, r9
 8001b26:	2e01      	cmp	r6, #1
 8001b28:	d0c1      	beq.n	8001aae <__aeabi_dmul+0xa6>
 8001b2a:	9a01      	ldr	r2, [sp, #4]
 8001b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d24 <__aeabi_dmul+0x31c>)
 8001b2e:	4694      	mov	ip, r2
 8001b30:	4463      	add	r3, ip
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dc00      	bgt.n	8001b38 <__aeabi_dmul+0x130>
 8001b36:	e0c0      	b.n	8001cba <__aeabi_dmul+0x2b2>
 8001b38:	0742      	lsls	r2, r0, #29
 8001b3a:	d009      	beq.n	8001b50 <__aeabi_dmul+0x148>
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4002      	ands	r2, r0
 8001b40:	2a04      	cmp	r2, #4
 8001b42:	d005      	beq.n	8001b50 <__aeabi_dmul+0x148>
 8001b44:	1d02      	adds	r2, r0, #4
 8001b46:	4282      	cmp	r2, r0
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	4240      	negs	r0, r0
 8001b4c:	1824      	adds	r4, r4, r0
 8001b4e:	0010      	movs	r0, r2
 8001b50:	01e2      	lsls	r2, r4, #7
 8001b52:	d506      	bpl.n	8001b62 <__aeabi_dmul+0x15a>
 8001b54:	4b74      	ldr	r3, [pc, #464]	@ (8001d28 <__aeabi_dmul+0x320>)
 8001b56:	9a01      	ldr	r2, [sp, #4]
 8001b58:	401c      	ands	r4, r3
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	4694      	mov	ip, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4463      	add	r3, ip
 8001b62:	4a72      	ldr	r2, [pc, #456]	@ (8001d2c <__aeabi_dmul+0x324>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	dc6b      	bgt.n	8001c40 <__aeabi_dmul+0x238>
 8001b68:	0762      	lsls	r2, r4, #29
 8001b6a:	08c0      	lsrs	r0, r0, #3
 8001b6c:	0264      	lsls	r4, r4, #9
 8001b6e:	055b      	lsls	r3, r3, #21
 8001b70:	4302      	orrs	r2, r0
 8001b72:	0b24      	lsrs	r4, r4, #12
 8001b74:	0d5b      	lsrs	r3, r3, #21
 8001b76:	e79d      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001b78:	2190      	movs	r1, #144	@ 0x90
 8001b7a:	0089      	lsls	r1, r1, #2
 8001b7c:	420f      	tst	r7, r1
 8001b7e:	d163      	bne.n	8001c48 <__aeabi_dmul+0x240>
 8001b80:	2288      	movs	r2, #136	@ 0x88
 8001b82:	423a      	tst	r2, r7
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dmul+0x180>
 8001b86:	e0d7      	b.n	8001d38 <__aeabi_dmul+0x330>
 8001b88:	9b00      	ldr	r3, [sp, #0]
 8001b8a:	46a2      	mov	sl, r4
 8001b8c:	469b      	mov	fp, r3
 8001b8e:	4681      	mov	r9, r0
 8001b90:	9602      	str	r6, [sp, #8]
 8001b92:	e7bf      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001b94:	0023      	movs	r3, r4
 8001b96:	4333      	orrs	r3, r6
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dmul+0x194>
 8001b9a:	e07f      	b.n	8001c9c <__aeabi_dmul+0x294>
 8001b9c:	2c00      	cmp	r4, #0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dmul+0x19a>
 8001ba0:	e1ad      	b.n	8001efe <__aeabi_dmul+0x4f6>
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	f000 ff10 	bl	80029c8 <__clzsi2>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	0003      	movs	r3, r0
 8001bac:	3a0b      	subs	r2, #11
 8001bae:	201d      	movs	r0, #29
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	1a82      	subs	r2, r0, r2
 8001bb4:	0030      	movs	r0, r6
 8001bb6:	3908      	subs	r1, #8
 8001bb8:	40d0      	lsrs	r0, r2
 8001bba:	408c      	lsls	r4, r1
 8001bbc:	4304      	orrs	r4, r0
 8001bbe:	0030      	movs	r0, r6
 8001bc0:	4088      	lsls	r0, r1
 8001bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d30 <__aeabi_dmul+0x328>)
 8001bc4:	1aeb      	subs	r3, r5, r3
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	4463      	add	r3, ip
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	4642      	mov	r2, r8
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	2a0a      	cmp	r2, #10
 8001bd4:	dc00      	bgt.n	8001bd8 <__aeabi_dmul+0x1d0>
 8001bd6:	e75a      	b.n	8001a8e <__aeabi_dmul+0x86>
 8001bd8:	e79c      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001bda:	4653      	mov	r3, sl
 8001bdc:	4303      	orrs	r3, r0
 8001bde:	4699      	mov	r9, r3
 8001be0:	d054      	beq.n	8001c8c <__aeabi_dmul+0x284>
 8001be2:	4653      	mov	r3, sl
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dmul+0x1e2>
 8001be8:	e177      	b.n	8001eda <__aeabi_dmul+0x4d2>
 8001bea:	4650      	mov	r0, sl
 8001bec:	f000 feec 	bl	80029c8 <__clzsi2>
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	4484      	add	ip, r0
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	3908      	subs	r1, #8
 8001c00:	4088      	lsls	r0, r1
 8001c02:	231d      	movs	r3, #29
 8001c04:	4680      	mov	r8, r0
 8001c06:	4660      	mov	r0, ip
 8001c08:	1a1b      	subs	r3, r3, r0
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	40d8      	lsrs	r0, r3
 8001c0e:	0003      	movs	r3, r0
 8001c10:	4640      	mov	r0, r8
 8001c12:	4303      	orrs	r3, r0
 8001c14:	469a      	mov	sl, r3
 8001c16:	0023      	movs	r3, r4
 8001c18:	408b      	lsls	r3, r1
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4d44      	ldr	r5, [pc, #272]	@ (8001d30 <__aeabi_dmul+0x328>)
 8001c20:	4698      	mov	r8, r3
 8001c22:	1aad      	subs	r5, r5, r2
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	e715      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c28:	4652      	mov	r2, sl
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	4691      	mov	r9, r2
 8001c2e:	d126      	bne.n	8001c7e <__aeabi_dmul+0x276>
 8001c30:	2200      	movs	r2, #0
 8001c32:	001d      	movs	r5, r3
 8001c34:	2302      	movs	r3, #2
 8001c36:	4692      	mov	sl, r2
 8001c38:	3208      	adds	r2, #8
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	e709      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c40:	2400      	movs	r4, #0
 8001c42:	2200      	movs	r2, #0
 8001c44:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001c46:	e735      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2480      	movs	r4, #128	@ 0x80
 8001c4c:	469b      	mov	fp, r3
 8001c4e:	0324      	lsls	r4, r4, #12
 8001c50:	4b32      	ldr	r3, [pc, #200]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001c52:	e72f      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001c54:	2202      	movs	r2, #2
 8001c56:	4641      	mov	r1, r8
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	4694      	mov	ip, r2
 8001c60:	002a      	movs	r2, r5
 8001c62:	4462      	add	r2, ip
 8001c64:	4688      	mov	r8, r1
 8001c66:	9201      	str	r2, [sp, #4]
 8001c68:	290a      	cmp	r1, #10
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dmul+0x266>
 8001c6c:	e752      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001c6e:	465a      	mov	r2, fp
 8001c70:	2000      	movs	r0, #0
 8001c72:	9900      	ldr	r1, [sp, #0]
 8001c74:	0004      	movs	r4, r0
 8001c76:	404a      	eors	r2, r1
 8001c78:	4693      	mov	fp, r2
 8001c7a:	2602      	movs	r6, #2
 8001c7c:	e70b      	b.n	8001a96 <__aeabi_dmul+0x8e>
 8001c7e:	220c      	movs	r2, #12
 8001c80:	001d      	movs	r5, r3
 8001c82:	2303      	movs	r3, #3
 8001c84:	4681      	mov	r9, r0
 8001c86:	4690      	mov	r8, r2
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	e6e3      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	469a      	mov	sl, r3
 8001c90:	3304      	adds	r3, #4
 8001c92:	4698      	mov	r8, r3
 8001c94:	3b03      	subs	r3, #3
 8001c96:	2500      	movs	r5, #0
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	e6db      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	002b      	movs	r3, r5
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	4642      	mov	r2, r8
 8001cac:	2400      	movs	r4, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	2a0a      	cmp	r2, #10
 8001cb4:	dc00      	bgt.n	8001cb8 <__aeabi_dmul+0x2b0>
 8001cb6:	e6ea      	b.n	8001a8e <__aeabi_dmul+0x86>
 8001cb8:	e72c      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	2a38      	cmp	r2, #56	@ 0x38
 8001cc0:	dd00      	ble.n	8001cc4 <__aeabi_dmul+0x2bc>
 8001cc2:	e6f4      	b.n	8001aae <__aeabi_dmul+0xa6>
 8001cc4:	2a1f      	cmp	r2, #31
 8001cc6:	dc00      	bgt.n	8001cca <__aeabi_dmul+0x2c2>
 8001cc8:	e12a      	b.n	8001f20 <__aeabi_dmul+0x518>
 8001cca:	211f      	movs	r1, #31
 8001ccc:	4249      	negs	r1, r1
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	0021      	movs	r1, r4
 8001cd2:	40d9      	lsrs	r1, r3
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	2a20      	cmp	r2, #32
 8001cd8:	d005      	beq.n	8001ce6 <__aeabi_dmul+0x2de>
 8001cda:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <__aeabi_dmul+0x32c>)
 8001cdc:	9d01      	ldr	r5, [sp, #4]
 8001cde:	4694      	mov	ip, r2
 8001ce0:	4465      	add	r5, ip
 8001ce2:	40ac      	lsls	r4, r5
 8001ce4:	4320      	orrs	r0, r4
 8001ce6:	1e42      	subs	r2, r0, #1
 8001ce8:	4190      	sbcs	r0, r2
 8001cea:	4318      	orrs	r0, r3
 8001cec:	2307      	movs	r3, #7
 8001cee:	0019      	movs	r1, r3
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	4001      	ands	r1, r0
 8001cf4:	4203      	tst	r3, r0
 8001cf6:	d00c      	beq.n	8001d12 <__aeabi_dmul+0x30a>
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	4003      	ands	r3, r0
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dmul+0x2fa>
 8001d00:	e140      	b.n	8001f84 <__aeabi_dmul+0x57c>
 8001d02:	1d03      	adds	r3, r0, #4
 8001d04:	4283      	cmp	r3, r0
 8001d06:	41a4      	sbcs	r4, r4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	4264      	negs	r4, r4
 8001d0c:	0761      	lsls	r1, r4, #29
 8001d0e:	0264      	lsls	r4, r4, #9
 8001d10:	0b24      	lsrs	r4, r4, #12
 8001d12:	08c2      	lsrs	r2, r0, #3
 8001d14:	2300      	movs	r3, #0
 8001d16:	430a      	orrs	r2, r1
 8001d18:	e6cc      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	feffffff 	.word	0xfeffffff
 8001d2c:	000007fe 	.word	0x000007fe
 8001d30:	fffffc0d 	.word	0xfffffc0d
 8001d34:	0000043e 	.word	0x0000043e
 8001d38:	4649      	mov	r1, r9
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0409      	lsls	r1, r1, #16
 8001d3e:	0c09      	lsrs	r1, r1, #16
 8001d40:	000d      	movs	r5, r1
 8001d42:	0c16      	lsrs	r6, r2, #16
 8001d44:	0c02      	lsrs	r2, r0, #16
 8001d46:	0400      	lsls	r0, r0, #16
 8001d48:	0c00      	lsrs	r0, r0, #16
 8001d4a:	4345      	muls	r5, r0
 8001d4c:	46ac      	mov	ip, r5
 8001d4e:	0005      	movs	r5, r0
 8001d50:	4375      	muls	r5, r6
 8001d52:	46a8      	mov	r8, r5
 8001d54:	0015      	movs	r5, r2
 8001d56:	000f      	movs	r7, r1
 8001d58:	4375      	muls	r5, r6
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	9502      	str	r5, [sp, #8]
 8001d5e:	002a      	movs	r2, r5
 8001d60:	9d00      	ldr	r5, [sp, #0]
 8001d62:	436f      	muls	r7, r5
 8001d64:	4665      	mov	r5, ip
 8001d66:	0c2d      	lsrs	r5, r5, #16
 8001d68:	46a9      	mov	r9, r5
 8001d6a:	4447      	add	r7, r8
 8001d6c:	444f      	add	r7, r9
 8001d6e:	45b8      	cmp	r8, r7
 8001d70:	d905      	bls.n	8001d7e <__aeabi_dmul+0x376>
 8001d72:	0015      	movs	r5, r2
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	0252      	lsls	r2, r2, #9
 8001d78:	4690      	mov	r8, r2
 8001d7a:	4445      	add	r5, r8
 8001d7c:	9502      	str	r5, [sp, #8]
 8001d7e:	0c3d      	lsrs	r5, r7, #16
 8001d80:	9503      	str	r5, [sp, #12]
 8001d82:	4665      	mov	r5, ip
 8001d84:	042d      	lsls	r5, r5, #16
 8001d86:	043f      	lsls	r7, r7, #16
 8001d88:	0c2d      	lsrs	r5, r5, #16
 8001d8a:	46ac      	mov	ip, r5
 8001d8c:	003d      	movs	r5, r7
 8001d8e:	4465      	add	r5, ip
 8001d90:	9504      	str	r5, [sp, #16]
 8001d92:	0c25      	lsrs	r5, r4, #16
 8001d94:	0424      	lsls	r4, r4, #16
 8001d96:	0c24      	lsrs	r4, r4, #16
 8001d98:	46ac      	mov	ip, r5
 8001d9a:	0025      	movs	r5, r4
 8001d9c:	4375      	muls	r5, r6
 8001d9e:	46a8      	mov	r8, r5
 8001da0:	4665      	mov	r5, ip
 8001da2:	000f      	movs	r7, r1
 8001da4:	4369      	muls	r1, r5
 8001da6:	4441      	add	r1, r8
 8001da8:	4689      	mov	r9, r1
 8001daa:	4367      	muls	r7, r4
 8001dac:	0c39      	lsrs	r1, r7, #16
 8001dae:	4449      	add	r1, r9
 8001db0:	436e      	muls	r6, r5
 8001db2:	4588      	cmp	r8, r1
 8001db4:	d903      	bls.n	8001dbe <__aeabi_dmul+0x3b6>
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	0252      	lsls	r2, r2, #9
 8001dba:	4690      	mov	r8, r2
 8001dbc:	4446      	add	r6, r8
 8001dbe:	0c0d      	lsrs	r5, r1, #16
 8001dc0:	46a8      	mov	r8, r5
 8001dc2:	0035      	movs	r5, r6
 8001dc4:	4445      	add	r5, r8
 8001dc6:	9505      	str	r5, [sp, #20]
 8001dc8:	9d03      	ldr	r5, [sp, #12]
 8001dca:	043f      	lsls	r7, r7, #16
 8001dcc:	46a8      	mov	r8, r5
 8001dce:	0c3f      	lsrs	r7, r7, #16
 8001dd0:	0409      	lsls	r1, r1, #16
 8001dd2:	19c9      	adds	r1, r1, r7
 8001dd4:	4488      	add	r8, r1
 8001dd6:	4645      	mov	r5, r8
 8001dd8:	9503      	str	r5, [sp, #12]
 8001dda:	4655      	mov	r5, sl
 8001ddc:	042e      	lsls	r6, r5, #16
 8001dde:	0c36      	lsrs	r6, r6, #16
 8001de0:	0c2f      	lsrs	r7, r5, #16
 8001de2:	0035      	movs	r5, r6
 8001de4:	4345      	muls	r5, r0
 8001de6:	4378      	muls	r0, r7
 8001de8:	4681      	mov	r9, r0
 8001dea:	0038      	movs	r0, r7
 8001dec:	46a8      	mov	r8, r5
 8001dee:	0c2d      	lsrs	r5, r5, #16
 8001df0:	46aa      	mov	sl, r5
 8001df2:	9a00      	ldr	r2, [sp, #0]
 8001df4:	4350      	muls	r0, r2
 8001df6:	4372      	muls	r2, r6
 8001df8:	444a      	add	r2, r9
 8001dfa:	4452      	add	r2, sl
 8001dfc:	4591      	cmp	r9, r2
 8001dfe:	d903      	bls.n	8001e08 <__aeabi_dmul+0x400>
 8001e00:	2580      	movs	r5, #128	@ 0x80
 8001e02:	026d      	lsls	r5, r5, #9
 8001e04:	46a9      	mov	r9, r5
 8001e06:	4448      	add	r0, r9
 8001e08:	0c15      	lsrs	r5, r2, #16
 8001e0a:	46a9      	mov	r9, r5
 8001e0c:	4645      	mov	r5, r8
 8001e0e:	042d      	lsls	r5, r5, #16
 8001e10:	0c2d      	lsrs	r5, r5, #16
 8001e12:	46a8      	mov	r8, r5
 8001e14:	4665      	mov	r5, ip
 8001e16:	437d      	muls	r5, r7
 8001e18:	0412      	lsls	r2, r2, #16
 8001e1a:	4448      	add	r0, r9
 8001e1c:	4490      	add	r8, r2
 8001e1e:	46a9      	mov	r9, r5
 8001e20:	0032      	movs	r2, r6
 8001e22:	4665      	mov	r5, ip
 8001e24:	4362      	muls	r2, r4
 8001e26:	436e      	muls	r6, r5
 8001e28:	437c      	muls	r4, r7
 8001e2a:	0c17      	lsrs	r7, r2, #16
 8001e2c:	1936      	adds	r6, r6, r4
 8001e2e:	19bf      	adds	r7, r7, r6
 8001e30:	42bc      	cmp	r4, r7
 8001e32:	d903      	bls.n	8001e3c <__aeabi_dmul+0x434>
 8001e34:	2480      	movs	r4, #128	@ 0x80
 8001e36:	0264      	lsls	r4, r4, #9
 8001e38:	46a4      	mov	ip, r4
 8001e3a:	44e1      	add	r9, ip
 8001e3c:	9c02      	ldr	r4, [sp, #8]
 8001e3e:	9e03      	ldr	r6, [sp, #12]
 8001e40:	46a4      	mov	ip, r4
 8001e42:	9d05      	ldr	r5, [sp, #20]
 8001e44:	4466      	add	r6, ip
 8001e46:	428e      	cmp	r6, r1
 8001e48:	4189      	sbcs	r1, r1
 8001e4a:	46ac      	mov	ip, r5
 8001e4c:	0412      	lsls	r2, r2, #16
 8001e4e:	043c      	lsls	r4, r7, #16
 8001e50:	0c12      	lsrs	r2, r2, #16
 8001e52:	18a2      	adds	r2, r4, r2
 8001e54:	4462      	add	r2, ip
 8001e56:	4249      	negs	r1, r1
 8001e58:	1854      	adds	r4, r2, r1
 8001e5a:	4446      	add	r6, r8
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	4546      	cmp	r6, r8
 8001e60:	41a4      	sbcs	r4, r4
 8001e62:	4682      	mov	sl, r0
 8001e64:	4264      	negs	r4, r4
 8001e66:	46a0      	mov	r8, r4
 8001e68:	42aa      	cmp	r2, r5
 8001e6a:	4192      	sbcs	r2, r2
 8001e6c:	458c      	cmp	ip, r1
 8001e6e:	4189      	sbcs	r1, r1
 8001e70:	44e2      	add	sl, ip
 8001e72:	44d0      	add	r8, sl
 8001e74:	4249      	negs	r1, r1
 8001e76:	4252      	negs	r2, r2
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	45a0      	cmp	r8, r4
 8001e7c:	41a4      	sbcs	r4, r4
 8001e7e:	4582      	cmp	sl, r0
 8001e80:	4189      	sbcs	r1, r1
 8001e82:	4264      	negs	r4, r4
 8001e84:	4249      	negs	r1, r1
 8001e86:	430c      	orrs	r4, r1
 8001e88:	4641      	mov	r1, r8
 8001e8a:	0c3f      	lsrs	r7, r7, #16
 8001e8c:	19d2      	adds	r2, r2, r7
 8001e8e:	1912      	adds	r2, r2, r4
 8001e90:	0dcc      	lsrs	r4, r1, #23
 8001e92:	9904      	ldr	r1, [sp, #16]
 8001e94:	0270      	lsls	r0, r6, #9
 8001e96:	4308      	orrs	r0, r1
 8001e98:	1e41      	subs	r1, r0, #1
 8001e9a:	4188      	sbcs	r0, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	444a      	add	r2, r9
 8001ea0:	0df6      	lsrs	r6, r6, #23
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	4330      	orrs	r0, r6
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	4308      	orrs	r0, r1
 8001eac:	01d2      	lsls	r2, r2, #7
 8001eae:	d535      	bpl.n	8001f1c <__aeabi_dmul+0x514>
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	0843      	lsrs	r3, r0, #1
 8001eb4:	4002      	ands	r2, r0
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	07e0      	lsls	r0, r4, #31
 8001eba:	4318      	orrs	r0, r3
 8001ebc:	0864      	lsrs	r4, r4, #1
 8001ebe:	e634      	b.n	8001b2a <__aeabi_dmul+0x122>
 8001ec0:	9b00      	ldr	r3, [sp, #0]
 8001ec2:	46a2      	mov	sl, r4
 8001ec4:	469b      	mov	fp, r3
 8001ec6:	4681      	mov	r9, r0
 8001ec8:	2480      	movs	r4, #128	@ 0x80
 8001eca:	4653      	mov	r3, sl
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	431c      	orrs	r4, r3
 8001ed0:	0324      	lsls	r4, r4, #12
 8001ed2:	464a      	mov	r2, r9
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001ed6:	0b24      	lsrs	r4, r4, #12
 8001ed8:	e5ec      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001eda:	f000 fd75 	bl	80029c8 <__clzsi2>
 8001ede:	2315      	movs	r3, #21
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4484      	add	ip, r0
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	3220      	adds	r2, #32
 8001eea:	2b1c      	cmp	r3, #28
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_dmul+0x4e8>
 8001eee:	e684      	b.n	8001bfa <__aeabi_dmul+0x1f2>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	0023      	movs	r3, r4
 8001ef6:	3808      	subs	r0, #8
 8001ef8:	4083      	lsls	r3, r0
 8001efa:	469a      	mov	sl, r3
 8001efc:	e68e      	b.n	8001c1c <__aeabi_dmul+0x214>
 8001efe:	f000 fd63 	bl	80029c8 <__clzsi2>
 8001f02:	0002      	movs	r2, r0
 8001f04:	0003      	movs	r3, r0
 8001f06:	3215      	adds	r2, #21
 8001f08:	3320      	adds	r3, #32
 8001f0a:	2a1c      	cmp	r2, #28
 8001f0c:	dc00      	bgt.n	8001f10 <__aeabi_dmul+0x508>
 8001f0e:	e64e      	b.n	8001bae <__aeabi_dmul+0x1a6>
 8001f10:	0002      	movs	r2, r0
 8001f12:	0034      	movs	r4, r6
 8001f14:	3a08      	subs	r2, #8
 8001f16:	2000      	movs	r0, #0
 8001f18:	4094      	lsls	r4, r2
 8001f1a:	e652      	b.n	8001bc2 <__aeabi_dmul+0x1ba>
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	e604      	b.n	8001b2a <__aeabi_dmul+0x122>
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <__aeabi_dmul+0x58c>)
 8001f22:	0021      	movs	r1, r4
 8001f24:	469c      	mov	ip, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	9d01      	ldr	r5, [sp, #4]
 8001f2a:	40d3      	lsrs	r3, r2
 8001f2c:	4465      	add	r5, ip
 8001f2e:	40a9      	lsls	r1, r5
 8001f30:	4319      	orrs	r1, r3
 8001f32:	0003      	movs	r3, r0
 8001f34:	40ab      	lsls	r3, r5
 8001f36:	1e58      	subs	r0, r3, #1
 8001f38:	4183      	sbcs	r3, r0
 8001f3a:	4319      	orrs	r1, r3
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	40d4      	lsrs	r4, r2
 8001f40:	074b      	lsls	r3, r1, #29
 8001f42:	d009      	beq.n	8001f58 <__aeabi_dmul+0x550>
 8001f44:	230f      	movs	r3, #15
 8001f46:	400b      	ands	r3, r1
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <__aeabi_dmul+0x550>
 8001f4c:	1d0b      	adds	r3, r1, #4
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	4180      	sbcs	r0, r0
 8001f52:	4240      	negs	r0, r0
 8001f54:	1824      	adds	r4, r4, r0
 8001f56:	0018      	movs	r0, r3
 8001f58:	0223      	lsls	r3, r4, #8
 8001f5a:	d400      	bmi.n	8001f5e <__aeabi_dmul+0x556>
 8001f5c:	e6d6      	b.n	8001d0c <__aeabi_dmul+0x304>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2400      	movs	r4, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	e5a6      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f66:	290f      	cmp	r1, #15
 8001f68:	d1aa      	bne.n	8001ec0 <__aeabi_dmul+0x4b8>
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	4652      	mov	r2, sl
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	421a      	tst	r2, r3
 8001f72:	d0a9      	beq.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001f74:	421c      	tst	r4, r3
 8001f76:	d1a7      	bne.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001f78:	431c      	orrs	r4, r3
 8001f7a:	9b00      	ldr	r3, [sp, #0]
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	469b      	mov	fp, r3
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001f82:	e597      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f84:	2400      	movs	r4, #0
 8001f86:	e6c1      	b.n	8001d0c <__aeabi_dmul+0x304>
 8001f88:	2400      	movs	r4, #0
 8001f8a:	4b01      	ldr	r3, [pc, #4]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001f8c:	0022      	movs	r2, r4
 8001f8e:	e591      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f90:	000007ff 	.word	0x000007ff
 8001f94:	0000041e 	.word	0x0000041e

08001f98 <__aeabi_dsub>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464e      	mov	r6, r9
 8001f9c:	4645      	mov	r5, r8
 8001f9e:	46de      	mov	lr, fp
 8001fa0:	4657      	mov	r7, sl
 8001fa2:	b5e0      	push	{r5, r6, r7, lr}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	9000      	str	r0, [sp, #0]
 8001fa8:	9101      	str	r1, [sp, #4]
 8001faa:	030c      	lsls	r4, r1, #12
 8001fac:	004f      	lsls	r7, r1, #1
 8001fae:	0fce      	lsrs	r6, r1, #31
 8001fb0:	0a61      	lsrs	r1, r4, #9
 8001fb2:	9c00      	ldr	r4, [sp, #0]
 8001fb4:	46b0      	mov	r8, r6
 8001fb6:	0f64      	lsrs	r4, r4, #29
 8001fb8:	430c      	orrs	r4, r1
 8001fba:	9900      	ldr	r1, [sp, #0]
 8001fbc:	0d7f      	lsrs	r7, r7, #21
 8001fbe:	00c8      	lsls	r0, r1, #3
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	031b      	lsls	r3, r3, #12
 8001fc6:	469c      	mov	ip, r3
 8001fc8:	9100      	str	r1, [sp, #0]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	0051      	lsls	r1, r2, #1
 8001fce:	0d4b      	lsrs	r3, r1, #21
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	9d00      	ldr	r5, [sp, #0]
 8001fd6:	0fd9      	lsrs	r1, r3, #31
 8001fd8:	4663      	mov	r3, ip
 8001fda:	0f6a      	lsrs	r2, r5, #29
 8001fdc:	0a5b      	lsrs	r3, r3, #9
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	00ea      	lsls	r2, r5, #3
 8001fe2:	4694      	mov	ip, r2
 8001fe4:	4693      	mov	fp, r2
 8001fe6:	4ac1      	ldr	r2, [pc, #772]	@ (80022ec <__aeabi_dsub+0x354>)
 8001fe8:	9003      	str	r0, [sp, #12]
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	4591      	cmp	r9, r2
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x5a>
 8001ff0:	e0cd      	b.n	800218e <__aeabi_dsub+0x1f6>
 8001ff2:	2501      	movs	r5, #1
 8001ff4:	4069      	eors	r1, r5
 8001ff6:	464d      	mov	r5, r9
 8001ff8:	1b7d      	subs	r5, r7, r5
 8001ffa:	46aa      	mov	sl, r5
 8001ffc:	428e      	cmp	r6, r1
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x6a>
 8002000:	e080      	b.n	8002104 <__aeabi_dsub+0x16c>
 8002002:	2d00      	cmp	r5, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x70>
 8002006:	e335      	b.n	8002674 <__aeabi_dsub+0x6dc>
 8002008:	4649      	mov	r1, r9
 800200a:	2900      	cmp	r1, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x78>
 800200e:	e0df      	b.n	80021d0 <__aeabi_dsub+0x238>
 8002010:	4297      	cmp	r7, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x7e>
 8002014:	e194      	b.n	8002340 <__aeabi_dsub+0x3a8>
 8002016:	4652      	mov	r2, sl
 8002018:	2501      	movs	r5, #1
 800201a:	2a38      	cmp	r2, #56	@ 0x38
 800201c:	dc19      	bgt.n	8002052 <__aeabi_dsub+0xba>
 800201e:	2280      	movs	r2, #128	@ 0x80
 8002020:	9b02      	ldr	r3, [sp, #8]
 8002022:	0412      	lsls	r2, r2, #16
 8002024:	4313      	orrs	r3, r2
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	4652      	mov	r2, sl
 800202a:	2a1f      	cmp	r2, #31
 800202c:	dd00      	ble.n	8002030 <__aeabi_dsub+0x98>
 800202e:	e1e3      	b.n	80023f8 <__aeabi_dsub+0x460>
 8002030:	4653      	mov	r3, sl
 8002032:	2220      	movs	r2, #32
 8002034:	4661      	mov	r1, ip
 8002036:	9d02      	ldr	r5, [sp, #8]
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	4095      	lsls	r5, r2
 800203c:	40d9      	lsrs	r1, r3
 800203e:	430d      	orrs	r5, r1
 8002040:	4661      	mov	r1, ip
 8002042:	4091      	lsls	r1, r2
 8002044:	000a      	movs	r2, r1
 8002046:	1e51      	subs	r1, r2, #1
 8002048:	418a      	sbcs	r2, r1
 800204a:	4315      	orrs	r5, r2
 800204c:	9a02      	ldr	r2, [sp, #8]
 800204e:	40da      	lsrs	r2, r3
 8002050:	1aa4      	subs	r4, r4, r2
 8002052:	1b45      	subs	r5, r0, r5
 8002054:	42a8      	cmp	r0, r5
 8002056:	4180      	sbcs	r0, r0
 8002058:	4240      	negs	r0, r0
 800205a:	1a24      	subs	r4, r4, r0
 800205c:	0223      	lsls	r3, r4, #8
 800205e:	d400      	bmi.n	8002062 <__aeabi_dsub+0xca>
 8002060:	e13d      	b.n	80022de <__aeabi_dsub+0x346>
 8002062:	0264      	lsls	r4, r4, #9
 8002064:	0a64      	lsrs	r4, r4, #9
 8002066:	2c00      	cmp	r4, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0xd4>
 800206a:	e147      	b.n	80022fc <__aeabi_dsub+0x364>
 800206c:	0020      	movs	r0, r4
 800206e:	f000 fcab 	bl	80029c8 <__clzsi2>
 8002072:	0003      	movs	r3, r0
 8002074:	3b08      	subs	r3, #8
 8002076:	2120      	movs	r1, #32
 8002078:	0028      	movs	r0, r5
 800207a:	1aca      	subs	r2, r1, r3
 800207c:	40d0      	lsrs	r0, r2
 800207e:	409c      	lsls	r4, r3
 8002080:	0002      	movs	r2, r0
 8002082:	409d      	lsls	r5, r3
 8002084:	4322      	orrs	r2, r4
 8002086:	429f      	cmp	r7, r3
 8002088:	dd00      	ble.n	800208c <__aeabi_dsub+0xf4>
 800208a:	e177      	b.n	800237c <__aeabi_dsub+0x3e4>
 800208c:	1bd8      	subs	r0, r3, r7
 800208e:	3001      	adds	r0, #1
 8002090:	1a09      	subs	r1, r1, r0
 8002092:	002c      	movs	r4, r5
 8002094:	408d      	lsls	r5, r1
 8002096:	40c4      	lsrs	r4, r0
 8002098:	1e6b      	subs	r3, r5, #1
 800209a:	419d      	sbcs	r5, r3
 800209c:	0013      	movs	r3, r2
 800209e:	40c2      	lsrs	r2, r0
 80020a0:	408b      	lsls	r3, r1
 80020a2:	4325      	orrs	r5, r4
 80020a4:	2700      	movs	r7, #0
 80020a6:	0014      	movs	r4, r2
 80020a8:	431d      	orrs	r5, r3
 80020aa:	076b      	lsls	r3, r5, #29
 80020ac:	d009      	beq.n	80020c2 <__aeabi_dsub+0x12a>
 80020ae:	230f      	movs	r3, #15
 80020b0:	402b      	ands	r3, r5
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d005      	beq.n	80020c2 <__aeabi_dsub+0x12a>
 80020b6:	1d2b      	adds	r3, r5, #4
 80020b8:	42ab      	cmp	r3, r5
 80020ba:	41ad      	sbcs	r5, r5
 80020bc:	426d      	negs	r5, r5
 80020be:	1964      	adds	r4, r4, r5
 80020c0:	001d      	movs	r5, r3
 80020c2:	0223      	lsls	r3, r4, #8
 80020c4:	d400      	bmi.n	80020c8 <__aeabi_dsub+0x130>
 80020c6:	e140      	b.n	800234a <__aeabi_dsub+0x3b2>
 80020c8:	4a88      	ldr	r2, [pc, #544]	@ (80022ec <__aeabi_dsub+0x354>)
 80020ca:	3701      	adds	r7, #1
 80020cc:	4297      	cmp	r7, r2
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x13a>
 80020d0:	e101      	b.n	80022d6 <__aeabi_dsub+0x33e>
 80020d2:	2601      	movs	r6, #1
 80020d4:	4643      	mov	r3, r8
 80020d6:	4986      	ldr	r1, [pc, #536]	@ (80022f0 <__aeabi_dsub+0x358>)
 80020d8:	08ed      	lsrs	r5, r5, #3
 80020da:	4021      	ands	r1, r4
 80020dc:	074a      	lsls	r2, r1, #29
 80020de:	432a      	orrs	r2, r5
 80020e0:	057c      	lsls	r4, r7, #21
 80020e2:	024d      	lsls	r5, r1, #9
 80020e4:	0b2d      	lsrs	r5, r5, #12
 80020e6:	0d64      	lsrs	r4, r4, #21
 80020e8:	401e      	ands	r6, r3
 80020ea:	0524      	lsls	r4, r4, #20
 80020ec:	432c      	orrs	r4, r5
 80020ee:	07f6      	lsls	r6, r6, #31
 80020f0:	4334      	orrs	r4, r6
 80020f2:	0010      	movs	r0, r2
 80020f4:	0021      	movs	r1, r4
 80020f6:	b005      	add	sp, #20
 80020f8:	bcf0      	pop	{r4, r5, r6, r7}
 80020fa:	46bb      	mov	fp, r7
 80020fc:	46b2      	mov	sl, r6
 80020fe:	46a9      	mov	r9, r5
 8002100:	46a0      	mov	r8, r4
 8002102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002104:	2d00      	cmp	r5, #0
 8002106:	dc00      	bgt.n	800210a <__aeabi_dsub+0x172>
 8002108:	e2d0      	b.n	80026ac <__aeabi_dsub+0x714>
 800210a:	4649      	mov	r1, r9
 800210c:	2900      	cmp	r1, #0
 800210e:	d000      	beq.n	8002112 <__aeabi_dsub+0x17a>
 8002110:	e0d4      	b.n	80022bc <__aeabi_dsub+0x324>
 8002112:	4661      	mov	r1, ip
 8002114:	9b02      	ldr	r3, [sp, #8]
 8002116:	4319      	orrs	r1, r3
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x184>
 800211a:	e12b      	b.n	8002374 <__aeabi_dsub+0x3dc>
 800211c:	1e69      	subs	r1, r5, #1
 800211e:	2d01      	cmp	r5, #1
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x18c>
 8002122:	e1d9      	b.n	80024d8 <__aeabi_dsub+0x540>
 8002124:	4295      	cmp	r5, r2
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x192>
 8002128:	e10a      	b.n	8002340 <__aeabi_dsub+0x3a8>
 800212a:	2501      	movs	r5, #1
 800212c:	2938      	cmp	r1, #56	@ 0x38
 800212e:	dc17      	bgt.n	8002160 <__aeabi_dsub+0x1c8>
 8002130:	468a      	mov	sl, r1
 8002132:	4653      	mov	r3, sl
 8002134:	2b1f      	cmp	r3, #31
 8002136:	dd00      	ble.n	800213a <__aeabi_dsub+0x1a2>
 8002138:	e1e7      	b.n	800250a <__aeabi_dsub+0x572>
 800213a:	2220      	movs	r2, #32
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4661      	mov	r1, ip
 8002142:	4093      	lsls	r3, r2
 8002144:	001d      	movs	r5, r3
 8002146:	4653      	mov	r3, sl
 8002148:	40d9      	lsrs	r1, r3
 800214a:	4663      	mov	r3, ip
 800214c:	4093      	lsls	r3, r2
 800214e:	001a      	movs	r2, r3
 8002150:	430d      	orrs	r5, r1
 8002152:	1e51      	subs	r1, r2, #1
 8002154:	418a      	sbcs	r2, r1
 8002156:	4653      	mov	r3, sl
 8002158:	4315      	orrs	r5, r2
 800215a:	9a02      	ldr	r2, [sp, #8]
 800215c:	40da      	lsrs	r2, r3
 800215e:	18a4      	adds	r4, r4, r2
 8002160:	182d      	adds	r5, r5, r0
 8002162:	4285      	cmp	r5, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4240      	negs	r0, r0
 8002168:	1824      	adds	r4, r4, r0
 800216a:	0223      	lsls	r3, r4, #8
 800216c:	d400      	bmi.n	8002170 <__aeabi_dsub+0x1d8>
 800216e:	e0b6      	b.n	80022de <__aeabi_dsub+0x346>
 8002170:	4b5e      	ldr	r3, [pc, #376]	@ (80022ec <__aeabi_dsub+0x354>)
 8002172:	3701      	adds	r7, #1
 8002174:	429f      	cmp	r7, r3
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x1e2>
 8002178:	e0ad      	b.n	80022d6 <__aeabi_dsub+0x33e>
 800217a:	2101      	movs	r1, #1
 800217c:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <__aeabi_dsub+0x358>)
 800217e:	086a      	lsrs	r2, r5, #1
 8002180:	401c      	ands	r4, r3
 8002182:	4029      	ands	r1, r5
 8002184:	430a      	orrs	r2, r1
 8002186:	07e5      	lsls	r5, r4, #31
 8002188:	4315      	orrs	r5, r2
 800218a:	0864      	lsrs	r4, r4, #1
 800218c:	e78d      	b.n	80020aa <__aeabi_dsub+0x112>
 800218e:	4a59      	ldr	r2, [pc, #356]	@ (80022f4 <__aeabi_dsub+0x35c>)
 8002190:	9b02      	ldr	r3, [sp, #8]
 8002192:	4692      	mov	sl, r2
 8002194:	4662      	mov	r2, ip
 8002196:	44ba      	add	sl, r7
 8002198:	431a      	orrs	r2, r3
 800219a:	d02c      	beq.n	80021f6 <__aeabi_dsub+0x25e>
 800219c:	428e      	cmp	r6, r1
 800219e:	d02e      	beq.n	80021fe <__aeabi_dsub+0x266>
 80021a0:	4652      	mov	r2, sl
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d060      	beq.n	8002268 <__aeabi_dsub+0x2d0>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x214>
 80021aa:	e0db      	b.n	8002364 <__aeabi_dsub+0x3cc>
 80021ac:	4663      	mov	r3, ip
 80021ae:	000e      	movs	r6, r1
 80021b0:	9c02      	ldr	r4, [sp, #8]
 80021b2:	08d8      	lsrs	r0, r3, #3
 80021b4:	0762      	lsls	r2, r4, #29
 80021b6:	4302      	orrs	r2, r0
 80021b8:	08e4      	lsrs	r4, r4, #3
 80021ba:	0013      	movs	r3, r2
 80021bc:	4323      	orrs	r3, r4
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x22a>
 80021c0:	e254      	b.n	800266c <__aeabi_dsub+0x6d4>
 80021c2:	2580      	movs	r5, #128	@ 0x80
 80021c4:	032d      	lsls	r5, r5, #12
 80021c6:	4325      	orrs	r5, r4
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	4c48      	ldr	r4, [pc, #288]	@ (80022ec <__aeabi_dsub+0x354>)
 80021cc:	0b2d      	lsrs	r5, r5, #12
 80021ce:	e78c      	b.n	80020ea <__aeabi_dsub+0x152>
 80021d0:	4661      	mov	r1, ip
 80021d2:	9b02      	ldr	r3, [sp, #8]
 80021d4:	4319      	orrs	r1, r3
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x242>
 80021d8:	e0cc      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80021da:	0029      	movs	r1, r5
 80021dc:	3901      	subs	r1, #1
 80021de:	2d01      	cmp	r5, #1
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x24c>
 80021e2:	e188      	b.n	80024f6 <__aeabi_dsub+0x55e>
 80021e4:	4295      	cmp	r5, r2
 80021e6:	d100      	bne.n	80021ea <__aeabi_dsub+0x252>
 80021e8:	e0aa      	b.n	8002340 <__aeabi_dsub+0x3a8>
 80021ea:	2501      	movs	r5, #1
 80021ec:	2938      	cmp	r1, #56	@ 0x38
 80021ee:	dd00      	ble.n	80021f2 <__aeabi_dsub+0x25a>
 80021f0:	e72f      	b.n	8002052 <__aeabi_dsub+0xba>
 80021f2:	468a      	mov	sl, r1
 80021f4:	e718      	b.n	8002028 <__aeabi_dsub+0x90>
 80021f6:	2201      	movs	r2, #1
 80021f8:	4051      	eors	r1, r2
 80021fa:	428e      	cmp	r6, r1
 80021fc:	d1d0      	bne.n	80021a0 <__aeabi_dsub+0x208>
 80021fe:	4653      	mov	r3, sl
 8002200:	2b00      	cmp	r3, #0
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x26e>
 8002204:	e0be      	b.n	8002384 <__aeabi_dsub+0x3ec>
 8002206:	2f00      	cmp	r7, #0
 8002208:	d000      	beq.n	800220c <__aeabi_dsub+0x274>
 800220a:	e138      	b.n	800247e <__aeabi_dsub+0x4e6>
 800220c:	46ca      	mov	sl, r9
 800220e:	0022      	movs	r2, r4
 8002210:	4302      	orrs	r2, r0
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x27e>
 8002214:	e1e2      	b.n	80025dc <__aeabi_dsub+0x644>
 8002216:	4653      	mov	r3, sl
 8002218:	1e59      	subs	r1, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x288>
 800221e:	e20d      	b.n	800263c <__aeabi_dsub+0x6a4>
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <__aeabi_dsub+0x354>)
 8002222:	4592      	cmp	sl, r2
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x290>
 8002226:	e1d2      	b.n	80025ce <__aeabi_dsub+0x636>
 8002228:	2701      	movs	r7, #1
 800222a:	2938      	cmp	r1, #56	@ 0x38
 800222c:	dc13      	bgt.n	8002256 <__aeabi_dsub+0x2be>
 800222e:	291f      	cmp	r1, #31
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x29c>
 8002232:	e1ee      	b.n	8002612 <__aeabi_dsub+0x67a>
 8002234:	2220      	movs	r2, #32
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	1a52      	subs	r2, r2, r1
 800223a:	0025      	movs	r5, r4
 800223c:	0007      	movs	r7, r0
 800223e:	469a      	mov	sl, r3
 8002240:	40cc      	lsrs	r4, r1
 8002242:	4090      	lsls	r0, r2
 8002244:	4095      	lsls	r5, r2
 8002246:	40cf      	lsrs	r7, r1
 8002248:	44a2      	add	sl, r4
 800224a:	1e42      	subs	r2, r0, #1
 800224c:	4190      	sbcs	r0, r2
 800224e:	4653      	mov	r3, sl
 8002250:	432f      	orrs	r7, r5
 8002252:	4307      	orrs	r7, r0
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	003d      	movs	r5, r7
 8002258:	4465      	add	r5, ip
 800225a:	4565      	cmp	r5, ip
 800225c:	4192      	sbcs	r2, r2
 800225e:	9b02      	ldr	r3, [sp, #8]
 8002260:	4252      	negs	r2, r2
 8002262:	464f      	mov	r7, r9
 8002264:	18d4      	adds	r4, r2, r3
 8002266:	e780      	b.n	800216a <__aeabi_dsub+0x1d2>
 8002268:	4a23      	ldr	r2, [pc, #140]	@ (80022f8 <__aeabi_dsub+0x360>)
 800226a:	1c7d      	adds	r5, r7, #1
 800226c:	4215      	tst	r5, r2
 800226e:	d000      	beq.n	8002272 <__aeabi_dsub+0x2da>
 8002270:	e0aa      	b.n	80023c8 <__aeabi_dsub+0x430>
 8002272:	4662      	mov	r2, ip
 8002274:	0025      	movs	r5, r4
 8002276:	9b02      	ldr	r3, [sp, #8]
 8002278:	4305      	orrs	r5, r0
 800227a:	431a      	orrs	r2, r3
 800227c:	2f00      	cmp	r7, #0
 800227e:	d000      	beq.n	8002282 <__aeabi_dsub+0x2ea>
 8002280:	e0f5      	b.n	800246e <__aeabi_dsub+0x4d6>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x2f0>
 8002286:	e16b      	b.n	8002560 <__aeabi_dsub+0x5c8>
 8002288:	2a00      	cmp	r2, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x2f6>
 800228c:	e152      	b.n	8002534 <__aeabi_dsub+0x59c>
 800228e:	4663      	mov	r3, ip
 8002290:	1ac5      	subs	r5, r0, r3
 8002292:	9b02      	ldr	r3, [sp, #8]
 8002294:	1ae2      	subs	r2, r4, r3
 8002296:	42a8      	cmp	r0, r5
 8002298:	419b      	sbcs	r3, r3
 800229a:	425b      	negs	r3, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	d400      	bmi.n	80022a4 <__aeabi_dsub+0x30c>
 80022a2:	e1d5      	b.n	8002650 <__aeabi_dsub+0x6b8>
 80022a4:	4663      	mov	r3, ip
 80022a6:	1a1d      	subs	r5, r3, r0
 80022a8:	45ac      	cmp	ip, r5
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	2601      	movs	r6, #1
 80022ae:	9b02      	ldr	r3, [sp, #8]
 80022b0:	4252      	negs	r2, r2
 80022b2:	1b1c      	subs	r4, r3, r4
 80022b4:	4688      	mov	r8, r1
 80022b6:	1aa4      	subs	r4, r4, r2
 80022b8:	400e      	ands	r6, r1
 80022ba:	e6f6      	b.n	80020aa <__aeabi_dsub+0x112>
 80022bc:	4297      	cmp	r7, r2
 80022be:	d03f      	beq.n	8002340 <__aeabi_dsub+0x3a8>
 80022c0:	4652      	mov	r2, sl
 80022c2:	2501      	movs	r5, #1
 80022c4:	2a38      	cmp	r2, #56	@ 0x38
 80022c6:	dd00      	ble.n	80022ca <__aeabi_dsub+0x332>
 80022c8:	e74a      	b.n	8002160 <__aeabi_dsub+0x1c8>
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	9b02      	ldr	r3, [sp, #8]
 80022ce:	0412      	lsls	r2, r2, #16
 80022d0:	4313      	orrs	r3, r2
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	e72d      	b.n	8002132 <__aeabi_dsub+0x19a>
 80022d6:	003c      	movs	r4, r7
 80022d8:	2500      	movs	r5, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	e705      	b.n	80020ea <__aeabi_dsub+0x152>
 80022de:	2307      	movs	r3, #7
 80022e0:	402b      	ands	r3, r5
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x350>
 80022e6:	e6e2      	b.n	80020ae <__aeabi_dsub+0x116>
 80022e8:	e06b      	b.n	80023c2 <__aeabi_dsub+0x42a>
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	ff7fffff 	.word	0xff7fffff
 80022f4:	fffff801 	.word	0xfffff801
 80022f8:	000007fe 	.word	0x000007fe
 80022fc:	0028      	movs	r0, r5
 80022fe:	f000 fb63 	bl	80029c8 <__clzsi2>
 8002302:	0003      	movs	r3, r0
 8002304:	3318      	adds	r3, #24
 8002306:	2b1f      	cmp	r3, #31
 8002308:	dc00      	bgt.n	800230c <__aeabi_dsub+0x374>
 800230a:	e6b4      	b.n	8002076 <__aeabi_dsub+0xde>
 800230c:	002a      	movs	r2, r5
 800230e:	3808      	subs	r0, #8
 8002310:	4082      	lsls	r2, r0
 8002312:	429f      	cmp	r7, r3
 8002314:	dd00      	ble.n	8002318 <__aeabi_dsub+0x380>
 8002316:	e0b9      	b.n	800248c <__aeabi_dsub+0x4f4>
 8002318:	1bdb      	subs	r3, r3, r7
 800231a:	1c58      	adds	r0, r3, #1
 800231c:	281f      	cmp	r0, #31
 800231e:	dc00      	bgt.n	8002322 <__aeabi_dsub+0x38a>
 8002320:	e1a0      	b.n	8002664 <__aeabi_dsub+0x6cc>
 8002322:	0015      	movs	r5, r2
 8002324:	3b1f      	subs	r3, #31
 8002326:	40dd      	lsrs	r5, r3
 8002328:	2820      	cmp	r0, #32
 800232a:	d005      	beq.n	8002338 <__aeabi_dsub+0x3a0>
 800232c:	2340      	movs	r3, #64	@ 0x40
 800232e:	1a1b      	subs	r3, r3, r0
 8002330:	409a      	lsls	r2, r3
 8002332:	1e53      	subs	r3, r2, #1
 8002334:	419a      	sbcs	r2, r3
 8002336:	4315      	orrs	r5, r2
 8002338:	2307      	movs	r3, #7
 800233a:	2700      	movs	r7, #0
 800233c:	402b      	ands	r3, r5
 800233e:	e7d0      	b.n	80022e2 <__aeabi_dsub+0x34a>
 8002340:	08c0      	lsrs	r0, r0, #3
 8002342:	0762      	lsls	r2, r4, #29
 8002344:	4302      	orrs	r2, r0
 8002346:	08e4      	lsrs	r4, r4, #3
 8002348:	e737      	b.n	80021ba <__aeabi_dsub+0x222>
 800234a:	08ea      	lsrs	r2, r5, #3
 800234c:	0763      	lsls	r3, r4, #29
 800234e:	431a      	orrs	r2, r3
 8002350:	4bd3      	ldr	r3, [pc, #844]	@ (80026a0 <__aeabi_dsub+0x708>)
 8002352:	08e4      	lsrs	r4, r4, #3
 8002354:	429f      	cmp	r7, r3
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x3c2>
 8002358:	e72f      	b.n	80021ba <__aeabi_dsub+0x222>
 800235a:	0324      	lsls	r4, r4, #12
 800235c:	0b25      	lsrs	r5, r4, #12
 800235e:	057c      	lsls	r4, r7, #21
 8002360:	0d64      	lsrs	r4, r4, #21
 8002362:	e6c2      	b.n	80020ea <__aeabi_dsub+0x152>
 8002364:	46ca      	mov	sl, r9
 8002366:	0022      	movs	r2, r4
 8002368:	4302      	orrs	r2, r0
 800236a:	d158      	bne.n	800241e <__aeabi_dsub+0x486>
 800236c:	4663      	mov	r3, ip
 800236e:	000e      	movs	r6, r1
 8002370:	9c02      	ldr	r4, [sp, #8]
 8002372:	9303      	str	r3, [sp, #12]
 8002374:	9b03      	ldr	r3, [sp, #12]
 8002376:	4657      	mov	r7, sl
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	e7e7      	b.n	800234c <__aeabi_dsub+0x3b4>
 800237c:	4cc9      	ldr	r4, [pc, #804]	@ (80026a4 <__aeabi_dsub+0x70c>)
 800237e:	1aff      	subs	r7, r7, r3
 8002380:	4014      	ands	r4, r2
 8002382:	e692      	b.n	80020aa <__aeabi_dsub+0x112>
 8002384:	4dc8      	ldr	r5, [pc, #800]	@ (80026a8 <__aeabi_dsub+0x710>)
 8002386:	1c7a      	adds	r2, r7, #1
 8002388:	422a      	tst	r2, r5
 800238a:	d000      	beq.n	800238e <__aeabi_dsub+0x3f6>
 800238c:	e084      	b.n	8002498 <__aeabi_dsub+0x500>
 800238e:	0022      	movs	r2, r4
 8002390:	4302      	orrs	r2, r0
 8002392:	2f00      	cmp	r7, #0
 8002394:	d000      	beq.n	8002398 <__aeabi_dsub+0x400>
 8002396:	e0ef      	b.n	8002578 <__aeabi_dsub+0x5e0>
 8002398:	2a00      	cmp	r2, #0
 800239a:	d100      	bne.n	800239e <__aeabi_dsub+0x406>
 800239c:	e0e5      	b.n	800256a <__aeabi_dsub+0x5d2>
 800239e:	4662      	mov	r2, ip
 80023a0:	9902      	ldr	r1, [sp, #8]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x410>
 80023a6:	e0c5      	b.n	8002534 <__aeabi_dsub+0x59c>
 80023a8:	4663      	mov	r3, ip
 80023aa:	18c5      	adds	r5, r0, r3
 80023ac:	468c      	mov	ip, r1
 80023ae:	4285      	cmp	r5, r0
 80023b0:	4180      	sbcs	r0, r0
 80023b2:	4464      	add	r4, ip
 80023b4:	4240      	negs	r0, r0
 80023b6:	1824      	adds	r4, r4, r0
 80023b8:	0223      	lsls	r3, r4, #8
 80023ba:	d502      	bpl.n	80023c2 <__aeabi_dsub+0x42a>
 80023bc:	4bb9      	ldr	r3, [pc, #740]	@ (80026a4 <__aeabi_dsub+0x70c>)
 80023be:	3701      	adds	r7, #1
 80023c0:	401c      	ands	r4, r3
 80023c2:	46ba      	mov	sl, r7
 80023c4:	9503      	str	r5, [sp, #12]
 80023c6:	e7d5      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80023c8:	4662      	mov	r2, ip
 80023ca:	1a85      	subs	r5, r0, r2
 80023cc:	42a8      	cmp	r0, r5
 80023ce:	4192      	sbcs	r2, r2
 80023d0:	4252      	negs	r2, r2
 80023d2:	4691      	mov	r9, r2
 80023d4:	9b02      	ldr	r3, [sp, #8]
 80023d6:	1ae3      	subs	r3, r4, r3
 80023d8:	001a      	movs	r2, r3
 80023da:	464b      	mov	r3, r9
 80023dc:	1ad2      	subs	r2, r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	4691      	mov	r9, r2
 80023e2:	021a      	lsls	r2, r3, #8
 80023e4:	d46c      	bmi.n	80024c0 <__aeabi_dsub+0x528>
 80023e6:	464a      	mov	r2, r9
 80023e8:	464c      	mov	r4, r9
 80023ea:	432a      	orrs	r2, r5
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dsub+0x458>
 80023ee:	e63a      	b.n	8002066 <__aeabi_dsub+0xce>
 80023f0:	2600      	movs	r6, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	2500      	movs	r5, #0
 80023f6:	e678      	b.n	80020ea <__aeabi_dsub+0x152>
 80023f8:	9902      	ldr	r1, [sp, #8]
 80023fa:	4653      	mov	r3, sl
 80023fc:	000d      	movs	r5, r1
 80023fe:	3a20      	subs	r2, #32
 8002400:	40d5      	lsrs	r5, r2
 8002402:	2b20      	cmp	r3, #32
 8002404:	d006      	beq.n	8002414 <__aeabi_dsub+0x47c>
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	1ad2      	subs	r2, r2, r3
 800240a:	000b      	movs	r3, r1
 800240c:	4093      	lsls	r3, r2
 800240e:	4662      	mov	r2, ip
 8002410:	431a      	orrs	r2, r3
 8002412:	4693      	mov	fp, r2
 8002414:	465b      	mov	r3, fp
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	4193      	sbcs	r3, r2
 800241a:	431d      	orrs	r5, r3
 800241c:	e619      	b.n	8002052 <__aeabi_dsub+0xba>
 800241e:	4653      	mov	r3, sl
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x490>
 8002426:	e0c6      	b.n	80025b6 <__aeabi_dsub+0x61e>
 8002428:	4e9d      	ldr	r6, [pc, #628]	@ (80026a0 <__aeabi_dsub+0x708>)
 800242a:	45b2      	cmp	sl, r6
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x498>
 800242e:	e6bd      	b.n	80021ac <__aeabi_dsub+0x214>
 8002430:	4688      	mov	r8, r1
 8002432:	000e      	movs	r6, r1
 8002434:	2501      	movs	r5, #1
 8002436:	2a38      	cmp	r2, #56	@ 0x38
 8002438:	dc10      	bgt.n	800245c <__aeabi_dsub+0x4c4>
 800243a:	2a1f      	cmp	r2, #31
 800243c:	dc7f      	bgt.n	800253e <__aeabi_dsub+0x5a6>
 800243e:	2120      	movs	r1, #32
 8002440:	0025      	movs	r5, r4
 8002442:	1a89      	subs	r1, r1, r2
 8002444:	0007      	movs	r7, r0
 8002446:	4088      	lsls	r0, r1
 8002448:	408d      	lsls	r5, r1
 800244a:	40d7      	lsrs	r7, r2
 800244c:	40d4      	lsrs	r4, r2
 800244e:	1e41      	subs	r1, r0, #1
 8002450:	4188      	sbcs	r0, r1
 8002452:	9b02      	ldr	r3, [sp, #8]
 8002454:	433d      	orrs	r5, r7
 8002456:	1b1b      	subs	r3, r3, r4
 8002458:	4305      	orrs	r5, r0
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	4662      	mov	r2, ip
 800245e:	1b55      	subs	r5, r2, r5
 8002460:	45ac      	cmp	ip, r5
 8002462:	4192      	sbcs	r2, r2
 8002464:	9b02      	ldr	r3, [sp, #8]
 8002466:	4252      	negs	r2, r2
 8002468:	464f      	mov	r7, r9
 800246a:	1a9c      	subs	r4, r3, r2
 800246c:	e5f6      	b.n	800205c <__aeabi_dsub+0xc4>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x4dc>
 8002472:	e0b7      	b.n	80025e4 <__aeabi_dsub+0x64c>
 8002474:	2a00      	cmp	r2, #0
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x4e2>
 8002478:	e0f0      	b.n	800265c <__aeabi_dsub+0x6c4>
 800247a:	2601      	movs	r6, #1
 800247c:	400e      	ands	r6, r1
 800247e:	4663      	mov	r3, ip
 8002480:	9802      	ldr	r0, [sp, #8]
 8002482:	08d9      	lsrs	r1, r3, #3
 8002484:	0742      	lsls	r2, r0, #29
 8002486:	430a      	orrs	r2, r1
 8002488:	08c4      	lsrs	r4, r0, #3
 800248a:	e696      	b.n	80021ba <__aeabi_dsub+0x222>
 800248c:	4c85      	ldr	r4, [pc, #532]	@ (80026a4 <__aeabi_dsub+0x70c>)
 800248e:	1aff      	subs	r7, r7, r3
 8002490:	4014      	ands	r4, r2
 8002492:	0762      	lsls	r2, r4, #29
 8002494:	08e4      	lsrs	r4, r4, #3
 8002496:	e760      	b.n	800235a <__aeabi_dsub+0x3c2>
 8002498:	4981      	ldr	r1, [pc, #516]	@ (80026a0 <__aeabi_dsub+0x708>)
 800249a:	428a      	cmp	r2, r1
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x508>
 800249e:	e0c9      	b.n	8002634 <__aeabi_dsub+0x69c>
 80024a0:	4663      	mov	r3, ip
 80024a2:	18c1      	adds	r1, r0, r3
 80024a4:	4281      	cmp	r1, r0
 80024a6:	4180      	sbcs	r0, r0
 80024a8:	9b02      	ldr	r3, [sp, #8]
 80024aa:	4240      	negs	r0, r0
 80024ac:	18e3      	adds	r3, r4, r3
 80024ae:	181b      	adds	r3, r3, r0
 80024b0:	07dd      	lsls	r5, r3, #31
 80024b2:	085c      	lsrs	r4, r3, #1
 80024b4:	2307      	movs	r3, #7
 80024b6:	0849      	lsrs	r1, r1, #1
 80024b8:	430d      	orrs	r5, r1
 80024ba:	0017      	movs	r7, r2
 80024bc:	402b      	ands	r3, r5
 80024be:	e710      	b.n	80022e2 <__aeabi_dsub+0x34a>
 80024c0:	4663      	mov	r3, ip
 80024c2:	1a1d      	subs	r5, r3, r0
 80024c4:	45ac      	cmp	ip, r5
 80024c6:	4192      	sbcs	r2, r2
 80024c8:	2601      	movs	r6, #1
 80024ca:	9b02      	ldr	r3, [sp, #8]
 80024cc:	4252      	negs	r2, r2
 80024ce:	1b1c      	subs	r4, r3, r4
 80024d0:	4688      	mov	r8, r1
 80024d2:	1aa4      	subs	r4, r4, r2
 80024d4:	400e      	ands	r6, r1
 80024d6:	e5c6      	b.n	8002066 <__aeabi_dsub+0xce>
 80024d8:	4663      	mov	r3, ip
 80024da:	18c5      	adds	r5, r0, r3
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	4285      	cmp	r5, r0
 80024e0:	4180      	sbcs	r0, r0
 80024e2:	469c      	mov	ip, r3
 80024e4:	4240      	negs	r0, r0
 80024e6:	4464      	add	r4, ip
 80024e8:	1824      	adds	r4, r4, r0
 80024ea:	2701      	movs	r7, #1
 80024ec:	0223      	lsls	r3, r4, #8
 80024ee:	d400      	bmi.n	80024f2 <__aeabi_dsub+0x55a>
 80024f0:	e6f5      	b.n	80022de <__aeabi_dsub+0x346>
 80024f2:	2702      	movs	r7, #2
 80024f4:	e641      	b.n	800217a <__aeabi_dsub+0x1e2>
 80024f6:	4663      	mov	r3, ip
 80024f8:	1ac5      	subs	r5, r0, r3
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	4180      	sbcs	r0, r0
 80024fe:	9b02      	ldr	r3, [sp, #8]
 8002500:	4240      	negs	r0, r0
 8002502:	1ae4      	subs	r4, r4, r3
 8002504:	2701      	movs	r7, #1
 8002506:	1a24      	subs	r4, r4, r0
 8002508:	e5a8      	b.n	800205c <__aeabi_dsub+0xc4>
 800250a:	9d02      	ldr	r5, [sp, #8]
 800250c:	4652      	mov	r2, sl
 800250e:	002b      	movs	r3, r5
 8002510:	3a20      	subs	r2, #32
 8002512:	40d3      	lsrs	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	4653      	mov	r3, sl
 8002518:	2b20      	cmp	r3, #32
 800251a:	d006      	beq.n	800252a <__aeabi_dsub+0x592>
 800251c:	2240      	movs	r2, #64	@ 0x40
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	002b      	movs	r3, r5
 8002522:	4093      	lsls	r3, r2
 8002524:	4662      	mov	r2, ip
 8002526:	431a      	orrs	r2, r3
 8002528:	4693      	mov	fp, r2
 800252a:	465d      	mov	r5, fp
 800252c:	1e6b      	subs	r3, r5, #1
 800252e:	419d      	sbcs	r5, r3
 8002530:	430d      	orrs	r5, r1
 8002532:	e615      	b.n	8002160 <__aeabi_dsub+0x1c8>
 8002534:	0762      	lsls	r2, r4, #29
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4302      	orrs	r2, r0
 800253a:	08e4      	lsrs	r4, r4, #3
 800253c:	e70d      	b.n	800235a <__aeabi_dsub+0x3c2>
 800253e:	0011      	movs	r1, r2
 8002540:	0027      	movs	r7, r4
 8002542:	3920      	subs	r1, #32
 8002544:	40cf      	lsrs	r7, r1
 8002546:	2a20      	cmp	r2, #32
 8002548:	d005      	beq.n	8002556 <__aeabi_dsub+0x5be>
 800254a:	2140      	movs	r1, #64	@ 0x40
 800254c:	1a8a      	subs	r2, r1, r2
 800254e:	4094      	lsls	r4, r2
 8002550:	0025      	movs	r5, r4
 8002552:	4305      	orrs	r5, r0
 8002554:	9503      	str	r5, [sp, #12]
 8002556:	9d03      	ldr	r5, [sp, #12]
 8002558:	1e6a      	subs	r2, r5, #1
 800255a:	4195      	sbcs	r5, r2
 800255c:	433d      	orrs	r5, r7
 800255e:	e77d      	b.n	800245c <__aeabi_dsub+0x4c4>
 8002560:	2a00      	cmp	r2, #0
 8002562:	d100      	bne.n	8002566 <__aeabi_dsub+0x5ce>
 8002564:	e744      	b.n	80023f0 <__aeabi_dsub+0x458>
 8002566:	2601      	movs	r6, #1
 8002568:	400e      	ands	r6, r1
 800256a:	4663      	mov	r3, ip
 800256c:	08d9      	lsrs	r1, r3, #3
 800256e:	9b02      	ldr	r3, [sp, #8]
 8002570:	075a      	lsls	r2, r3, #29
 8002572:	430a      	orrs	r2, r1
 8002574:	08dc      	lsrs	r4, r3, #3
 8002576:	e6f0      	b.n	800235a <__aeabi_dsub+0x3c2>
 8002578:	2a00      	cmp	r2, #0
 800257a:	d028      	beq.n	80025ce <__aeabi_dsub+0x636>
 800257c:	4662      	mov	r2, ip
 800257e:	9f02      	ldr	r7, [sp, #8]
 8002580:	08c0      	lsrs	r0, r0, #3
 8002582:	433a      	orrs	r2, r7
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x5f0>
 8002586:	e6dc      	b.n	8002342 <__aeabi_dsub+0x3aa>
 8002588:	0762      	lsls	r2, r4, #29
 800258a:	4310      	orrs	r0, r2
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	08e4      	lsrs	r4, r4, #3
 8002590:	0312      	lsls	r2, r2, #12
 8002592:	4214      	tst	r4, r2
 8002594:	d009      	beq.n	80025aa <__aeabi_dsub+0x612>
 8002596:	08fd      	lsrs	r5, r7, #3
 8002598:	4215      	tst	r5, r2
 800259a:	d106      	bne.n	80025aa <__aeabi_dsub+0x612>
 800259c:	4663      	mov	r3, ip
 800259e:	2601      	movs	r6, #1
 80025a0:	002c      	movs	r4, r5
 80025a2:	08d8      	lsrs	r0, r3, #3
 80025a4:	077b      	lsls	r3, r7, #29
 80025a6:	4318      	orrs	r0, r3
 80025a8:	400e      	ands	r6, r1
 80025aa:	0f42      	lsrs	r2, r0, #29
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	08c0      	lsrs	r0, r0, #3
 80025b0:	0752      	lsls	r2, r2, #29
 80025b2:	4302      	orrs	r2, r0
 80025b4:	e601      	b.n	80021ba <__aeabi_dsub+0x222>
 80025b6:	4663      	mov	r3, ip
 80025b8:	1a1d      	subs	r5, r3, r0
 80025ba:	45ac      	cmp	ip, r5
 80025bc:	4192      	sbcs	r2, r2
 80025be:	9b02      	ldr	r3, [sp, #8]
 80025c0:	4252      	negs	r2, r2
 80025c2:	1b1c      	subs	r4, r3, r4
 80025c4:	000e      	movs	r6, r1
 80025c6:	4688      	mov	r8, r1
 80025c8:	2701      	movs	r7, #1
 80025ca:	1aa4      	subs	r4, r4, r2
 80025cc:	e546      	b.n	800205c <__aeabi_dsub+0xc4>
 80025ce:	4663      	mov	r3, ip
 80025d0:	08d9      	lsrs	r1, r3, #3
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	075a      	lsls	r2, r3, #29
 80025d6:	430a      	orrs	r2, r1
 80025d8:	08dc      	lsrs	r4, r3, #3
 80025da:	e5ee      	b.n	80021ba <__aeabi_dsub+0x222>
 80025dc:	4663      	mov	r3, ip
 80025de:	9c02      	ldr	r4, [sp, #8]
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	e6c7      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80025e4:	08c0      	lsrs	r0, r0, #3
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x654>
 80025ea:	e6aa      	b.n	8002342 <__aeabi_dsub+0x3aa>
 80025ec:	0762      	lsls	r2, r4, #29
 80025ee:	4310      	orrs	r0, r2
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	08e4      	lsrs	r4, r4, #3
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d0d7      	beq.n	80025aa <__aeabi_dsub+0x612>
 80025fa:	9f02      	ldr	r7, [sp, #8]
 80025fc:	08fd      	lsrs	r5, r7, #3
 80025fe:	4215      	tst	r5, r2
 8002600:	d1d3      	bne.n	80025aa <__aeabi_dsub+0x612>
 8002602:	4663      	mov	r3, ip
 8002604:	2601      	movs	r6, #1
 8002606:	08d8      	lsrs	r0, r3, #3
 8002608:	077b      	lsls	r3, r7, #29
 800260a:	002c      	movs	r4, r5
 800260c:	4318      	orrs	r0, r3
 800260e:	400e      	ands	r6, r1
 8002610:	e7cb      	b.n	80025aa <__aeabi_dsub+0x612>
 8002612:	000a      	movs	r2, r1
 8002614:	0027      	movs	r7, r4
 8002616:	3a20      	subs	r2, #32
 8002618:	40d7      	lsrs	r7, r2
 800261a:	2920      	cmp	r1, #32
 800261c:	d005      	beq.n	800262a <__aeabi_dsub+0x692>
 800261e:	2240      	movs	r2, #64	@ 0x40
 8002620:	1a52      	subs	r2, r2, r1
 8002622:	4094      	lsls	r4, r2
 8002624:	0025      	movs	r5, r4
 8002626:	4305      	orrs	r5, r0
 8002628:	9503      	str	r5, [sp, #12]
 800262a:	9d03      	ldr	r5, [sp, #12]
 800262c:	1e6a      	subs	r2, r5, #1
 800262e:	4195      	sbcs	r5, r2
 8002630:	432f      	orrs	r7, r5
 8002632:	e610      	b.n	8002256 <__aeabi_dsub+0x2be>
 8002634:	0014      	movs	r4, r2
 8002636:	2500      	movs	r5, #0
 8002638:	2200      	movs	r2, #0
 800263a:	e556      	b.n	80020ea <__aeabi_dsub+0x152>
 800263c:	9b02      	ldr	r3, [sp, #8]
 800263e:	4460      	add	r0, ip
 8002640:	4699      	mov	r9, r3
 8002642:	4560      	cmp	r0, ip
 8002644:	4192      	sbcs	r2, r2
 8002646:	444c      	add	r4, r9
 8002648:	4252      	negs	r2, r2
 800264a:	0005      	movs	r5, r0
 800264c:	18a4      	adds	r4, r4, r2
 800264e:	e74c      	b.n	80024ea <__aeabi_dsub+0x552>
 8002650:	001a      	movs	r2, r3
 8002652:	001c      	movs	r4, r3
 8002654:	432a      	orrs	r2, r5
 8002656:	d000      	beq.n	800265a <__aeabi_dsub+0x6c2>
 8002658:	e6b3      	b.n	80023c2 <__aeabi_dsub+0x42a>
 800265a:	e6c9      	b.n	80023f0 <__aeabi_dsub+0x458>
 800265c:	2480      	movs	r4, #128	@ 0x80
 800265e:	2600      	movs	r6, #0
 8002660:	0324      	lsls	r4, r4, #12
 8002662:	e5ae      	b.n	80021c2 <__aeabi_dsub+0x22a>
 8002664:	2120      	movs	r1, #32
 8002666:	2500      	movs	r5, #0
 8002668:	1a09      	subs	r1, r1, r0
 800266a:	e517      	b.n	800209c <__aeabi_dsub+0x104>
 800266c:	2200      	movs	r2, #0
 800266e:	2500      	movs	r5, #0
 8002670:	4c0b      	ldr	r4, [pc, #44]	@ (80026a0 <__aeabi_dsub+0x708>)
 8002672:	e53a      	b.n	80020ea <__aeabi_dsub+0x152>
 8002674:	2d00      	cmp	r5, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x6e2>
 8002678:	e5f6      	b.n	8002268 <__aeabi_dsub+0x2d0>
 800267a:	464b      	mov	r3, r9
 800267c:	1bda      	subs	r2, r3, r7
 800267e:	4692      	mov	sl, r2
 8002680:	2f00      	cmp	r7, #0
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x6ee>
 8002684:	e66f      	b.n	8002366 <__aeabi_dsub+0x3ce>
 8002686:	2a38      	cmp	r2, #56	@ 0x38
 8002688:	dc05      	bgt.n	8002696 <__aeabi_dsub+0x6fe>
 800268a:	2680      	movs	r6, #128	@ 0x80
 800268c:	0436      	lsls	r6, r6, #16
 800268e:	4334      	orrs	r4, r6
 8002690:	4688      	mov	r8, r1
 8002692:	000e      	movs	r6, r1
 8002694:	e6d1      	b.n	800243a <__aeabi_dsub+0x4a2>
 8002696:	4688      	mov	r8, r1
 8002698:	000e      	movs	r6, r1
 800269a:	2501      	movs	r5, #1
 800269c:	e6de      	b.n	800245c <__aeabi_dsub+0x4c4>
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	000007ff 	.word	0x000007ff
 80026a4:	ff7fffff 	.word	0xff7fffff
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x71a>
 80026b0:	e668      	b.n	8002384 <__aeabi_dsub+0x3ec>
 80026b2:	464b      	mov	r3, r9
 80026b4:	1bd9      	subs	r1, r3, r7
 80026b6:	2f00      	cmp	r7, #0
 80026b8:	d101      	bne.n	80026be <__aeabi_dsub+0x726>
 80026ba:	468a      	mov	sl, r1
 80026bc:	e5a7      	b.n	800220e <__aeabi_dsub+0x276>
 80026be:	2701      	movs	r7, #1
 80026c0:	2938      	cmp	r1, #56	@ 0x38
 80026c2:	dd00      	ble.n	80026c6 <__aeabi_dsub+0x72e>
 80026c4:	e5c7      	b.n	8002256 <__aeabi_dsub+0x2be>
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	0412      	lsls	r2, r2, #16
 80026ca:	4314      	orrs	r4, r2
 80026cc:	e5af      	b.n	800222e <__aeabi_dsub+0x296>
 80026ce:	46c0      	nop			@ (mov r8, r8)

080026d0 <__aeabi_dcmpun>:
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	46c6      	mov	lr, r8
 80026d4:	031e      	lsls	r6, r3, #12
 80026d6:	0b36      	lsrs	r6, r6, #12
 80026d8:	46b0      	mov	r8, r6
 80026da:	4e0d      	ldr	r6, [pc, #52]	@ (8002710 <__aeabi_dcmpun+0x40>)
 80026dc:	030c      	lsls	r4, r1, #12
 80026de:	004d      	lsls	r5, r1, #1
 80026e0:	005f      	lsls	r7, r3, #1
 80026e2:	b500      	push	{lr}
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	0d6d      	lsrs	r5, r5, #21
 80026e8:	0d7f      	lsrs	r7, r7, #21
 80026ea:	42b5      	cmp	r5, r6
 80026ec:	d00b      	beq.n	8002706 <__aeabi_dcmpun+0x36>
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <__aeabi_dcmpun+0x40>)
 80026f0:	2000      	movs	r0, #0
 80026f2:	428f      	cmp	r7, r1
 80026f4:	d104      	bne.n	8002700 <__aeabi_dcmpun+0x30>
 80026f6:	4646      	mov	r6, r8
 80026f8:	4316      	orrs	r6, r2
 80026fa:	0030      	movs	r0, r6
 80026fc:	1e43      	subs	r3, r0, #1
 80026fe:	4198      	sbcs	r0, r3
 8002700:	bc80      	pop	{r7}
 8002702:	46b8      	mov	r8, r7
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002706:	4304      	orrs	r4, r0
 8002708:	2001      	movs	r0, #1
 800270a:	2c00      	cmp	r4, #0
 800270c:	d1f8      	bne.n	8002700 <__aeabi_dcmpun+0x30>
 800270e:	e7ee      	b.n	80026ee <__aeabi_dcmpun+0x1e>
 8002710:	000007ff 	.word	0x000007ff

08002714 <__aeabi_d2iz>:
 8002714:	000b      	movs	r3, r1
 8002716:	0002      	movs	r2, r0
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4d16      	ldr	r5, [pc, #88]	@ (8002774 <__aeabi_d2iz+0x60>)
 800271c:	030c      	lsls	r4, r1, #12
 800271e:	b082      	sub	sp, #8
 8002720:	0049      	lsls	r1, r1, #1
 8002722:	2000      	movs	r0, #0
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	0d49      	lsrs	r1, r1, #21
 800272c:	0fde      	lsrs	r6, r3, #31
 800272e:	42a9      	cmp	r1, r5
 8002730:	dd04      	ble.n	800273c <__aeabi_d2iz+0x28>
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <__aeabi_d2iz+0x64>)
 8002734:	4281      	cmp	r1, r0
 8002736:	dd03      	ble.n	8002740 <__aeabi_d2iz+0x2c>
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <__aeabi_d2iz+0x68>)
 800273a:	18f0      	adds	r0, r6, r3
 800273c:	b002      	add	sp, #8
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	2080      	movs	r0, #128	@ 0x80
 8002742:	0340      	lsls	r0, r0, #13
 8002744:	4320      	orrs	r0, r4
 8002746:	4c0e      	ldr	r4, [pc, #56]	@ (8002780 <__aeabi_d2iz+0x6c>)
 8002748:	1a64      	subs	r4, r4, r1
 800274a:	2c1f      	cmp	r4, #31
 800274c:	dd08      	ble.n	8002760 <__aeabi_d2iz+0x4c>
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <__aeabi_d2iz+0x70>)
 8002750:	1a5b      	subs	r3, r3, r1
 8002752:	40d8      	lsrs	r0, r3
 8002754:	0003      	movs	r3, r0
 8002756:	4258      	negs	r0, r3
 8002758:	2e00      	cmp	r6, #0
 800275a:	d1ef      	bne.n	800273c <__aeabi_d2iz+0x28>
 800275c:	0018      	movs	r0, r3
 800275e:	e7ed      	b.n	800273c <__aeabi_d2iz+0x28>
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <__aeabi_d2iz+0x74>)
 8002762:	9a00      	ldr	r2, [sp, #0]
 8002764:	469c      	mov	ip, r3
 8002766:	0003      	movs	r3, r0
 8002768:	4461      	add	r1, ip
 800276a:	408b      	lsls	r3, r1
 800276c:	40e2      	lsrs	r2, r4
 800276e:	4313      	orrs	r3, r2
 8002770:	e7f1      	b.n	8002756 <__aeabi_d2iz+0x42>
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	000003fe 	.word	0x000003fe
 8002778:	0000041d 	.word	0x0000041d
 800277c:	7fffffff 	.word	0x7fffffff
 8002780:	00000433 	.word	0x00000433
 8002784:	00000413 	.word	0x00000413
 8002788:	fffffbed 	.word	0xfffffbed

0800278c <__aeabi_i2d>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2800      	cmp	r0, #0
 8002790:	d016      	beq.n	80027c0 <__aeabi_i2d+0x34>
 8002792:	17c3      	asrs	r3, r0, #31
 8002794:	18c5      	adds	r5, r0, r3
 8002796:	405d      	eors	r5, r3
 8002798:	0fc4      	lsrs	r4, r0, #31
 800279a:	0028      	movs	r0, r5
 800279c:	f000 f914 	bl	80029c8 <__clzsi2>
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <__aeabi_i2d+0x58>)
 80027a2:	1a1b      	subs	r3, r3, r0
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	280a      	cmp	r0, #10
 80027aa:	dc14      	bgt.n	80027d6 <__aeabi_i2d+0x4a>
 80027ac:	0002      	movs	r2, r0
 80027ae:	002e      	movs	r6, r5
 80027b0:	3215      	adds	r2, #21
 80027b2:	4096      	lsls	r6, r2
 80027b4:	220b      	movs	r2, #11
 80027b6:	1a12      	subs	r2, r2, r0
 80027b8:	40d5      	lsrs	r5, r2
 80027ba:	032d      	lsls	r5, r5, #12
 80027bc:	0b2d      	lsrs	r5, r5, #12
 80027be:	e003      	b.n	80027c8 <__aeabi_i2d+0x3c>
 80027c0:	2400      	movs	r4, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	2500      	movs	r5, #0
 80027c6:	2600      	movs	r6, #0
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	432b      	orrs	r3, r5
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4323      	orrs	r3, r4
 80027d0:	0030      	movs	r0, r6
 80027d2:	0019      	movs	r1, r3
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
 80027d6:	380b      	subs	r0, #11
 80027d8:	4085      	lsls	r5, r0
 80027da:	032d      	lsls	r5, r5, #12
 80027dc:	2600      	movs	r6, #0
 80027de:	0b2d      	lsrs	r5, r5, #12
 80027e0:	e7f2      	b.n	80027c8 <__aeabi_i2d+0x3c>
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	0000041e 	.word	0x0000041e

080027e8 <__aeabi_ui2d>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	1e04      	subs	r4, r0, #0
 80027ec:	d010      	beq.n	8002810 <__aeabi_ui2d+0x28>
 80027ee:	f000 f8eb 	bl	80029c8 <__clzsi2>
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <__aeabi_ui2d+0x44>)
 80027f4:	1a1b      	subs	r3, r3, r0
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	0d5b      	lsrs	r3, r3, #21
 80027fa:	280a      	cmp	r0, #10
 80027fc:	dc0f      	bgt.n	800281e <__aeabi_ui2d+0x36>
 80027fe:	220b      	movs	r2, #11
 8002800:	0021      	movs	r1, r4
 8002802:	1a12      	subs	r2, r2, r0
 8002804:	40d1      	lsrs	r1, r2
 8002806:	3015      	adds	r0, #21
 8002808:	030a      	lsls	r2, r1, #12
 800280a:	4084      	lsls	r4, r0
 800280c:	0b12      	lsrs	r2, r2, #12
 800280e:	e001      	b.n	8002814 <__aeabi_ui2d+0x2c>
 8002810:	2300      	movs	r3, #0
 8002812:	2200      	movs	r2, #0
 8002814:	051b      	lsls	r3, r3, #20
 8002816:	4313      	orrs	r3, r2
 8002818:	0020      	movs	r0, r4
 800281a:	0019      	movs	r1, r3
 800281c:	bd10      	pop	{r4, pc}
 800281e:	0022      	movs	r2, r4
 8002820:	380b      	subs	r0, #11
 8002822:	4082      	lsls	r2, r0
 8002824:	0312      	lsls	r2, r2, #12
 8002826:	2400      	movs	r4, #0
 8002828:	0b12      	lsrs	r2, r2, #12
 800282a:	e7f3      	b.n	8002814 <__aeabi_ui2d+0x2c>
 800282c:	0000041e 	.word	0x0000041e

08002830 <__aeabi_f2d>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	0242      	lsls	r2, r0, #9
 8002834:	0043      	lsls	r3, r0, #1
 8002836:	0fc4      	lsrs	r4, r0, #31
 8002838:	20fe      	movs	r0, #254	@ 0xfe
 800283a:	0e1b      	lsrs	r3, r3, #24
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	0a55      	lsrs	r5, r2, #9
 8002840:	4208      	tst	r0, r1
 8002842:	d00c      	beq.n	800285e <__aeabi_f2d+0x2e>
 8002844:	21e0      	movs	r1, #224	@ 0xe0
 8002846:	0089      	lsls	r1, r1, #2
 8002848:	468c      	mov	ip, r1
 800284a:	076d      	lsls	r5, r5, #29
 800284c:	0b12      	lsrs	r2, r2, #12
 800284e:	4463      	add	r3, ip
 8002850:	051b      	lsls	r3, r3, #20
 8002852:	4313      	orrs	r3, r2
 8002854:	07e4      	lsls	r4, r4, #31
 8002856:	4323      	orrs	r3, r4
 8002858:	0028      	movs	r0, r5
 800285a:	0019      	movs	r1, r3
 800285c:	bd70      	pop	{r4, r5, r6, pc}
 800285e:	2b00      	cmp	r3, #0
 8002860:	d114      	bne.n	800288c <__aeabi_f2d+0x5c>
 8002862:	2d00      	cmp	r5, #0
 8002864:	d01b      	beq.n	800289e <__aeabi_f2d+0x6e>
 8002866:	0028      	movs	r0, r5
 8002868:	f000 f8ae 	bl	80029c8 <__clzsi2>
 800286c:	280a      	cmp	r0, #10
 800286e:	dc1c      	bgt.n	80028aa <__aeabi_f2d+0x7a>
 8002870:	230b      	movs	r3, #11
 8002872:	002a      	movs	r2, r5
 8002874:	1a1b      	subs	r3, r3, r0
 8002876:	40da      	lsrs	r2, r3
 8002878:	0003      	movs	r3, r0
 800287a:	3315      	adds	r3, #21
 800287c:	409d      	lsls	r5, r3
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <__aeabi_f2d+0x88>)
 8002880:	0312      	lsls	r2, r2, #12
 8002882:	1a1b      	subs	r3, r3, r0
 8002884:	055b      	lsls	r3, r3, #21
 8002886:	0b12      	lsrs	r2, r2, #12
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	e7e1      	b.n	8002850 <__aeabi_f2d+0x20>
 800288c:	2d00      	cmp	r5, #0
 800288e:	d009      	beq.n	80028a4 <__aeabi_f2d+0x74>
 8002890:	0b13      	lsrs	r3, r2, #12
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	0312      	lsls	r2, r2, #12
 8002896:	431a      	orrs	r2, r3
 8002898:	076d      	lsls	r5, r5, #29
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <__aeabi_f2d+0x8c>)
 800289c:	e7d8      	b.n	8002850 <__aeabi_f2d+0x20>
 800289e:	2300      	movs	r3, #0
 80028a0:	2200      	movs	r2, #0
 80028a2:	e7d5      	b.n	8002850 <__aeabi_f2d+0x20>
 80028a4:	2200      	movs	r2, #0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <__aeabi_f2d+0x8c>)
 80028a8:	e7d2      	b.n	8002850 <__aeabi_f2d+0x20>
 80028aa:	0003      	movs	r3, r0
 80028ac:	002a      	movs	r2, r5
 80028ae:	3b0b      	subs	r3, #11
 80028b0:	409a      	lsls	r2, r3
 80028b2:	2500      	movs	r5, #0
 80028b4:	e7e3      	b.n	800287e <__aeabi_f2d+0x4e>
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	00000389 	.word	0x00000389
 80028bc:	000007ff 	.word	0x000007ff

080028c0 <__aeabi_d2f>:
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	004b      	lsls	r3, r1, #1
 80028c4:	030f      	lsls	r7, r1, #12
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	4c3b      	ldr	r4, [pc, #236]	@ (80029b8 <__aeabi_d2f+0xf8>)
 80028ca:	0f45      	lsrs	r5, r0, #29
 80028cc:	b083      	sub	sp, #12
 80028ce:	0a7f      	lsrs	r7, r7, #9
 80028d0:	1c5e      	adds	r6, r3, #1
 80028d2:	432f      	orrs	r7, r5
 80028d4:	9000      	str	r0, [sp, #0]
 80028d6:	9101      	str	r1, [sp, #4]
 80028d8:	0fca      	lsrs	r2, r1, #31
 80028da:	00c5      	lsls	r5, r0, #3
 80028dc:	4226      	tst	r6, r4
 80028de:	d00b      	beq.n	80028f8 <__aeabi_d2f+0x38>
 80028e0:	4936      	ldr	r1, [pc, #216]	@ (80029bc <__aeabi_d2f+0xfc>)
 80028e2:	185c      	adds	r4, r3, r1
 80028e4:	2cfe      	cmp	r4, #254	@ 0xfe
 80028e6:	dd13      	ble.n	8002910 <__aeabi_d2f+0x50>
 80028e8:	20ff      	movs	r0, #255	@ 0xff
 80028ea:	2300      	movs	r3, #0
 80028ec:	05c0      	lsls	r0, r0, #23
 80028ee:	4318      	orrs	r0, r3
 80028f0:	07d2      	lsls	r2, r2, #31
 80028f2:	4310      	orrs	r0, r2
 80028f4:	b003      	add	sp, #12
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <__aeabi_d2f+0x42>
 80028fc:	2000      	movs	r0, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	e7f4      	b.n	80028ec <__aeabi_d2f+0x2c>
 8002902:	433d      	orrs	r5, r7
 8002904:	d0f0      	beq.n	80028e8 <__aeabi_d2f+0x28>
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	03db      	lsls	r3, r3, #15
 800290a:	20ff      	movs	r0, #255	@ 0xff
 800290c:	433b      	orrs	r3, r7
 800290e:	e7ed      	b.n	80028ec <__aeabi_d2f+0x2c>
 8002910:	2c00      	cmp	r4, #0
 8002912:	dd14      	ble.n	800293e <__aeabi_d2f+0x7e>
 8002914:	9b00      	ldr	r3, [sp, #0]
 8002916:	00ff      	lsls	r7, r7, #3
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	4183      	sbcs	r3, r0
 800291e:	0f69      	lsrs	r1, r5, #29
 8002920:	433b      	orrs	r3, r7
 8002922:	430b      	orrs	r3, r1
 8002924:	0759      	lsls	r1, r3, #29
 8002926:	d041      	beq.n	80029ac <__aeabi_d2f+0xec>
 8002928:	210f      	movs	r1, #15
 800292a:	4019      	ands	r1, r3
 800292c:	2904      	cmp	r1, #4
 800292e:	d028      	beq.n	8002982 <__aeabi_d2f+0xc2>
 8002930:	3304      	adds	r3, #4
 8002932:	0159      	lsls	r1, r3, #5
 8002934:	d525      	bpl.n	8002982 <__aeabi_d2f+0xc2>
 8002936:	3401      	adds	r4, #1
 8002938:	2300      	movs	r3, #0
 800293a:	b2e0      	uxtb	r0, r4
 800293c:	e7d6      	b.n	80028ec <__aeabi_d2f+0x2c>
 800293e:	0021      	movs	r1, r4
 8002940:	3117      	adds	r1, #23
 8002942:	dbdb      	blt.n	80028fc <__aeabi_d2f+0x3c>
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	201e      	movs	r0, #30
 8002948:	0409      	lsls	r1, r1, #16
 800294a:	4339      	orrs	r1, r7
 800294c:	1b00      	subs	r0, r0, r4
 800294e:	281f      	cmp	r0, #31
 8002950:	dd1b      	ble.n	800298a <__aeabi_d2f+0xca>
 8002952:	2602      	movs	r6, #2
 8002954:	4276      	negs	r6, r6
 8002956:	1b34      	subs	r4, r6, r4
 8002958:	000e      	movs	r6, r1
 800295a:	40e6      	lsrs	r6, r4
 800295c:	0034      	movs	r4, r6
 800295e:	2820      	cmp	r0, #32
 8002960:	d004      	beq.n	800296c <__aeabi_d2f+0xac>
 8002962:	4817      	ldr	r0, [pc, #92]	@ (80029c0 <__aeabi_d2f+0x100>)
 8002964:	4684      	mov	ip, r0
 8002966:	4463      	add	r3, ip
 8002968:	4099      	lsls	r1, r3
 800296a:	430d      	orrs	r5, r1
 800296c:	002b      	movs	r3, r5
 800296e:	1e59      	subs	r1, r3, #1
 8002970:	418b      	sbcs	r3, r1
 8002972:	4323      	orrs	r3, r4
 8002974:	0759      	lsls	r1, r3, #29
 8002976:	d015      	beq.n	80029a4 <__aeabi_d2f+0xe4>
 8002978:	210f      	movs	r1, #15
 800297a:	2400      	movs	r4, #0
 800297c:	4019      	ands	r1, r3
 800297e:	2904      	cmp	r1, #4
 8002980:	d117      	bne.n	80029b2 <__aeabi_d2f+0xf2>
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	b2e0      	uxtb	r0, r4
 8002988:	e7b0      	b.n	80028ec <__aeabi_d2f+0x2c>
 800298a:	4c0e      	ldr	r4, [pc, #56]	@ (80029c4 <__aeabi_d2f+0x104>)
 800298c:	191c      	adds	r4, r3, r4
 800298e:	002b      	movs	r3, r5
 8002990:	40a5      	lsls	r5, r4
 8002992:	40c3      	lsrs	r3, r0
 8002994:	40a1      	lsls	r1, r4
 8002996:	1e68      	subs	r0, r5, #1
 8002998:	4185      	sbcs	r5, r0
 800299a:	4329      	orrs	r1, r5
 800299c:	430b      	orrs	r3, r1
 800299e:	2400      	movs	r4, #0
 80029a0:	0759      	lsls	r1, r3, #29
 80029a2:	d1c1      	bne.n	8002928 <__aeabi_d2f+0x68>
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	2000      	movs	r0, #0
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	e79f      	b.n	80028ec <__aeabi_d2f+0x2c>
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	b2e0      	uxtb	r0, r4
 80029b0:	e79c      	b.n	80028ec <__aeabi_d2f+0x2c>
 80029b2:	3304      	adds	r3, #4
 80029b4:	e7e5      	b.n	8002982 <__aeabi_d2f+0xc2>
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	000007fe 	.word	0x000007fe
 80029bc:	fffffc80 	.word	0xfffffc80
 80029c0:	fffffca2 	.word	0xfffffca2
 80029c4:	fffffc82 	.word	0xfffffc82

080029c8 <__clzsi2>:
 80029c8:	211c      	movs	r1, #28
 80029ca:	2301      	movs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	4298      	cmp	r0, r3
 80029d0:	d301      	bcc.n	80029d6 <__clzsi2+0xe>
 80029d2:	0c00      	lsrs	r0, r0, #16
 80029d4:	3910      	subs	r1, #16
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	4298      	cmp	r0, r3
 80029da:	d301      	bcc.n	80029e0 <__clzsi2+0x18>
 80029dc:	0a00      	lsrs	r0, r0, #8
 80029de:	3908      	subs	r1, #8
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	4298      	cmp	r0, r3
 80029e4:	d301      	bcc.n	80029ea <__clzsi2+0x22>
 80029e6:	0900      	lsrs	r0, r0, #4
 80029e8:	3904      	subs	r1, #4
 80029ea:	a202      	add	r2, pc, #8	@ (adr r2, 80029f4 <__clzsi2+0x2c>)
 80029ec:	5c10      	ldrb	r0, [r2, r0]
 80029ee:	1840      	adds	r0, r0, r1
 80029f0:	4770      	bx	lr
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	02020304 	.word	0x02020304
 80029f8:	01010101 	.word	0x01010101
	...

08002a04 <__clzdi2>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	2900      	cmp	r1, #0
 8002a08:	d103      	bne.n	8002a12 <__clzdi2+0xe>
 8002a0a:	f7ff ffdd 	bl	80029c8 <__clzsi2>
 8002a0e:	3020      	adds	r0, #32
 8002a10:	e002      	b.n	8002a18 <__clzdi2+0x14>
 8002a12:	0008      	movs	r0, r1
 8002a14:	f7ff ffd8 	bl	80029c8 <__clzsi2>
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	@ 0x38
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a22:	f000 fca9 	bl	8003378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a26:	f000 f835 	bl	8002a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a2a:	f000 f967 	bl	8002cfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a2e:	f000 f935 	bl	8002c9c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002a32:	f000 f8a1 	bl	8002b78 <MX_ADC_Init>
  MX_DAC_Init();
 8002a36:	f000 f903 	bl	8002c40 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  pH_Init(&hadc);
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <main+0x6c>)
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f979 	bl	8002d34 <pH_Init>
  pH_uart2(&huart2);
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <main+0x70>)
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f983 	bl	8002d50 <pH_uart2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  float pH_value = Get_pH_value();
 8002a4a:	f000 f98f 	bl	8002d6c <Get_pH_value>
 8002a4e:	1c03      	adds	r3, r0, #0
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34

	  char buffer[50];
	  sprintf(buffer, "pH_value : %f\n\r", pH_value);    /* USER CODE BEGIN 3 */
 8002a52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a54:	f7ff feec 	bl	8002830 <__aeabi_f2d>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	490c      	ldr	r1, [pc, #48]	@ (8002a90 <main+0x74>)
 8002a5e:	0038      	movs	r0, r7
 8002a60:	f003 ff82 	bl	8006968 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 10);
 8002a64:	003b      	movs	r3, r7
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fb4e 	bl	8000108 <strlen>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	0039      	movs	r1, r7
 8002a72:	4806      	ldr	r0, [pc, #24]	@ (8002a8c <main+0x70>)
 8002a74:	230a      	movs	r3, #10
 8002a76:	f002 fadb 	bl	8005030 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002a7a:	23fa      	movs	r3, #250	@ 0xfa
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 fcea 	bl	8003458 <HAL_Delay>
  {
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	e7e0      	b.n	8002a4a <main+0x2e>
 8002a88:	200001f0 	.word	0x200001f0
 8002a8c:	20000260 	.word	0x20000260
 8002a90:	0800a3b8 	.word	0x0800a3b8

08002a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b09d      	sub	sp, #116	@ 0x74
 8002a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9a:	2438      	movs	r4, #56	@ 0x38
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	2338      	movs	r3, #56	@ 0x38
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f003 ffcb 	bl	8006a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aaa:	2324      	movs	r3, #36	@ 0x24
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	0018      	movs	r0, r3
 8002ab0:	2314      	movs	r3, #20
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f003 ffc3 	bl	8006a40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aba:	003b      	movs	r3, r7
 8002abc:	0018      	movs	r0, r3
 8002abe:	2324      	movs	r3, #36	@ 0x24
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f003 ffbc 	bl	8006a40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac8:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <SystemClock_Config+0xdc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <SystemClock_Config+0xe0>)
 8002ace:	401a      	ands	r2, r3
 8002ad0:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <SystemClock_Config+0xdc>)
 8002ad2:	2180      	movs	r1, #128	@ 0x80
 8002ad4:	0109      	lsls	r1, r1, #4
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ada:	0021      	movs	r1, r4
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2202      	movs	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2210      	movs	r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2202      	movs	r2, #2
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2280      	movs	r2, #128	@ 0x80
 8002afe:	0312      	lsls	r2, r2, #12
 8002b00:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	0412      	lsls	r2, r2, #16
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f001 fae7 	bl	80040e0 <HAL_RCC_OscConfig>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002b16:	f000 f907 	bl	8002d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1a:	2124      	movs	r1, #36	@ 0x24
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	220f      	movs	r2, #15
 8002b20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2203      	movs	r2, #3
 8002b26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fea2 	bl	8004888 <HAL_RCC_ClockConfig>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002b48:	f000 f8ee 	bl	8002d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b4c:	003b      	movs	r3, r7
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b52:	003b      	movs	r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b58:	003b      	movs	r3, r7
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f002 f8b8 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d001      	beq.n	8002b68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002b64:	f000 f8e0 	bl	8002d28 <Error_Handler>
  }
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b01d      	add	sp, #116	@ 0x74
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	40007000 	.word	0x40007000
 8002b74:	ffffe7ff 	.word	0xffffe7ff

08002b78 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b7e:	003b      	movs	r3, r7
 8002b80:	0018      	movs	r0, r3
 8002b82:	2308      	movs	r3, #8
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f003 ff5a 	bl	8006a40 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <MX_ADC_Init+0xc4>)
 8002b90:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b98:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002b9a:	2280      	movs	r2, #128	@ 0x80
 8002b9c:	05d2      	lsls	r2, r2, #23
 8002b9e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ba6:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002bac:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bba:	2220      	movs	r2, #32
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bd0:	22c2      	movs	r2, #194	@ 0xc2
 8002bd2:	32ff      	adds	r2, #255	@ 0xff
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bd8:	222c      	movs	r2, #44	@ 0x2c
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002be0:	2204      	movs	r2, #4
 8002be2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fc4e 	bl	80034a0 <HAL_ADC_Init>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002c08:	f000 f88e 	bl	8002d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c0c:	003b      	movs	r3, r7
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c12:	003b      	movs	r3, r7
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	0152      	lsls	r2, r2, #5
 8002c18:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c1a:	003a      	movs	r2, r7
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <MX_ADC_Init+0xc0>)
 8002c1e:	0011      	movs	r1, r2
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 fead 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002c2a:	f000 f87d 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	200001f0 	.word	0x200001f0
 8002c3c:	40012400 	.word	0x40012400

08002c40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c46:	003b      	movs	r3, r7
 8002c48:	0018      	movs	r0, r3
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f003 fef6 	bl	8006a40 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <MX_DAC_Init+0x54>)
 8002c56:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <MX_DAC_Init+0x58>)
 8002c58:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_DAC_Init+0x54>)
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 f851 	bl	8003d04 <HAL_DAC_Init>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8002c66:	f000 f85f 	bl	8002d28 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c6a:	003b      	movs	r3, r7
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c70:	003b      	movs	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c76:	0039      	movs	r1, r7
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_DAC_Init+0x54>)
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f001 f865 	bl	8003d4c <HAL_DAC_ConfigChannel>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8002c86:	f000 f84f 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	2000024c 	.word	0x2000024c
 8002c98:	40007400 	.word	0x40007400

08002c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <MX_USART2_UART_Init+0x5c>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002ca8:	22e1      	movs	r2, #225	@ 0xe1
 8002caa:	0252      	lsls	r2, r2, #9
 8002cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <MX_USART2_UART_Init+0x58>)
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f002 f951 	bl	8004f88 <HAL_UART_Init>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cea:	f000 f81d 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000260 	.word	0x20000260
 8002cf8:	40004400 	.word	0x40004400

08002cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <MX_GPIO_Init+0x28>)
 8002d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <MX_GPIO_Init+0x28>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <MX_GPIO_Init+0x28>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	40021000 	.word	0x40021000

08002d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	e7fd      	b.n	8002d30 <Error_Handler+0x8>

08002d34 <pH_Init>:

ADC_HandleTypeDef *_pH_adc;
UART_HandleTypeDef *_pH_uart2;


void pH_Init(ADC_HandleTypeDef *hadc) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	_pH_adc = hadc;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <pH_Init+0x18>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	200002e8 	.word	0x200002e8

08002d50 <pH_uart2>:

void pH_uart2(ADC_HandleTypeDef *huart2) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	_pH_uart2 = huart2;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <pH_uart2+0x18>)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	200002ec 	.word	0x200002ec

08002d6c <Get_pH_value>:
uint16_t AD_RES = 0;
uint16_t received_data[50];
uint16_t received_data_01[50];

float Get_pH_value()
  {
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b096      	sub	sp, #88	@ 0x58
 8002d70:	af00      	add	r7, sp, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start ADC Conversion
	  HAL_ADC_Start(_pH_adc);
 8002d72:	4b87      	ldr	r3, [pc, #540]	@ (8002f90 <Get_pH_value+0x224>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fd06 	bl	8003788 <HAL_ADC_Start>
	         // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(_pH_adc, 1);
 8002d7c:	4b84      	ldr	r3, [pc, #528]	@ (8002f90 <Get_pH_value+0x224>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fd54 	bl	8003830 <HAL_ADC_PollForConversion>
	  AD_RES = HAL_ADC_GetValue(_pH_adc);
 8002d88:	4b81      	ldr	r3, [pc, #516]	@ (8002f90 <Get_pH_value+0x224>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fdeb 	bl	8003968 <HAL_ADC_GetValue>
 8002d92:	0003      	movs	r3, r0
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	4b7f      	ldr	r3, [pc, #508]	@ (8002f94 <Get_pH_value+0x228>)
 8002d98:	801a      	strh	r2, [r3, #0]
	  TIM2->CCR1 = (AD_RES<<4);
 8002d9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002f94 <Get_pH_value+0x228>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	001a      	movs	r2, r3
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	05db      	lsls	r3, r3, #23
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1);
 8002da8:	2001      	movs	r0, #1
 8002daa:	f000 fb55 	bl	8003458 <HAL_Delay>

	  char arr[20];
	  sprintf(arr, "AnalogRead:%u\n\r", AD_RES);
 8002dae:	4b79      	ldr	r3, [pc, #484]	@ (8002f94 <Get_pH_value+0x228>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	001a      	movs	r2, r3
 8002db4:	4978      	ldr	r1, [pc, #480]	@ (8002f98 <Get_pH_value+0x22c>)
 8002db6:	2528      	movs	r5, #40	@ 0x28
 8002db8:	197b      	adds	r3, r7, r5
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f003 fdd4 	bl	8006968 <siprintf>
	  HAL_UART_Transmit(_pH_uart2,(uint8_t*)arr,strlen(arr),10);
 8002dc0:	4b76      	ldr	r3, [pc, #472]	@ (8002f9c <Get_pH_value+0x230>)
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	197b      	adds	r3, r7, r5
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7fd f99e 	bl	8000108 <strlen>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	1979      	adds	r1, r7, r5
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	0020      	movs	r0, r4
 8002dd6:	f002 f92b 	bl	8005030 <HAL_UART_Transmit>

	  char buffer[10];
	  for(int i = 0; i <= 9; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dde:	e042      	b.n	8002e66 <Get_pH_value+0xfa>
	  {
		  HAL_ADC_Start(_pH_adc);
 8002de0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f90 <Get_pH_value+0x224>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 fccf 	bl	8003788 <HAL_ADC_Start>
		         // Poll ADC1 Perihperal & TimeOut = 1mSec
		  HAL_ADC_PollForConversion(_pH_adc, 1);
 8002dea:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <Get_pH_value+0x224>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fd1d 	bl	8003830 <HAL_ADC_PollForConversion>
		  AD_RES = HAL_ADC_GetValue(_pH_adc);
 8002df6:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <Get_pH_value+0x224>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fdb4 	bl	8003968 <HAL_ADC_GetValue>
 8002e00:	0003      	movs	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <Get_pH_value+0x228>)
 8002e06:	801a      	strh	r2, [r3, #0]
		  TIM2->CCR1 = (AD_RES<<4);
 8002e08:	4b62      	ldr	r3, [pc, #392]	@ (8002f94 <Get_pH_value+0x228>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 fb1e 	bl	8003458 <HAL_Delay>
		  received_data[i] = AD_RES;
 8002e1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002f94 <Get_pH_value+0x228>)
 8002e1e:	8819      	ldrh	r1, [r3, #0]
 8002e20:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa0 <Get_pH_value+0x234>)
 8002e22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e24:	0052      	lsls	r2, r2, #1
 8002e26:	52d1      	strh	r1, [r2, r3]
		  sprintf(buffer, "Received data [%d] %d \r \n", i,  received_data[i]);
 8002e28:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <Get_pH_value+0x234>)
 8002e2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	5ad3      	ldrh	r3, [r2, r3]
 8002e30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e32:	495c      	ldr	r1, [pc, #368]	@ (8002fa4 <Get_pH_value+0x238>)
 8002e34:	251c      	movs	r5, #28
 8002e36:	1978      	adds	r0, r7, r5
 8002e38:	f003 fd96 	bl	8006968 <siprintf>
		  HAL_UART_Transmit(_pH_uart2, (uint16_t *)buffer, strlen(buffer), 10000);
 8002e3c:	4b57      	ldr	r3, [pc, #348]	@ (8002f9c <Get_pH_value+0x230>)
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	197b      	adds	r3, r7, r5
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7fd f960 	bl	8000108 <strlen>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b56      	ldr	r3, [pc, #344]	@ (8002fa8 <Get_pH_value+0x23c>)
 8002e4e:	1979      	adds	r1, r7, r5
 8002e50:	0020      	movs	r0, r4
 8002e52:	f002 f8ed 	bl	8005030 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8002e56:	23fa      	movs	r3, #250	@ 0xfa
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fafc 	bl	8003458 <HAL_Delay>
	  for(int i = 0; i <= 9; i++)
 8002e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e62:	3301      	adds	r3, #1
 8002e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	ddb9      	ble.n	8002de0 <Get_pH_value+0x74>
	  }



	  uint16_t temp = 0;
 8002e6c:	2342      	movs	r3, #66	@ 0x42
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2200      	movs	r2, #0
 8002e72:	801a      	strh	r2, [r3, #0]
	  char buffer_01[10];
	  for(int i=0;i<9;i++)        //sort the analog from small to large
 8002e74:	2300      	movs	r3, #0
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e78:	e035      	b.n	8002ee6 <Get_pH_value+0x17a>
	    {
	      for(int j=i+1;j<10;j++)
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e80:	e021      	b.n	8002ec6 <Get_pH_value+0x15a>
	      {
	        if( received_data[i] > received_data[j])
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <Get_pH_value+0x234>)
 8002e84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e86:	0052      	lsls	r2, r2, #1
 8002e88:	5ad2      	ldrh	r2, [r2, r3]
 8002e8a:	4b45      	ldr	r3, [pc, #276]	@ (8002fa0 <Get_pH_value+0x234>)
 8002e8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002e8e:	0049      	lsls	r1, r1, #1
 8002e90:	5acb      	ldrh	r3, [r1, r3]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d914      	bls.n	8002ec0 <Get_pH_value+0x154>
	        {
	          temp= received_data[i] ;
 8002e96:	2042      	movs	r0, #66	@ 0x42
 8002e98:	183b      	adds	r3, r7, r0
 8002e9a:	4a41      	ldr	r2, [pc, #260]	@ (8002fa0 <Get_pH_value+0x234>)
 8002e9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002e9e:	0049      	lsls	r1, r1, #1
 8002ea0:	5a8a      	ldrh	r2, [r1, r2]
 8002ea2:	801a      	strh	r2, [r3, #0]
	          received_data[i] = received_data[j];
 8002ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa0 <Get_pH_value+0x234>)
 8002ea6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	5ad1      	ldrh	r1, [r2, r3]
 8002eac:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <Get_pH_value+0x234>)
 8002eae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002eb0:	0052      	lsls	r2, r2, #1
 8002eb2:	52d1      	strh	r1, [r2, r3]
	          received_data[j] = temp;
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <Get_pH_value+0x234>)
 8002eb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eb8:	0052      	lsls	r2, r2, #1
 8002eba:	1839      	adds	r1, r7, r0
 8002ebc:	8809      	ldrh	r1, [r1, #0]
 8002ebe:	52d1      	strh	r1, [r2, r3]
	      for(int j=i+1;j<10;j++)
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	ddda      	ble.n	8002e82 <Get_pH_value+0x116>
	        }
	      }
		  sprintf(buffer, "Ascending received data [%d] %d \r \n", i,  received_data[i]);
 8002ecc:	4b34      	ldr	r3, [pc, #208]	@ (8002fa0 <Get_pH_value+0x234>)
 8002ece:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ed0:	0052      	lsls	r2, r2, #1
 8002ed2:	5ad3      	ldrh	r3, [r2, r3]
 8002ed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ed6:	4935      	ldr	r1, [pc, #212]	@ (8002fac <Get_pH_value+0x240>)
 8002ed8:	201c      	movs	r0, #28
 8002eda:	1838      	adds	r0, r7, r0
 8002edc:	f003 fd44 	bl	8006968 <siprintf>
	  for(int i=0;i<9;i++)        //sort the analog from small to large
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	ddc6      	ble.n	8002e7a <Get_pH_value+0x10e>
		  //HAL_UART_Transmit(&huart2, (uint16_t *)buffer_01, strlen(buffer_01), 1000);
	    }


	  uint16_t avg_value = 0;
 8002eec:	234a      	movs	r3, #74	@ 0x4a
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	801a      	strh	r2, [r3, #0]
	  for(int i = 2; i < 8; i++)
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef8:	e00c      	b.n	8002f14 <Get_pH_value+0x1a8>
	  {
		  avg_value = avg_value + received_data[i];
 8002efa:	4b29      	ldr	r3, [pc, #164]	@ (8002fa0 <Get_pH_value+0x234>)
 8002efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	5ad1      	ldrh	r1, [r2, r3]
 8002f02:	224a      	movs	r2, #74	@ 0x4a
 8002f04:	18bb      	adds	r3, r7, r2
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	188a      	adds	r2, r1, r2
 8002f0c:	801a      	strh	r2, [r3, #0]
	  for(int i = 2; i < 8; i++)
 8002f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f10:	3301      	adds	r3, #1
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	ddef      	ble.n	8002efa <Get_pH_value+0x18e>
	  }

	  float phValue = (float)avg_value*5.0/4096/6;
 8002f1a:	234a      	movs	r3, #74	@ 0x4a
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd fd87 	bl	8000a34 <__aeabi_ui2f>
 8002f26:	1c03      	adds	r3, r0, #0
 8002f28:	1c18      	adds	r0, r3, #0
 8002f2a:	f7ff fc81 	bl	8002830 <__aeabi_f2d>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb0 <Get_pH_value+0x244>)
 8002f32:	f7fe fd69 	bl	8001a08 <__aeabi_dmul>
 8002f36:	0002      	movs	r2, r0
 8002f38:	000b      	movs	r3, r1
 8002f3a:	0010      	movs	r0, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb4 <Get_pH_value+0x248>)
 8002f42:	f7fe f91d 	bl	8001180 <__aeabi_ddiv>
 8002f46:	0002      	movs	r2, r0
 8002f48:	000b      	movs	r3, r1
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <Get_pH_value+0x24c>)
 8002f52:	f7fe f915 	bl	8001180 <__aeabi_ddiv>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	f7ff fcaf 	bl	80028c0 <__aeabi_d2f>
 8002f62:	1c03      	adds	r3, r0, #0
 8002f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  phValue = 3.5 * phValue;
 8002f66:	4915      	ldr	r1, [pc, #84]	@ (8002fbc <Get_pH_value+0x250>)
 8002f68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f6a:	f7fd fc25 	bl	80007b8 <__aeabi_fmul>
 8002f6e:	1c03      	adds	r3, r0, #0
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  char buffer_02[10];
	  sprintf(buffer_02, "Received pH value: %f \r \n", phValue);
 8002f72:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f74:	f7ff fc5c 	bl	8002830 <__aeabi_f2d>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	4910      	ldr	r1, [pc, #64]	@ (8002fc0 <Get_pH_value+0x254>)
 8002f7e:	1d38      	adds	r0, r7, #4
 8002f80:	f003 fcf2 	bl	8006968 <siprintf>
		  sprintf(buffer, "Received data [%d] %d \r \n", j,  received_data[j]);
		  HAL_UART_Transmit(&huart2, (uint16_t *)buffer_01, strlen(buffer_01), 1000);
	  }

*/
	  return phValue;
 8002f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  }
 8002f86:	1c18      	adds	r0, r3, #0
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b016      	add	sp, #88	@ 0x58
 8002f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	200002e8 	.word	0x200002e8
 8002f94:	200002f0 	.word	0x200002f0
 8002f98:	0800a3c8 	.word	0x0800a3c8
 8002f9c:	200002ec 	.word	0x200002ec
 8002fa0:	200002f4 	.word	0x200002f4
 8002fa4:	0800a3d8 	.word	0x0800a3d8
 8002fa8:	00002710 	.word	0x00002710
 8002fac:	0800a3f4 	.word	0x0800a3f4
 8002fb0:	40140000 	.word	0x40140000
 8002fb4:	40b00000 	.word	0x40b00000
 8002fb8:	40180000 	.word	0x40180000
 8002fbc:	40600000 	.word	0x40600000
 8002fc0:	0800a418 	.word	0x0800a418

08002fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_MspInit+0x24>)
 8002fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_MspInit+0x24>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_MspInit+0x24>)
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_MspInit+0x24>)
 8002fda:	2180      	movs	r1, #128	@ 0x80
 8002fdc:	0549      	lsls	r1, r1, #21
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	240c      	movs	r4, #12
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2314      	movs	r3, #20
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f003 fd1e 	bl	8006a40 <memset>
  if(hadc->Instance==ADC1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a14      	ldr	r2, [pc, #80]	@ (800305c <HAL_ADC_MspInit+0x70>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d122      	bne.n	8003054 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_ADC_MspInit+0x74>)
 8003010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_ADC_MspInit+0x74>)
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	0089      	lsls	r1, r1, #2
 8003018:	430a      	orrs	r2, r1
 800301a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301c:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_ADC_MspInit+0x74>)
 800301e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_ADC_MspInit+0x74>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <HAL_ADC_MspInit+0x74>)
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	2201      	movs	r2, #1
 800302e:	4013      	ands	r3, r2
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003034:	193b      	adds	r3, r7, r4
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800303a:	193b      	adds	r3, r7, r4
 800303c:	2203      	movs	r2, #3
 800303e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	193b      	adds	r3, r7, r4
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	193a      	adds	r2, r7, r4
 8003048:	23a0      	movs	r3, #160	@ 0xa0
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fec8 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b009      	add	sp, #36	@ 0x24
 800305a:	bd90      	pop	{r4, r7, pc}
 800305c:	40012400 	.word	0x40012400
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	240c      	movs	r4, #12
 800306e:	193b      	adds	r3, r7, r4
 8003070:	0018      	movs	r0, r3
 8003072:	2314      	movs	r3, #20
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f003 fce2 	bl	8006a40 <memset>
  if(hdac->Instance==DAC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <HAL_DAC_MspInit+0x70>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d122      	bne.n	80030cc <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003086:	4b14      	ldr	r3, [pc, #80]	@ (80030d8 <HAL_DAC_MspInit+0x74>)
 8003088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800308a:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <HAL_DAC_MspInit+0x74>)
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	0589      	lsls	r1, r1, #22
 8003090:	430a      	orrs	r2, r1
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <HAL_DAC_MspInit+0x74>)
 8003096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003098:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <HAL_DAC_MspInit+0x74>)
 800309a:	2101      	movs	r1, #1
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030a0:	4b0d      	ldr	r3, [pc, #52]	@ (80030d8 <HAL_DAC_MspInit+0x74>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	2220      	movs	r2, #32
 80030b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	2203      	movs	r2, #3
 80030b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030be:	193a      	adds	r2, r7, r4
 80030c0:	23a0      	movs	r3, #160	@ 0xa0
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	0011      	movs	r1, r2
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fe8c 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b009      	add	sp, #36	@ 0x24
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	40007400 	.word	0x40007400
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	240c      	movs	r4, #12
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	0018      	movs	r0, r3
 80030ea:	2314      	movs	r3, #20
 80030ec:	001a      	movs	r2, r3
 80030ee:	2100      	movs	r1, #0
 80030f0:	f003 fca6 	bl	8006a40 <memset>
  if(huart->Instance==USART2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_UART_MspInit+0x80>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d129      	bne.n	8003152 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030fe:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <HAL_UART_MspInit+0x84>)
 8003100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003102:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <HAL_UART_MspInit+0x84>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	0289      	lsls	r1, r1, #10
 8003108:	430a      	orrs	r2, r1
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <HAL_UART_MspInit+0x84>)
 800310e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_UART_MspInit+0x84>)
 8003112:	2101      	movs	r1, #1
 8003114:	430a      	orrs	r2, r1
 8003116:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_UART_MspInit+0x84>)
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8003124:	0021      	movs	r1, r4
 8003126:	187b      	adds	r3, r7, r1
 8003128:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <HAL_UART_MspInit+0x88>)
 800312a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2202      	movs	r2, #2
 8003130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2203      	movs	r2, #3
 800313c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2204      	movs	r2, #4
 8003142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	187a      	adds	r2, r7, r1
 8003146:	23a0      	movs	r3, #160	@ 0xa0
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fe49 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b009      	add	sp, #36	@ 0x24
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	40004400 	.word	0x40004400
 8003160:	40021000 	.word	0x40021000
 8003164:	00008004 	.word	0x00008004

08003168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	e7fd      	b.n	800316c <NMI_Handler+0x4>

08003170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	e7fd      	b.n	8003174 <HardFault_Handler+0x4>

08003178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003190:	f000 f946 	bl	8003420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	af00      	add	r7, sp, #0
  return 1;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <_kill>:

int _kill(int pid, int sig)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b0:	f003 fca0 	bl	8006af4 <__errno>
 80031b4:	0003      	movs	r3, r0
 80031b6:	2216      	movs	r2, #22
 80031b8:	601a      	str	r2, [r3, #0]
  return -1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	425b      	negs	r3, r3
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b002      	add	sp, #8
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_exit>:

void _exit (int status)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ce:	2301      	movs	r3, #1
 80031d0:	425a      	negs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0011      	movs	r1, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff ffe5 	bl	80031a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e7fd      	b.n	80031dc <_exit+0x16>

080031e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f2:	e000      	b.n	80031f6 <_read+0x16>
 80031f4:	bf00      	nop
 80031f6:	0001      	movs	r1, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbf0      	blt.n	80031f2 <_read+0x12>
  }

  return len;
 8003210:	687b      	ldr	r3, [r7, #4]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b006      	add	sp, #24
 8003218:	bd80      	pop	{r7, pc}

0800321a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e009      	b.n	8003240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	60ba      	str	r2, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	0018      	movs	r0, r3
 8003236:	e000      	b.n	800323a <_write+0x20>
 8003238:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf1      	blt.n	800322c <_write+0x12>
  }
  return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b006      	add	sp, #24
 8003250:	bd80      	pop	{r7, pc}

08003252 <_close>:

int _close(int file)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325a:	2301      	movs	r3, #1
 800325c:	425b      	negs	r3, r3
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}

08003266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	0192      	lsls	r2, r2, #6
 8003276:	605a      	str	r2, [r3, #4]
  return 0;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}

08003282 <_isatty>:

int _isatty(int file)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <_sbrk+0x5c>)
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <_sbrk+0x60>)
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c0:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <_sbrk+0x64>)
 80032ca:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <_sbrk+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032dc:	f003 fc0a 	bl	8006af4 <__errno>
 80032e0:	0003      	movs	r3, r0
 80032e2:	220c      	movs	r2, #12
 80032e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	425b      	negs	r3, r3
 80032ea:	e009      	b.n	8003300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <_sbrk+0x64>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f2:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	18d2      	adds	r2, r2, r3
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <_sbrk+0x64>)
 80032fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b006      	add	sp, #24
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20005000 	.word	0x20005000
 800330c:	00000400 	.word	0x00000400
 8003310:	20000358 	.word	0x20000358
 8003314:	200004b0 	.word	0x200004b0

08003318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003324:	480d      	ldr	r0, [pc, #52]	@ (800335c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003326:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003328:	f7ff fff6 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800332c:	480c      	ldr	r0, [pc, #48]	@ (8003360 <LoopForever+0x6>)
  ldr r1, =_edata
 800332e:	490d      	ldr	r1, [pc, #52]	@ (8003364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003330:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <LoopForever+0xe>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003334:	e002      	b.n	800333c <LoopCopyDataInit>

08003336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333a:	3304      	adds	r3, #4

0800333c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800333c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003340:	d3f9      	bcc.n	8003336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003344:	4c0a      	ldr	r4, [pc, #40]	@ (8003370 <LoopForever+0x16>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003348:	e001      	b.n	800334e <LoopFillZerobss>

0800334a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800334c:	3204      	adds	r2, #4

0800334e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003350:	d3fb      	bcc.n	800334a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003352:	f003 fbd5 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003356:	f7ff fb61 	bl	8002a1c <main>

0800335a <LoopForever>:

LoopForever:
    b LoopForever
 800335a:	e7fe      	b.n	800335a <LoopForever>
   ldr   r0, =_estack
 800335c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003364:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003368:	0800a920 	.word	0x0800a920
  ldr r2, =_sbss
 800336c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003370:	200004ac 	.word	0x200004ac

08003374 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003374:	e7fe      	b.n	8003374 <ADC1_COMP_IRQHandler>
	...

08003378 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800337e:	1dfb      	adds	r3, r7, #7
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_Init+0x3c>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <HAL_Init+0x3c>)
 800338a:	2140      	movs	r1, #64	@ 0x40
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003390:	2000      	movs	r0, #0
 8003392:	f000 f811 	bl	80033b8 <HAL_InitTick>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d003      	beq.n	80033a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e001      	b.n	80033a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a2:	f7ff fe0f 	bl	8002fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	40022000 	.word	0x40022000

080033b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <HAL_InitTick+0x5c>)
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <HAL_InitTick+0x60>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	0019      	movs	r1, r3
 80033ca:	23fa      	movs	r3, #250	@ 0xfa
 80033cc:	0098      	lsls	r0, r3, #2
 80033ce:	f7fc feb7 	bl	8000140 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	0019      	movs	r1, r3
 80033d6:	0020      	movs	r0, r4
 80033d8:	f7fc feb2 	bl	8000140 <__udivsi3>
 80033dc:	0003      	movs	r3, r0
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 fc83 	bl	8003cea <HAL_SYSTICK_Config>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e00f      	b.n	800340c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d80b      	bhi.n	800340a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	2301      	movs	r3, #1
 80033f6:	425b      	negs	r3, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 fc60 	bl	8003cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_InitTick+0x64>)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b003      	add	sp, #12
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	20000000 	.word	0x20000000
 8003418:	20000008 	.word	0x20000008
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_IncTick+0x1c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	001a      	movs	r2, r3
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_IncTick+0x20>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	18d2      	adds	r2, r2, r3
 8003430:	4b03      	ldr	r3, [pc, #12]	@ (8003440 <HAL_IncTick+0x20>)
 8003432:	601a      	str	r2, [r3, #0]
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	20000008 	.word	0x20000008
 8003440:	2000035c 	.word	0x2000035c

08003444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  return uwTick;
 8003448:	4b02      	ldr	r3, [pc, #8]	@ (8003454 <HAL_GetTick+0x10>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	2000035c 	.word	0x2000035c

08003458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff fff0 	bl	8003444 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	d005      	beq.n	800347e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003472:	4b0a      	ldr	r3, [pc, #40]	@ (800349c <HAL_Delay+0x44>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	001a      	movs	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	189b      	adds	r3, r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	f7ff ffe0 	bl	8003444 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	429a      	cmp	r2, r3
 800348e:	d8f7      	bhi.n	8003480 <HAL_Delay+0x28>
  {
  }
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b004      	add	sp, #16
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	20000008 	.word	0x20000008

080034a0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e159      	b.n	8003766 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2250      	movs	r2, #80	@ 0x50
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff fd8e 	bl	8002fec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	2210      	movs	r2, #16
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d005      	beq.n	80034e8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2204      	movs	r2, #4
 80034e4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034e6:	d00b      	beq.n	8003500 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	2210      	movs	r2, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2250      	movs	r2, #80	@ 0x50
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e132      	b.n	8003766 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	4a9a      	ldr	r2, [pc, #616]	@ (8003770 <HAL_ADC_Init+0x2d0>)
 8003506:	4013      	ands	r3, r2
 8003508:	2202      	movs	r2, #2
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	2b01      	cmp	r3, #1
 800351c:	d108      	bne.n	8003530 <HAL_ADC_Init+0x90>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_ADC_Init+0x90>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_ADC_Init+0x92>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d149      	bne.n	80035ca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	23c0      	movs	r3, #192	@ 0xc0
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	429a      	cmp	r2, r3
 8003540:	d00b      	beq.n	800355a <HAL_ADC_Init+0xba>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	429a      	cmp	r2, r3
 800354c:	d005      	beq.n	800355a <HAL_ADC_Init+0xba>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	429a      	cmp	r2, r3
 8003558:	d111      	bne.n	800357e <HAL_ADC_Init+0xde>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	0892      	lsrs	r2, r2, #2
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6919      	ldr	r1, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	e014      	b.n	80035a8 <HAL_ADC_Init+0x108>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	0892      	lsrs	r2, r2, #2
 800358c:	611a      	str	r2, [r3, #16]
 800358e:	4b79      	ldr	r3, [pc, #484]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b78      	ldr	r3, [pc, #480]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 8003594:	4978      	ldr	r1, [pc, #480]	@ (8003778 <HAL_ADC_Init+0x2d8>)
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	4b76      	ldr	r3, [pc, #472]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4b74      	ldr	r3, [pc, #464]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2118      	movs	r1, #24
 80035b4:	438a      	bics	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68d9      	ldr	r1, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80035ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b69      	ldr	r3, [pc, #420]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 80035d0:	496a      	ldr	r1, [pc, #424]	@ (800377c <HAL_ADC_Init+0x2dc>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80035d6:	4b67      	ldr	r3, [pc, #412]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	065a      	lsls	r2, r3, #25
 80035e0:	4b64      	ldr	r3, [pc, #400]	@ (8003774 <HAL_ADC_Init+0x2d4>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	2380      	movs	r3, #128	@ 0x80
 80035ee:	055b      	lsls	r3, r3, #21
 80035f0:	4013      	ands	r3, r2
 80035f2:	d108      	bne.n	8003606 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2180      	movs	r1, #128	@ 0x80
 8003600:	0549      	lsls	r1, r1, #21
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	495b      	ldr	r1, [pc, #364]	@ (8003780 <HAL_ADC_Init+0x2e0>)
 8003612:	400a      	ands	r2, r1
 8003614:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68d9      	ldr	r1, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d101      	bne.n	800362c <HAL_ADC_Init+0x18c>
 8003628:	2304      	movs	r3, #4
 800362a:	e000      	b.n	800362e <HAL_ADC_Init+0x18e>
 800362c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800362e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2020      	movs	r0, #32
 8003634:	5c1b      	ldrb	r3, [r3, r0]
 8003636:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003638:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	202c      	movs	r0, #44	@ 0x2c
 800363e:	5c1b      	ldrb	r3, [r3, r0]
 8003640:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003642:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003648:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003650:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003658:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003666:	23c2      	movs	r3, #194	@ 0xc2
 8003668:	33ff      	adds	r3, #255	@ 0xff
 800366a:	429a      	cmp	r2, r3
 800366c:	d00b      	beq.n	8003686 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68d9      	ldr	r1, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2221      	movs	r2, #33	@ 0x21
 800368a:	5c9b      	ldrb	r3, [r3, r2]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11a      	bne.n	80036c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	0249      	lsls	r1, r1, #9
 80036a8:	430a      	orrs	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e00b      	b.n	80036c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	2220      	movs	r2, #32
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	2201      	movs	r2, #1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d11f      	bne.n	800370e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	492a      	ldr	r1, [pc, #168]	@ (8003784 <HAL_ADC_Init+0x2e4>)
 80036da:	400a      	ands	r2, r1
 80036dc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6919      	ldr	r1, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80036ec:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80036f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2101      	movs	r1, #1
 8003708:	430a      	orrs	r2, r1
 800370a:	611a      	str	r2, [r3, #16]
 800370c:	e00e      	b.n	800372c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2201      	movs	r2, #1
 8003716:	4013      	ands	r3, r2
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2101      	movs	r1, #1
 8003728:	438a      	bics	r2, r1
 800372a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2107      	movs	r1, #7
 8003738:	438a      	bics	r2, r1
 800373a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6959      	ldr	r1, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	2203      	movs	r2, #3
 800375a:	4393      	bics	r3, r2
 800375c:	2201      	movs	r2, #1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	fffffefd 	.word	0xfffffefd
 8003774:	40012708 	.word	0x40012708
 8003778:	ffc3ffff 	.word	0xffc3ffff
 800377c:	fdffffff 	.word	0xfdffffff
 8003780:	fffe0219 	.word	0xfffe0219
 8003784:	fffffc03 	.word	0xfffffc03

08003788 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003790:	230f      	movs	r3, #15
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2204      	movs	r2, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	d138      	bne.n	8003816 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2250      	movs	r2, #80	@ 0x50
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_Start+0x2a>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e038      	b.n	8003824 <HAL_ADC_Start+0x9c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2250      	movs	r2, #80	@ 0x50
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d007      	beq.n	80037d2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037c2:	230f      	movs	r3, #15
 80037c4:	18fc      	adds	r4, r7, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f95f 	bl	8003a8c <ADC_Enable>
 80037ce:	0003      	movs	r3, r0
 80037d0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037d2:	230f      	movs	r3, #15
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d120      	bne.n	800381e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	4a12      	ldr	r2, [pc, #72]	@ (800382c <HAL_ADC_Start+0xa4>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	2280      	movs	r2, #128	@ 0x80
 80037e6:	0052      	lsls	r2, r2, #1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2250      	movs	r2, #80	@ 0x50
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	221c      	movs	r2, #28
 8003802:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2104      	movs	r1, #4
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e003      	b.n	800381e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003816:	230f      	movs	r3, #15
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800381e:	230f      	movs	r3, #15
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	781b      	ldrb	r3, [r3, #0]
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b005      	add	sp, #20
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	fffff0fe 	.word	0xfffff0fe

08003830 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d102      	bne.n	8003850 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800384a:	2308      	movs	r3, #8
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e014      	b.n	800387a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	4013      	ands	r3, r2
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10b      	bne.n	8003876 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	2220      	movs	r2, #32
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2250      	movs	r2, #80	@ 0x50
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e072      	b.n	800395c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003876:	230c      	movs	r3, #12
 8003878:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800387a:	f7ff fde3 	bl	8003444 <HAL_GetTick>
 800387e:	0003      	movs	r3, r0
 8003880:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003882:	e01f      	b.n	80038c4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	d01c      	beq.n	80038c4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_ADC_PollForConversion+0x70>
 8003890:	f7ff fdd8 	bl	8003444 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d211      	bcs.n	80038c4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	2204      	movs	r2, #4
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2250      	movs	r2, #80	@ 0x50
 80038bc:	2100      	movs	r1, #0
 80038be:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e04b      	b.n	800395c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	d0d9      	beq.n	8003884 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	23c0      	movs	r3, #192	@ 0xc0
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	d12e      	bne.n	800394a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d129      	bne.n	800394a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2208      	movs	r2, #8
 80038fe:	4013      	ands	r3, r2
 8003900:	2b08      	cmp	r3, #8
 8003902:	d122      	bne.n	800394a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2204      	movs	r2, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d110      	bne.n	8003932 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	210c      	movs	r1, #12
 800391c:	438a      	bics	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	4a0f      	ldr	r2, [pc, #60]	@ (8003964 <HAL_ADC_PollForConversion+0x134>)
 8003926:	4013      	ands	r3, r2
 8003928:	2201      	movs	r2, #1
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003930:	e00b      	b.n	800394a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	2220      	movs	r2, #32
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	2201      	movs	r2, #1
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	220c      	movs	r2, #12
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fffffefe 	.word	0xfffffefe

08003968 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2250      	movs	r2, #80	@ 0x50
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e06c      	b.n	8003a72 <HAL_ADC_ConfigChannel+0xf2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2250      	movs	r2, #80	@ 0x50
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2204      	movs	r2, #4
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b0:	2220      	movs	r2, #32
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2250      	movs	r2, #80	@ 0x50
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e056      	b.n	8003a72 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <HAL_ADC_ConfigChannel+0xfc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d028      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	035b      	lsls	r3, r3, #13
 80039da:	0b5a      	lsrs	r2, r3, #13
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	02db      	lsls	r3, r3, #11
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80039f0:	4b23      	ldr	r3, [pc, #140]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 80039f6:	2180      	movs	r1, #128	@ 0x80
 80039f8:	0409      	lsls	r1, r1, #16
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80039fe:	200a      	movs	r0, #10
 8003a00:	f000 f8ac 	bl	8003b5c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	@ 0x80
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d02b      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a16:	2180      	movs	r1, #128	@ 0x80
 8003a18:	03c9      	lsls	r1, r1, #15
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e023      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	035b      	lsls	r3, r3, #13
 8003a2c:	0b5b      	lsrs	r3, r3, #13
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	400a      	ands	r2, r1
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	@ 0x80
 8003a3e:	02db      	lsls	r3, r3, #11
 8003a40:	4013      	ands	r3, r2
 8003a42:	d005      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a4a:	490e      	ldr	r1, [pc, #56]	@ (8003a84 <HAL_ADC_ConfigChannel+0x104>)
 8003a4c:	400a      	ands	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d005      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <HAL_ADC_ConfigChannel+0x100>)
 8003a62:	4909      	ldr	r1, [pc, #36]	@ (8003a88 <HAL_ADC_ConfigChannel+0x108>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2250      	movs	r2, #80	@ 0x50
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b002      	add	sp, #8
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	00001001 	.word	0x00001001
 8003a80:	40012708 	.word	0x40012708
 8003a84:	ff7fffff 	.word	0xff7fffff
 8003a88:	ffbfffff 	.word	0xffbfffff

08003a8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d108      	bne.n	8003ab8 <ADC_Enable+0x2c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <ADC_Enable+0x2c>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <ADC_Enable+0x2e>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d146      	bne.n	8003b4c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <ADC_Enable+0xcc>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	2210      	movs	r2, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	2201      	movs	r2, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e033      	b.n	8003b4e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f000 f830 	bl	8003b5c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afc:	f7ff fca2 	bl	8003444 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b04:	e01b      	b.n	8003b3e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b06:	f7ff fc9d 	bl	8003444 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b0a      	cmp	r3, #10
 8003b12:	d914      	bls.n	8003b3e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d00d      	beq.n	8003b3e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b26:	2210      	movs	r2, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	2201      	movs	r2, #1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d1dc      	bne.n	8003b06 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	80000017 	.word	0x80000017

08003b5c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <ADC_DelayMicroSecond+0x38>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	490b      	ldr	r1, [pc, #44]	@ (8003b98 <ADC_DelayMicroSecond+0x3c>)
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fc fae8 	bl	8000140 <__udivsi3>
 8003b70:	0003      	movs	r3, r0
 8003b72:	001a      	movs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4353      	muls	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003b7a:	e002      	b.n	8003b82 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f9      	bne.n	8003b7c <ADC_DelayMicroSecond+0x20>
  }
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000000 	.word	0x20000000
 8003b98:	000f4240 	.word	0x000f4240

08003b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	1dfb      	adds	r3, r7, #7
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bb0:	d828      	bhi.n	8003c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c70 <__NVIC_SetPriority+0xd4>)
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	33c0      	adds	r3, #192	@ 0xc0
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	589b      	ldr	r3, [r3, r2]
 8003bc2:	1dfa      	adds	r2, r7, #7
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	2203      	movs	r2, #3
 8003bca:	400a      	ands	r2, r1
 8003bcc:	00d2      	lsls	r2, r2, #3
 8003bce:	21ff      	movs	r1, #255	@ 0xff
 8003bd0:	4091      	lsls	r1, r2
 8003bd2:	000a      	movs	r2, r1
 8003bd4:	43d2      	mvns	r2, r2
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	401a      	ands	r2, r3
 8003be2:	1dfb      	adds	r3, r7, #7
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	0018      	movs	r0, r3
 8003be8:	2303      	movs	r3, #3
 8003bea:	4003      	ands	r3, r0
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bf0:	481f      	ldr	r0, [pc, #124]	@ (8003c70 <__NVIC_SetPriority+0xd4>)
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	33c0      	adds	r3, #192	@ 0xc0
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c02:	e031      	b.n	8003c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c04:	4a1b      	ldr	r2, [pc, #108]	@ (8003c74 <__NVIC_SetPriority+0xd8>)
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	400b      	ands	r3, r1
 8003c10:	3b08      	subs	r3, #8
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3306      	adds	r3, #6
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1dfa      	adds	r2, r7, #7
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	0011      	movs	r1, r2
 8003c24:	2203      	movs	r2, #3
 8003c26:	400a      	ands	r2, r1
 8003c28:	00d2      	lsls	r2, r2, #3
 8003c2a:	21ff      	movs	r1, #255	@ 0xff
 8003c2c:	4091      	lsls	r1, r2
 8003c2e:	000a      	movs	r2, r1
 8003c30:	43d2      	mvns	r2, r2
 8003c32:	401a      	ands	r2, r3
 8003c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	22ff      	movs	r2, #255	@ 0xff
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	1dfb      	adds	r3, r7, #7
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	0018      	movs	r0, r3
 8003c44:	2303      	movs	r3, #3
 8003c46:	4003      	ands	r3, r0
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c4c:	4809      	ldr	r0, [pc, #36]	@ (8003c74 <__NVIC_SetPriority+0xd8>)
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	001c      	movs	r4, r3
 8003c54:	230f      	movs	r3, #15
 8003c56:	4023      	ands	r3, r4
 8003c58:	3b08      	subs	r3, #8
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	3306      	adds	r3, #6
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	18c3      	adds	r3, r0, r3
 8003c64:	3304      	adds	r3, #4
 8003c66:	601a      	str	r2, [r3, #0]
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b003      	add	sp, #12
 8003c6e:	bd90      	pop	{r4, r7, pc}
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	045b      	lsls	r3, r3, #17
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d301      	bcc.n	8003c90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e010      	b.n	8003cb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <SysTick_Config+0x44>)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	3a01      	subs	r2, #1
 8003c96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c98:	2301      	movs	r3, #1
 8003c9a:	425b      	negs	r3, r3
 8003c9c:	2103      	movs	r1, #3
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff ff7c 	bl	8003b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <SysTick_Config+0x44>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <SysTick_Config+0x44>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	210f      	movs	r1, #15
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	1c02      	adds	r2, r0, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff ff5d 	bl	8003b9c <__NVIC_SetPriority>
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ffbf 	bl	8003c78 <SysTick_Config>
 8003cfa:	0003      	movs	r3, r0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e015      	b.n	8003d42 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	791b      	ldrb	r3, [r3, #4]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff f99b 	bl	8003064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	795b      	ldrb	r3, [r3, #5]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_DAC_ConfigChannel+0x20>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e035      	b.n	8003dd8 <HAL_DAC_ConfigChannel+0x8c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2202      	movs	r2, #2
 8003d76:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003d80:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <HAL_DAC_ConfigChannel+0x94>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	409a      	lsls	r2, r3
 8003d86:	0013      	movs	r3, r2
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	21c0      	movs	r1, #192	@ 0xc0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4099      	lsls	r1, r3
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	43d9      	mvns	r1, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b006      	add	sp, #24
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00000ffe 	.word	0x00000ffe

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003dfa:	e155      	b.n	80040a8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4091      	lsls	r1, r2
 8003e06:	000a      	movs	r2, r1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d100      	bne.n	8003e14 <HAL_GPIO_Init+0x30>
 8003e12:	e146      	b.n	80040a2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d005      	beq.n	8003e2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	0013      	movs	r3, r2
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	2201      	movs	r2, #1
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	0013      	movs	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d017      	beq.n	8003eca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d123      	bne.n	8003f1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	58d3      	ldr	r3, [r2, r3]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	4013      	ands	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2107      	movs	r1, #7
 8003f02:	400b      	ands	r3, r1
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	409a      	lsls	r2, r3
 8003f08:	0013      	movs	r3, r2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	0092      	lsls	r2, r2, #2
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	0013      	movs	r3, r2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	23c0      	movs	r3, #192	@ 0xc0
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d100      	bne.n	8003f60 <HAL_GPIO_Init+0x17c>
 8003f5e:	e0a0      	b.n	80040a2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f60:	4b57      	ldr	r3, [pc, #348]	@ (80040c0 <HAL_GPIO_Init+0x2dc>)
 8003f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f64:	4b56      	ldr	r3, [pc, #344]	@ (80040c0 <HAL_GPIO_Init+0x2dc>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6c:	4a55      	ldr	r2, [pc, #340]	@ (80040c4 <HAL_GPIO_Init+0x2e0>)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	3302      	adds	r3, #2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	589b      	ldr	r3, [r3, r2]
 8003f78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	4013      	ands	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	220f      	movs	r2, #15
 8003f84:	409a      	lsls	r2, r3
 8003f86:	0013      	movs	r3, r2
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	23a0      	movs	r3, #160	@ 0xa0
 8003f94:	05db      	lsls	r3, r3, #23
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d01f      	beq.n	8003fda <HAL_GPIO_Init+0x1f6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_GPIO_Init+0x2e4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d019      	beq.n	8003fd6 <HAL_GPIO_Init+0x1f2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <HAL_GPIO_Init+0x2e8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x1ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a48      	ldr	r2, [pc, #288]	@ (80040d0 <HAL_GPIO_Init+0x2ec>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00d      	beq.n	8003fce <HAL_GPIO_Init+0x1ea>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a47      	ldr	r2, [pc, #284]	@ (80040d4 <HAL_GPIO_Init+0x2f0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <HAL_GPIO_Init+0x1e6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a46      	ldr	r2, [pc, #280]	@ (80040d8 <HAL_GPIO_Init+0x2f4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_GPIO_Init+0x1e2>
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	e00a      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	e008      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e004      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e002      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_GPIO_Init+0x1f8>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	2103      	movs	r1, #3
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fec:	4935      	ldr	r1, [pc, #212]	@ (80040c4 <HAL_GPIO_Init+0x2e0>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffa:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43da      	mvns	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	035b      	lsls	r3, r3, #13
 8004012:	4013      	ands	r3, r2
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800401e:	4b2f      	ldr	r3, [pc, #188]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004024:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43da      	mvns	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	2380      	movs	r3, #128	@ 0x80
 800403a:	039b      	lsls	r3, r3, #14
 800403c:	4013      	ands	r3, r2
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004048:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43da      	mvns	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	029b      	lsls	r3, r3, #10
 8004066:	4013      	ands	r3, r2
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	43da      	mvns	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	4013      	ands	r3, r2
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800409c:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <HAL_GPIO_Init+0x2f8>)
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	40da      	lsrs	r2, r3
 80040b0:	1e13      	subs	r3, r2, #0
 80040b2:	d000      	beq.n	80040b6 <HAL_GPIO_Init+0x2d2>
 80040b4:	e6a2      	b.n	8003dfc <HAL_GPIO_Init+0x18>
  }
}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b006      	add	sp, #24
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40010000 	.word	0x40010000
 80040c8:	50000400 	.word	0x50000400
 80040cc:	50000800 	.word	0x50000800
 80040d0:	50000c00 	.word	0x50000c00
 80040d4:	50001000 	.word	0x50001000
 80040d8:	50001c00 	.word	0x50001c00
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f000 fbbf 	bl	8004872 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	4bc9      	ldr	r3, [pc, #804]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	220c      	movs	r2, #12
 80040fa:	4013      	ands	r3, r2
 80040fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fe:	4bc7      	ldr	r3, [pc, #796]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	4013      	ands	r3, r2
 8004112:	d100      	bne.n	8004116 <HAL_RCC_OscConfig+0x36>
 8004114:	e07e      	b.n	8004214 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d007      	beq.n	800412c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d112      	bne.n	8004148 <HAL_RCC_OscConfig+0x68>
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	025b      	lsls	r3, r3, #9
 8004128:	429a      	cmp	r2, r3
 800412a:	d10d      	bne.n	8004148 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	4bbb      	ldr	r3, [pc, #748]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	4013      	ands	r3, r2
 8004136:	d100      	bne.n	800413a <HAL_RCC_OscConfig+0x5a>
 8004138:	e06b      	b.n	8004212 <HAL_RCC_OscConfig+0x132>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d167      	bne.n	8004212 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f000 fb95 	bl	8004872 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	2380      	movs	r3, #128	@ 0x80
 800414e:	025b      	lsls	r3, r3, #9
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x84>
 8004154:	4bb1      	ldr	r3, [pc, #708]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4bb0      	ldr	r3, [pc, #704]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800415a:	2180      	movs	r1, #128	@ 0x80
 800415c:	0249      	lsls	r1, r1, #9
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e027      	b.n	80041b4 <HAL_RCC_OscConfig+0xd4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	23a0      	movs	r3, #160	@ 0xa0
 800416a:	02db      	lsls	r3, r3, #11
 800416c:	429a      	cmp	r2, r3
 800416e:	d10e      	bne.n	800418e <HAL_RCC_OscConfig+0xae>
 8004170:	4baa      	ldr	r3, [pc, #680]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4ba9      	ldr	r3, [pc, #676]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004176:	2180      	movs	r1, #128	@ 0x80
 8004178:	02c9      	lsls	r1, r1, #11
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	4ba7      	ldr	r3, [pc, #668]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4ba6      	ldr	r3, [pc, #664]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0249      	lsls	r1, r1, #9
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e012      	b.n	80041b4 <HAL_RCC_OscConfig+0xd4>
 800418e:	4ba3      	ldr	r3, [pc, #652]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba2      	ldr	r3, [pc, #648]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004194:	49a2      	ldr	r1, [pc, #648]	@ (8004420 <HAL_RCC_OscConfig+0x340>)
 8004196:	400a      	ands	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	4ba0      	ldr	r3, [pc, #640]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	025b      	lsls	r3, r3, #9
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4b9c      	ldr	r3, [pc, #624]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b9b      	ldr	r3, [pc, #620]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80041ae:	499d      	ldr	r1, [pc, #628]	@ (8004424 <HAL_RCC_OscConfig+0x344>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7ff f942 	bl	8003444 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041c4:	e009      	b.n	80041da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c6:	f7ff f93d 	bl	8003444 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	@ 0x64
 80041d2:	d902      	bls.n	80041da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f000 fb4c 	bl	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041da:	4b90      	ldr	r3, [pc, #576]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	4013      	ands	r3, r2
 80041e4:	d0ef      	beq.n	80041c6 <HAL_RCC_OscConfig+0xe6>
 80041e6:	e015      	b.n	8004214 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7ff f92c 	bl	8003444 <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f2:	f7ff f927 	bl	8003444 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	@ 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e336      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004204:	4b85      	ldr	r3, [pc, #532]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x112>
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004212:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	4013      	ands	r3, r2
 800421c:	d100      	bne.n	8004220 <HAL_RCC_OscConfig+0x140>
 800421e:	e099      	b.n	8004354 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2220      	movs	r2, #32
 800422a:	4013      	ands	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800422e:	4b7b      	ldr	r3, [pc, #492]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b7a      	ldr	r3, [pc, #488]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004234:	2120      	movs	r1, #32
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	2220      	movs	r2, #32
 800423e:	4393      	bics	r3, r2
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d13e      	bne.n	80042cc <HAL_RCC_OscConfig+0x1ec>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d13b      	bne.n	80042cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004254:	4b71      	ldr	r3, [pc, #452]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2204      	movs	r2, #4
 800425a:	4013      	ands	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_RCC_OscConfig+0x188>
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e304      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b6c      	ldr	r3, [pc, #432]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a6e      	ldr	r2, [pc, #440]	@ (8004428 <HAL_RCC_OscConfig+0x348>)
 800426e:	4013      	ands	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	4b68      	ldr	r3, [pc, #416]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2209      	movs	r2, #9
 8004284:	4393      	bics	r3, r2
 8004286:	0019      	movs	r1, r3
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004290:	f000 fc42 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004294:	0001      	movs	r1, r0
 8004296:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	220f      	movs	r2, #15
 800429e:	4013      	ands	r3, r2
 80042a0:	4a62      	ldr	r2, [pc, #392]	@ (800442c <HAL_RCC_OscConfig+0x34c>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	000a      	movs	r2, r1
 80042a6:	40da      	lsrs	r2, r3
 80042a8:	4b61      	ldr	r3, [pc, #388]	@ (8004430 <HAL_RCC_OscConfig+0x350>)
 80042aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80042ac:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0x354>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2513      	movs	r5, #19
 80042b2:	197c      	adds	r4, r7, r5
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff f87f 	bl	80033b8 <HAL_InitTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d046      	beq.n	8004354 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80042c6:	197b      	adds	r3, r7, r5
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	e2d2      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d027      	beq.n	8004322 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042d2:	4b52      	ldr	r3, [pc, #328]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2209      	movs	r2, #9
 80042d8:	4393      	bics	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	4b4f      	ldr	r3, [pc, #316]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7ff f8ae 	bl	8003444 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ee:	f7ff f8a9 	bl	8003444 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e2b8      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004300:	4b46      	ldr	r3, [pc, #280]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2204      	movs	r2, #4
 8004306:	4013      	ands	r3, r2
 8004308:	d0f1      	beq.n	80042ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b44      	ldr	r3, [pc, #272]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a46      	ldr	r2, [pc, #280]	@ (8004428 <HAL_RCC_OscConfig+0x348>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	021a      	lsls	r2, r3, #8
 800431a:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	e018      	b.n	8004354 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004322:	4b3e      	ldr	r3, [pc, #248]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004328:	2101      	movs	r1, #1
 800432a:	438a      	bics	r2, r1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7ff f889 	bl	8003444 <HAL_GetTick>
 8004332:	0003      	movs	r3, r0
 8004334:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004338:	f7ff f884 	bl	8003444 <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e293      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800434a:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2204      	movs	r2, #4
 8004350:	4013      	ands	r3, r2
 8004352:	d1f1      	bne.n	8004338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2210      	movs	r2, #16
 800435a:	4013      	ands	r3, r2
 800435c:	d100      	bne.n	8004360 <HAL_RCC_OscConfig+0x280>
 800435e:	e0a2      	b.n	80044a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d140      	bne.n	80043e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004366:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4013      	ands	r3, r2
 8004370:	d005      	beq.n	800437e <HAL_RCC_OscConfig+0x29e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e279      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800437e:	4b27      	ldr	r3, [pc, #156]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a2d      	ldr	r2, [pc, #180]	@ (8004438 <HAL_RCC_OscConfig+0x358>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800438c:	4b23      	ldr	r3, [pc, #140]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004392:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	0a19      	lsrs	r1, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	061a      	lsls	r2, r3, #24
 80043a0:	4b1e      	ldr	r3, [pc, #120]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	0b5b      	lsrs	r3, r3, #13
 80043ac:	3301      	adds	r3, #1
 80043ae:	2280      	movs	r2, #128	@ 0x80
 80043b0:	0212      	lsls	r2, r2, #8
 80043b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043b4:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	210f      	movs	r1, #15
 80043bc:	400b      	ands	r3, r1
 80043be:	491b      	ldr	r1, [pc, #108]	@ (800442c <HAL_RCC_OscConfig+0x34c>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_RCC_OscConfig+0x350>)
 80043c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <HAL_RCC_OscConfig+0x354>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2513      	movs	r5, #19
 80043ce:	197c      	adds	r4, r7, r5
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fe fff1 	bl	80033b8 <HAL_InitTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043da:	197b      	adds	r3, r7, r5
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d061      	beq.n	80044a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80043e2:	197b      	adds	r3, r7, r5
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	e244      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d040      	beq.n	8004472 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f0:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b09      	ldr	r3, [pc, #36]	@ (800441c <HAL_RCC_OscConfig+0x33c>)
 80043f6:	2180      	movs	r1, #128	@ 0x80
 80043f8:	0049      	lsls	r1, r1, #1
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7ff f821 	bl	8003444 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004406:	e019      	b.n	800443c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004408:	f7ff f81c 	bl	8003444 <HAL_GetTick>
 800440c:	0002      	movs	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d912      	bls.n	800443c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e22b      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	40021000 	.word	0x40021000
 8004420:	fffeffff 	.word	0xfffeffff
 8004424:	fffbffff 	.word	0xfffbffff
 8004428:	ffffe0ff 	.word	0xffffe0ff
 800442c:	0800a474 	.word	0x0800a474
 8004430:	20000000 	.word	0x20000000
 8004434:	20000004 	.word	0x20000004
 8004438:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800443c:	4bca      	ldr	r3, [pc, #808]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d0df      	beq.n	8004408 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004448:	4bc7      	ldr	r3, [pc, #796]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4ac7      	ldr	r2, [pc, #796]	@ (800476c <HAL_RCC_OscConfig+0x68c>)
 800444e:	4013      	ands	r3, r2
 8004450:	0019      	movs	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004456:	4bc4      	ldr	r3, [pc, #784]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445c:	4bc2      	ldr	r3, [pc, #776]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	0a19      	lsrs	r1, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	061a      	lsls	r2, r3, #24
 800446a:	4bbf      	ldr	r3, [pc, #764]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e019      	b.n	80044a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004472:	4bbd      	ldr	r3, [pc, #756]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4bbc      	ldr	r3, [pc, #752]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004478:	49bd      	ldr	r1, [pc, #756]	@ (8004770 <HAL_RCC_OscConfig+0x690>)
 800447a:	400a      	ands	r2, r1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fe ffe1 	bl	8003444 <HAL_GetTick>
 8004482:	0003      	movs	r3, r0
 8004484:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004488:	f7fe ffdc 	bl	8003444 <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1eb      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800449a:	4bb3      	ldr	r3, [pc, #716]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4013      	ands	r3, r2
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	4013      	ands	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d019      	beq.n	80044ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b8:	4bab      	ldr	r3, [pc, #684]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80044ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044bc:	4baa      	ldr	r3, [pc, #680]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80044be:	2101      	movs	r1, #1
 80044c0:	430a      	orrs	r2, r1
 80044c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c4:	f7fe ffbe 	bl	8003444 <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fe ffb9 	bl	8003444 <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1c8      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	2202      	movs	r2, #2
 80044e6:	4013      	ands	r3, r2
 80044e8:	d0f1      	beq.n	80044ce <HAL_RCC_OscConfig+0x3ee>
 80044ea:	e018      	b.n	800451e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80044ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044f0:	4b9d      	ldr	r3, [pc, #628]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	438a      	bics	r2, r1
 80044f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fe ffa4 	bl	8003444 <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004502:	f7fe ff9f 	bl	8003444 <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1ae      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004514:	4b94      	ldr	r3, [pc, #592]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	2202      	movs	r2, #2
 800451a:	4013      	ands	r3, r2
 800451c:	d1f1      	bne.n	8004502 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	4013      	ands	r3, r2
 8004526:	d100      	bne.n	800452a <HAL_RCC_OscConfig+0x44a>
 8004528:	e0ae      	b.n	8004688 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2023      	movs	r0, #35	@ 0x23
 800452c:	183b      	adds	r3, r7, r0
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b8d      	ldr	r3, [pc, #564]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	055b      	lsls	r3, r3, #21
 800453a:	4013      	ands	r3, r2
 800453c:	d109      	bne.n	8004552 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4b8a      	ldr	r3, [pc, #552]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004542:	4b89      	ldr	r3, [pc, #548]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0549      	lsls	r1, r1, #21
 8004548:	430a      	orrs	r2, r1
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800454c:	183b      	adds	r3, r7, r0
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b88      	ldr	r3, [pc, #544]	@ (8004774 <HAL_RCC_OscConfig+0x694>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d11a      	bne.n	8004594 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b85      	ldr	r3, [pc, #532]	@ (8004774 <HAL_RCC_OscConfig+0x694>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b84      	ldr	r3, [pc, #528]	@ (8004774 <HAL_RCC_OscConfig+0x694>)
 8004564:	2180      	movs	r1, #128	@ 0x80
 8004566:	0049      	lsls	r1, r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456c:	f7fe ff6a 	bl	8003444 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fe ff65 	bl	8003444 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	@ 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e174      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b7a      	ldr	r3, [pc, #488]	@ (8004774 <HAL_RCC_OscConfig+0x694>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	@ 0x80
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4d0>
 80045a0:	4b71      	ldr	r3, [pc, #452]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045a4:	4b70      	ldr	r3, [pc, #448]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045a6:	2180      	movs	r1, #128	@ 0x80
 80045a8:	0049      	lsls	r1, r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80045ae:	e031      	b.n	8004614 <HAL_RCC_OscConfig+0x534>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_OscConfig+0x4f2>
 80045b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045be:	496c      	ldr	r1, [pc, #432]	@ (8004770 <HAL_RCC_OscConfig+0x690>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80045c4:	4b68      	ldr	r3, [pc, #416]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045c8:	4b67      	ldr	r3, [pc, #412]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045ca:	496b      	ldr	r1, [pc, #428]	@ (8004778 <HAL_RCC_OscConfig+0x698>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80045d0:	e020      	b.n	8004614 <HAL_RCC_OscConfig+0x534>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	23a0      	movs	r3, #160	@ 0xa0
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10e      	bne.n	80045fc <HAL_RCC_OscConfig+0x51c>
 80045de:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045e2:	4b61      	ldr	r3, [pc, #388]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045e4:	2180      	movs	r1, #128	@ 0x80
 80045e6:	00c9      	lsls	r1, r1, #3
 80045e8:	430a      	orrs	r2, r1
 80045ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80045ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	0049      	lsls	r1, r1, #1
 80045f6:	430a      	orrs	r2, r1
 80045f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0x534>
 80045fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80045fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004600:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004602:	495b      	ldr	r1, [pc, #364]	@ (8004770 <HAL_RCC_OscConfig+0x690>)
 8004604:	400a      	ands	r2, r1
 8004606:	651a      	str	r2, [r3, #80]	@ 0x50
 8004608:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800460a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800460c:	4b56      	ldr	r3, [pc, #344]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800460e:	495a      	ldr	r1, [pc, #360]	@ (8004778 <HAL_RCC_OscConfig+0x698>)
 8004610:	400a      	ands	r2, r1
 8004612:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fe ff12 	bl	8003444 <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004624:	e009      	b.n	800463a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fe ff0d 	bl	8003444 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	4a52      	ldr	r2, [pc, #328]	@ (800477c <HAL_RCC_OscConfig+0x69c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e11b      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800463a:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800463c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4013      	ands	r3, r2
 8004644:	d0ef      	beq.n	8004626 <HAL_RCC_OscConfig+0x546>
 8004646:	e014      	b.n	8004672 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004648:	f7fe fefc 	bl	8003444 <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004650:	e009      	b.n	8004666 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fe fef7 	bl	8003444 <HAL_GetTick>
 8004656:	0002      	movs	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	4a47      	ldr	r2, [pc, #284]	@ (800477c <HAL_RCC_OscConfig+0x69c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e105      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004666:	4b40      	ldr	r3, [pc, #256]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4013      	ands	r3, r2
 8004670:	d1ef      	bne.n	8004652 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004672:	2323      	movs	r3, #35	@ 0x23
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b3a      	ldr	r3, [pc, #232]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800467e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004680:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004682:	493f      	ldr	r1, [pc, #252]	@ (8004780 <HAL_RCC_OscConfig+0x6a0>)
 8004684:	400a      	ands	r2, r1
 8004686:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	4013      	ands	r3, r2
 8004690:	d049      	beq.n	8004726 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d026      	beq.n	80046e8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800469a:	4b33      	ldr	r3, [pc, #204]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	4b32      	ldr	r3, [pc, #200]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046ac:	2101      	movs	r1, #1
 80046ae:	430a      	orrs	r2, r1
 80046b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_OscConfig+0x6a4>)
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_RCC_OscConfig+0x6a4>)
 80046b8:	2180      	movs	r1, #128	@ 0x80
 80046ba:	0189      	lsls	r1, r1, #6
 80046bc:	430a      	orrs	r2, r1
 80046be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fec0 	bl	8003444 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ca:	f7fe febb 	bl	8003444 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0ca      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046dc:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2202      	movs	r2, #2
 80046e2:	4013      	ands	r3, r2
 80046e4:	d0f1      	beq.n	80046ca <HAL_RCC_OscConfig+0x5ea>
 80046e6:	e01e      	b.n	8004726 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 80046ee:	2101      	movs	r1, #1
 80046f0:	438a      	bics	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	4b23      	ldr	r3, [pc, #140]	@ (8004784 <HAL_RCC_OscConfig+0x6a4>)
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <HAL_RCC_OscConfig+0x6a4>)
 80046fa:	4923      	ldr	r1, [pc, #140]	@ (8004788 <HAL_RCC_OscConfig+0x6a8>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe fea0 	bl	8003444 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470a:	f7fe fe9b 	bl	8003444 <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0aa      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800471c:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2202      	movs	r2, #2
 8004722:	4013      	ands	r3, r2
 8004724:	d1f1      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d100      	bne.n	8004730 <HAL_RCC_OscConfig+0x650>
 800472e:	e09f      	b.n	8004870 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d100      	bne.n	8004738 <HAL_RCC_OscConfig+0x658>
 8004736:	e078      	b.n	800482a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	2b02      	cmp	r3, #2
 800473e:	d159      	bne.n	80047f4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b08      	ldr	r3, [pc, #32]	@ (8004768 <HAL_RCC_OscConfig+0x688>)
 8004746:	4911      	ldr	r1, [pc, #68]	@ (800478c <HAL_RCC_OscConfig+0x6ac>)
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fe7a 	bl	8003444 <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004756:	f7fe fe75 	bl	8003444 <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d915      	bls.n	8004790 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e084      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
 8004768:	40021000 	.word	0x40021000
 800476c:	ffff1fff 	.word	0xffff1fff
 8004770:	fffffeff 	.word	0xfffffeff
 8004774:	40007000 	.word	0x40007000
 8004778:	fffffbff 	.word	0xfffffbff
 800477c:	00001388 	.word	0x00001388
 8004780:	efffffff 	.word	0xefffffff
 8004784:	40010000 	.word	0x40010000
 8004788:	ffffdfff 	.word	0xffffdfff
 800478c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004790:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	049b      	lsls	r3, r3, #18
 8004798:	4013      	ands	r3, r2
 800479a:	d1dc      	bne.n	8004756 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a37      	ldr	r2, [pc, #220]	@ (8004880 <HAL_RCC_OscConfig+0x7a0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b4:	431a      	orrs	r2, r3
 80047b6:	4b31      	ldr	r3, [pc, #196]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047b8:	430a      	orrs	r2, r1
 80047ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b2f      	ldr	r3, [pc, #188]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047c2:	2180      	movs	r1, #128	@ 0x80
 80047c4:	0449      	lsls	r1, r1, #17
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fe fe3b 	bl	8003444 <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fe fe36 	bl	8003444 <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e045      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047e6:	4b25      	ldr	r3, [pc, #148]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	049b      	lsls	r3, r3, #18
 80047ee:	4013      	ands	r3, r2
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x6f4>
 80047f2:	e03d      	b.n	8004870 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b20      	ldr	r3, [pc, #128]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 80047fa:	4922      	ldr	r1, [pc, #136]	@ (8004884 <HAL_RCC_OscConfig+0x7a4>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fe fe20 	bl	8003444 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fe1b 	bl	8003444 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e02a      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800481c:	4b17      	ldr	r3, [pc, #92]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	049b      	lsls	r3, r3, #18
 8004824:	4013      	ands	r3, r2
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x72a>
 8004828:	e022      	b.n	8004870 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e01d      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004836:	4b11      	ldr	r3, [pc, #68]	@ (800487c <HAL_RCC_OscConfig+0x79c>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	025b      	lsls	r3, r3, #9
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d10f      	bne.n	800486c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	23f0      	movs	r3, #240	@ 0xf0
 8004850:	039b      	lsls	r3, r3, #14
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	23c0      	movs	r3, #192	@ 0xc0
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b00a      	add	sp, #40	@ 0x28
 8004878:	bdb0      	pop	{r4, r5, r7, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	40021000 	.word	0x40021000
 8004880:	ff02ffff 	.word	0xff02ffff
 8004884:	feffffff 	.word	0xfeffffff

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e128      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b96      	ldr	r3, [pc, #600]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	4013      	ands	r3, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d91e      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b93      	ldr	r3, [pc, #588]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4393      	bics	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	4b90      	ldr	r3, [pc, #576]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048bc:	f7fe fdc2 	bl	8003444 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c4:	e009      	b.n	80048da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c6:	f7fe fdbd 	bl	8003444 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	4a8a      	ldr	r2, [pc, #552]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e109      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b87      	ldr	r3, [pc, #540]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1ee      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f2:	4b83      	ldr	r3, [pc, #524]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	22f0      	movs	r2, #240	@ 0xf0
 80048f8:	4393      	bics	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b7f      	ldr	r3, [pc, #508]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004902:	430a      	orrs	r2, r1
 8004904:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d100      	bne.n	8004912 <HAL_RCC_ClockConfig+0x8a>
 8004910:	e089      	b.n	8004a26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800491a:	4b79      	ldr	r3, [pc, #484]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	4013      	ands	r3, r2
 8004924:	d120      	bne.n	8004968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0e1      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004932:	4b73      	ldr	r3, [pc, #460]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	2380      	movs	r3, #128	@ 0x80
 8004938:	049b      	lsls	r3, r3, #18
 800493a:	4013      	ands	r3, r2
 800493c:	d114      	bne.n	8004968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0d5      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d106      	bne.n	8004958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800494a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2204      	movs	r2, #4
 8004950:	4013      	ands	r3, r2
 8004952:	d109      	bne.n	8004968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0ca      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004958:	4b69      	ldr	r3, [pc, #420]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0c2      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004968:	4b65      	ldr	r3, [pc, #404]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2203      	movs	r2, #3
 800496e:	4393      	bics	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004978:	430a      	orrs	r2, r1
 800497a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fe fd62 	bl	8003444 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800498c:	e009      	b.n	80049a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498e:	f7fe fd59 	bl	8003444 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	4a58      	ldr	r2, [pc, #352]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0a5      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049a2:	4b57      	ldr	r3, [pc, #348]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	220c      	movs	r2, #12
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d1ef      	bne.n	800498e <HAL_RCC_ClockConfig+0x106>
 80049ae:	e03a      	b.n	8004a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d111      	bne.n	80049dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ba:	f7fe fd43 	bl	8003444 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	4a4d      	ldr	r2, [pc, #308]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e08f      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	220c      	movs	r2, #12
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d1ef      	bne.n	80049ba <HAL_RCC_ClockConfig+0x132>
 80049da:	e024      	b.n	8004a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d11b      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e4:	e009      	b.n	80049fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e6:	f7fe fd2d 	bl	8003444 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	4a42      	ldr	r2, [pc, #264]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e079      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049fa:	4b41      	ldr	r3, [pc, #260]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	220c      	movs	r2, #12
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d1ef      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x15e>
 8004a06:	e00e      	b.n	8004a26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fe fd1c 	bl	8003444 <HAL_GetTick>
 8004a0c:	0002      	movs	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	4a3a      	ldr	r2, [pc, #232]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e068      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a1c:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	220c      	movs	r2, #12
 8004a22:	4013      	ands	r3, r2
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a26:	4b34      	ldr	r3, [pc, #208]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d21e      	bcs.n	8004a72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a34:	4b30      	ldr	r3, [pc, #192]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4393      	bics	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a46:	f7fe fcfd 	bl	8003444 <HAL_GetTick>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	e009      	b.n	8004a64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fe fcf8 	bl	8003444 <HAL_GetTick>
 8004a54:	0002      	movs	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <HAL_RCC_ClockConfig+0x274>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e044      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCC_ClockConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d1ee      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2204      	movs	r2, #4
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7c:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a20      	ldr	r2, [pc, #128]	@ (8004b04 <HAL_RCC_ClockConfig+0x27c>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2208      	movs	r2, #8
 8004a96:	4013      	ands	r3, r2
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a9a:	4b19      	ldr	r3, [pc, #100]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <HAL_RCC_ClockConfig+0x280>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	00da      	lsls	r2, r3, #3
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ab0:	f000 f832 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004ab4:	0001      	movs	r1, r0
 8004ab6:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	220f      	movs	r2, #15
 8004abe:	4013      	ands	r3, r2
 8004ac0:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x284>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	000a      	movs	r2, r1
 8004ac6:	40da      	lsrs	r2, r3
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_RCC_ClockConfig+0x288>)
 8004aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <HAL_RCC_ClockConfig+0x28c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	250b      	movs	r5, #11
 8004ad2:	197c      	adds	r4, r7, r5
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fe fc6f 	bl	80033b8 <HAL_InitTick>
 8004ada:	0003      	movs	r3, r0
 8004adc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ae6:	197b      	adds	r3, r7, r5
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	e000      	b.n	8004aee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b004      	add	sp, #16
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	40022000 	.word	0x40022000
 8004afc:	00001388 	.word	0x00001388
 8004b00:	40021000 	.word	0x40021000
 8004b04:	fffff8ff 	.word	0xfffff8ff
 8004b08:	ffffc7ff 	.word	0xffffc7ff
 8004b0c:	0800a474 	.word	0x0800a474
 8004b10:	20000000 	.word	0x20000000
 8004b14:	20000004 	.word	0x20000004

08004b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b08e      	sub	sp, #56	@ 0x38
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b26:	230c      	movs	r3, #12
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d014      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x40>
 8004b2e:	d900      	bls.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1a>
 8004b30:	e07b      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x112>
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d002      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x24>
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d00b      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b3a:	e076      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b3c:	4b44      	ldr	r3, [pc, #272]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2210      	movs	r2, #16
 8004b42:	4013      	ands	r3, r2
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004b46:	4b43      	ldr	r3, [pc, #268]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004b4a:	e07c      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004b4c:	4b42      	ldr	r3, [pc, #264]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004b50:	e079      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4b42      	ldr	r3, [pc, #264]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b54:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004b56:	e076      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5a:	0c9a      	lsrs	r2, r3, #18
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	401a      	ands	r2, r3
 8004b60:	4b3f      	ldr	r3, [pc, #252]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x148>)
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	0d9a      	lsrs	r2, r3, #22
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	3301      	adds	r3, #1
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	025b      	lsls	r3, r3, #9
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d01a      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	4a35      	ldr	r2, [pc, #212]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	69b8      	ldr	r0, [r7, #24]
 8004b8c:	69f9      	ldr	r1, [r7, #28]
 8004b8e:	f7fb fcab 	bl	80004e8 <__aeabi_lmul>
 8004b92:	0002      	movs	r2, r0
 8004b94:	000b      	movs	r3, r1
 8004b96:	0010      	movs	r0, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f7fb fc7f 	bl	80004a8 <__aeabi_uldivmod>
 8004baa:	0002      	movs	r2, r0
 8004bac:	000b      	movs	r3, r1
 8004bae:	0013      	movs	r3, r2
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb2:	e037      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004bb4:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d01a      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	68b8      	ldr	r0, [r7, #8]
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	f7fb fc8b 	bl	80004e8 <__aeabi_lmul>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	000b      	movs	r3, r1
 8004bd6:	0010      	movs	r0, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f7fb fc5f 	bl	80004a8 <__aeabi_uldivmod>
 8004bea:	0002      	movs	r2, r0
 8004bec:	000b      	movs	r3, r1
 8004bee:	0013      	movs	r3, r2
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf2:	e017      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f7fb fc72 	bl	80004e8 <__aeabi_lmul>
 8004c04:	0002      	movs	r2, r0
 8004c06:	000b      	movs	r3, r1
 8004c08:	0010      	movs	r0, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	001c      	movs	r4, r3
 8004c10:	2300      	movs	r3, #0
 8004c12:	001d      	movs	r5, r3
 8004c14:	0022      	movs	r2, r4
 8004c16:	002b      	movs	r3, r5
 8004c18:	f7fb fc46 	bl	80004a8 <__aeabi_uldivmod>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	000b      	movs	r3, r1
 8004c20:	0013      	movs	r3, r2
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c26:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004c28:	e00d      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	2207      	movs	r2, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	2280      	movs	r2, #128	@ 0x80
 8004c3c:	0212      	lsls	r2, r2, #8
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	0013      	movs	r3, r2
 8004c42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004c44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b00e      	add	sp, #56	@ 0x38
 8004c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c50:	40021000 	.word	0x40021000
 8004c54:	003d0900 	.word	0x003d0900
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200
 8004c60:	0800a48c 	.word	0x0800a48c

08004c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b02      	ldr	r3, [pc, #8]	@ (8004c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	20000000 	.word	0x20000000

08004c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c7c:	f7ff fff2 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c80:	0001      	movs	r1, r0
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	2207      	movs	r2, #7
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	40d9      	lsrs	r1, r3
 8004c92:	000b      	movs	r3, r1
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800a484 	.word	0x0800a484

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cac:	0001      	movs	r1, r0
 8004cae:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	0adb      	lsrs	r3, r3, #11
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	40d9      	lsrs	r1, r3
 8004cbe:	000b      	movs	r3, r1
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	0800a484 	.word	0x0800a484

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004cd8:	2017      	movs	r0, #23
 8004cda:	183b      	adds	r3, r7, r0
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d100      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004cea:	e0c7      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cec:	4b9b      	ldr	r3, [pc, #620]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	055b      	lsls	r3, r3, #21
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b98      	ldr	r3, [pc, #608]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cfc:	4b97      	ldr	r3, [pc, #604]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cfe:	2180      	movs	r1, #128	@ 0x80
 8004d00:	0549      	lsls	r1, r1, #21
 8004d02:	430a      	orrs	r2, r1
 8004d04:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	4b94      	ldr	r3, [pc, #592]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	d11a      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d18:	4b91      	ldr	r3, [pc, #580]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b90      	ldr	r3, [pc, #576]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d1e:	2180      	movs	r1, #128	@ 0x80
 8004d20:	0049      	lsls	r1, r1, #1
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d26:	f7fe fb8d 	bl	8003444 <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	e008      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fe fb88 	bl	8003444 <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	@ 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e107      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d42:	4b87      	ldr	r3, [pc, #540]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d4e:	4b83      	ldr	r3, [pc, #524]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	23c0      	movs	r3, #192	@ 0xc0
 8004d54:	039b      	lsls	r3, r3, #14
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	23c0      	movs	r3, #192	@ 0xc0
 8004d60:	039b      	lsls	r3, r3, #14
 8004d62:	4013      	ands	r3, r2
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d013      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	23c0      	movs	r3, #192	@ 0xc0
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	401a      	ands	r2, r3
 8004d74:	23c0      	movs	r3, #192	@ 0xc0
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d10a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d7c:	4b77      	ldr	r3, [pc, #476]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	029b      	lsls	r3, r3, #10
 8004d84:	401a      	ands	r2, r3
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	029b      	lsls	r3, r3, #10
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0df      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d92:	4b72      	ldr	r3, [pc, #456]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d96:	23c0      	movs	r3, #192	@ 0xc0
 8004d98:	029b      	lsls	r3, r3, #10
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d03b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	23c0      	movs	r3, #192	@ 0xc0
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	4013      	ands	r3, r2
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d033      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2220      	movs	r2, #32
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d02e      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004dbe:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	4a68      	ldr	r2, [pc, #416]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc8:	4b64      	ldr	r3, [pc, #400]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dcc:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dce:	2180      	movs	r1, #128	@ 0x80
 8004dd0:	0309      	lsls	r1, r1, #12
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd6:	4b61      	ldr	r3, [pc, #388]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dda:	4b60      	ldr	r3, [pc, #384]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ddc:	4962      	ldr	r1, [pc, #392]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004de2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4013      	ands	r3, r2
 8004df0:	d014      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fe fb27 	bl	8003444 <HAL_GetTick>
 8004df6:	0003      	movs	r3, r0
 8004df8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fe fb22 	bl	8003444 <HAL_GetTick>
 8004e00:	0002      	movs	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	4a59      	ldr	r2, [pc, #356]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0a0      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e10:	4b52      	ldr	r3, [pc, #328]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e14:	2380      	movs	r3, #128	@ 0x80
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2220      	movs	r2, #32
 8004e22:	4013      	ands	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	23c0      	movs	r3, #192	@ 0xc0
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	401a      	ands	r2, r3
 8004e30:	23c0      	movs	r3, #192	@ 0xc0
 8004e32:	029b      	lsls	r3, r3, #10
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004e38:	4b48      	ldr	r3, [pc, #288]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	23c0      	movs	r3, #192	@ 0xc0
 8004e48:	039b      	lsls	r3, r3, #14
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	4b43      	ldr	r3, [pc, #268]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	23c0      	movs	r3, #192	@ 0xc0
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	401a      	ands	r2, r3
 8004e60:	4b3e      	ldr	r3, [pc, #248]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e62:	430a      	orrs	r2, r1
 8004e64:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e66:	2317      	movs	r3, #23
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e70:	4b3a      	ldr	r3, [pc, #232]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e74:	4b39      	ldr	r3, [pc, #228]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e76:	493f      	ldr	r1, [pc, #252]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e86:	4b35      	ldr	r3, [pc, #212]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b31      	ldr	r3, [pc, #196]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	220c      	movs	r2, #12
 8004eaa:	4393      	bics	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec2:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	4013      	ands	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee4:	4a25      	ldr	r2, [pc, #148]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f00:	4b16      	ldr	r3, [pc, #88]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f04:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2240      	movs	r2, #64	@ 0x40
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2280      	movs	r2, #128	@ 0x80
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f40:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b006      	add	sp, #24
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40007000 	.word	0x40007000
 8004f64:	fffcffff 	.word	0xfffcffff
 8004f68:	fff7ffff 	.word	0xfff7ffff
 8004f6c:	00001388 	.word	0x00001388
 8004f70:	ffcfffff 	.word	0xffcfffff
 8004f74:	efffffff 	.word	0xefffffff
 8004f78:	fffff3ff 	.word	0xfffff3ff
 8004f7c:	ffffcfff 	.word	0xffffcfff
 8004f80:	fbffffff 	.word	0xfbffffff
 8004f84:	fff3ffff 	.word	0xfff3ffff

08004f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e044      	b.n	8005024 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d107      	bne.n	8004fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2278      	movs	r2, #120	@ 0x78
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7fe f895 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2224      	movs	r2, #36	@ 0x24
 8004fb6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f8d0 	bl	8005170 <UART_SetConfig>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e024      	b.n	8005024 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fb61 	bl	80056ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	490d      	ldr	r1, [pc, #52]	@ (800502c <HAL_UART_Init+0xa4>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	212a      	movs	r1, #42	@ 0x2a
 8005006:	438a      	bics	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fbf9 	bl	8005814 <UART_CheckIdleState>
 8005022:	0003      	movs	r3, r0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}
 800502c:	ffffb7ff 	.word	0xffffb7ff

08005030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	@ 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	1dbb      	adds	r3, r7, #6
 800503e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005044:	2b20      	cmp	r3, #32
 8005046:	d000      	beq.n	800504a <HAL_UART_Transmit+0x1a>
 8005048:	e08c      	b.n	8005164 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_UART_Transmit+0x28>
 8005050:	1dbb      	adds	r3, r7, #6
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e084      	b.n	8005166 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	015b      	lsls	r3, r3, #5
 8005064:	429a      	cmp	r2, r3
 8005066:	d109      	bne.n	800507c <HAL_UART_Transmit+0x4c>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d105      	bne.n	800507c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2201      	movs	r2, #1
 8005074:	4013      	ands	r3, r2
 8005076:	d001      	beq.n	800507c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e074      	b.n	8005166 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2284      	movs	r2, #132	@ 0x84
 8005080:	2100      	movs	r1, #0
 8005082:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2221      	movs	r2, #33	@ 0x21
 8005088:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508a:	f7fe f9db 	bl	8003444 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1dba      	adds	r2, r7, #6
 8005096:	2150      	movs	r1, #80	@ 0x50
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1dba      	adds	r2, r7, #6
 80050a0:	2152      	movs	r1, #82	@ 0x52
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	015b      	lsls	r3, r3, #5
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d108      	bne.n	80050c4 <HAL_UART_Transmit+0x94>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e003      	b.n	80050cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050cc:	e02f      	b.n	800512e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	0013      	movs	r3, r2
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	f000 fc42 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d004      	beq.n	80050ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e03b      	b.n	8005166 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	001a      	movs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	05d2      	lsls	r2, r2, #23
 8005100:	0dd2      	lsrs	r2, r2, #23
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	3302      	adds	r3, #2
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e007      	b.n	800511c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2252      	movs	r2, #82	@ 0x52
 8005120:	5a9b      	ldrh	r3, [r3, r2]
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b299      	uxth	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2252      	movs	r2, #82	@ 0x52
 800512c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2252      	movs	r2, #82	@ 0x52
 8005132:	5a9b      	ldrh	r3, [r3, r2]
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1c9      	bne.n	80050ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	0013      	movs	r3, r2
 8005144:	2200      	movs	r2, #0
 8005146:	2140      	movs	r1, #64	@ 0x40
 8005148:	f000 fc0c 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 800514c:	1e03      	subs	r3, r0, #0
 800514e:	d004      	beq.n	800515a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e005      	b.n	8005166 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b008      	add	sp, #32
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b08e      	sub	sp, #56	@ 0x38
 8005174:	af00      	add	r7, sp, #0
 8005176:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005178:	231a      	movs	r3, #26
 800517a:	2218      	movs	r2, #24
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4ac3      	ldr	r2, [pc, #780]	@ (80054b0 <UART_SetConfig+0x340>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4abe      	ldr	r2, [pc, #760]	@ (80054b4 <UART_SetConfig+0x344>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	0019      	movs	r1, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4ab8      	ldr	r2, [pc, #736]	@ (80054b8 <UART_SetConfig+0x348>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051e0:	4313      	orrs	r3, r2
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4ab4      	ldr	r2, [pc, #720]	@ (80054bc <UART_SetConfig+0x34c>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4ab0      	ldr	r2, [pc, #704]	@ (80054c0 <UART_SetConfig+0x350>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d131      	bne.n	8005268 <UART_SetConfig+0xf8>
 8005204:	4baf      	ldr	r3, [pc, #700]	@ (80054c4 <UART_SetConfig+0x354>)
 8005206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005208:	2203      	movs	r2, #3
 800520a:	4013      	ands	r3, r2
 800520c:	2b03      	cmp	r3, #3
 800520e:	d01d      	beq.n	800524c <UART_SetConfig+0xdc>
 8005210:	d823      	bhi.n	800525a <UART_SetConfig+0xea>
 8005212:	2b02      	cmp	r3, #2
 8005214:	d00c      	beq.n	8005230 <UART_SetConfig+0xc0>
 8005216:	d820      	bhi.n	800525a <UART_SetConfig+0xea>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <UART_SetConfig+0xb2>
 800521c:	2b01      	cmp	r3, #1
 800521e:	d00e      	beq.n	800523e <UART_SetConfig+0xce>
 8005220:	e01b      	b.n	800525a <UART_SetConfig+0xea>
 8005222:	231b      	movs	r3, #27
 8005224:	2218      	movs	r2, #24
 8005226:	189b      	adds	r3, r3, r2
 8005228:	19db      	adds	r3, r3, r7
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e0b4      	b.n	800539a <UART_SetConfig+0x22a>
 8005230:	231b      	movs	r3, #27
 8005232:	2218      	movs	r2, #24
 8005234:	189b      	adds	r3, r3, r2
 8005236:	19db      	adds	r3, r3, r7
 8005238:	2202      	movs	r2, #2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e0ad      	b.n	800539a <UART_SetConfig+0x22a>
 800523e:	231b      	movs	r3, #27
 8005240:	2218      	movs	r2, #24
 8005242:	189b      	adds	r3, r3, r2
 8005244:	19db      	adds	r3, r3, r7
 8005246:	2204      	movs	r2, #4
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e0a6      	b.n	800539a <UART_SetConfig+0x22a>
 800524c:	231b      	movs	r3, #27
 800524e:	2218      	movs	r2, #24
 8005250:	189b      	adds	r3, r3, r2
 8005252:	19db      	adds	r3, r3, r7
 8005254:	2208      	movs	r2, #8
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e09f      	b.n	800539a <UART_SetConfig+0x22a>
 800525a:	231b      	movs	r3, #27
 800525c:	2218      	movs	r2, #24
 800525e:	189b      	adds	r3, r3, r2
 8005260:	19db      	adds	r3, r3, r7
 8005262:	2210      	movs	r2, #16
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e098      	b.n	800539a <UART_SetConfig+0x22a>
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a96      	ldr	r2, [pc, #600]	@ (80054c8 <UART_SetConfig+0x358>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d131      	bne.n	80052d6 <UART_SetConfig+0x166>
 8005272:	4b94      	ldr	r3, [pc, #592]	@ (80054c4 <UART_SetConfig+0x354>)
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	220c      	movs	r2, #12
 8005278:	4013      	ands	r3, r2
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d01d      	beq.n	80052ba <UART_SetConfig+0x14a>
 800527e:	d823      	bhi.n	80052c8 <UART_SetConfig+0x158>
 8005280:	2b08      	cmp	r3, #8
 8005282:	d00c      	beq.n	800529e <UART_SetConfig+0x12e>
 8005284:	d820      	bhi.n	80052c8 <UART_SetConfig+0x158>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <UART_SetConfig+0x120>
 800528a:	2b04      	cmp	r3, #4
 800528c:	d00e      	beq.n	80052ac <UART_SetConfig+0x13c>
 800528e:	e01b      	b.n	80052c8 <UART_SetConfig+0x158>
 8005290:	231b      	movs	r3, #27
 8005292:	2218      	movs	r2, #24
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e07d      	b.n	800539a <UART_SetConfig+0x22a>
 800529e:	231b      	movs	r3, #27
 80052a0:	2218      	movs	r2, #24
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2202      	movs	r2, #2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e076      	b.n	800539a <UART_SetConfig+0x22a>
 80052ac:	231b      	movs	r3, #27
 80052ae:	2218      	movs	r2, #24
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2204      	movs	r2, #4
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e06f      	b.n	800539a <UART_SetConfig+0x22a>
 80052ba:	231b      	movs	r3, #27
 80052bc:	2218      	movs	r2, #24
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	19db      	adds	r3, r3, r7
 80052c2:	2208      	movs	r2, #8
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e068      	b.n	800539a <UART_SetConfig+0x22a>
 80052c8:	231b      	movs	r3, #27
 80052ca:	2218      	movs	r2, #24
 80052cc:	189b      	adds	r3, r3, r2
 80052ce:	19db      	adds	r3, r3, r7
 80052d0:	2210      	movs	r2, #16
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e061      	b.n	800539a <UART_SetConfig+0x22a>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7c      	ldr	r2, [pc, #496]	@ (80054cc <UART_SetConfig+0x35c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d106      	bne.n	80052ee <UART_SetConfig+0x17e>
 80052e0:	231b      	movs	r3, #27
 80052e2:	2218      	movs	r2, #24
 80052e4:	189b      	adds	r3, r3, r2
 80052e6:	19db      	adds	r3, r3, r7
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e055      	b.n	800539a <UART_SetConfig+0x22a>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a77      	ldr	r2, [pc, #476]	@ (80054d0 <UART_SetConfig+0x360>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d106      	bne.n	8005306 <UART_SetConfig+0x196>
 80052f8:	231b      	movs	r3, #27
 80052fa:	2218      	movs	r2, #24
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	19db      	adds	r3, r3, r7
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e049      	b.n	800539a <UART_SetConfig+0x22a>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6b      	ldr	r2, [pc, #428]	@ (80054b8 <UART_SetConfig+0x348>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d13e      	bne.n	800538e <UART_SetConfig+0x21e>
 8005310:	4b6c      	ldr	r3, [pc, #432]	@ (80054c4 <UART_SetConfig+0x354>)
 8005312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005314:	23c0      	movs	r3, #192	@ 0xc0
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4013      	ands	r3, r2
 800531a:	22c0      	movs	r2, #192	@ 0xc0
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <UART_SetConfig+0x202>
 8005322:	22c0      	movs	r2, #192	@ 0xc0
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	4293      	cmp	r3, r2
 8005328:	d82a      	bhi.n	8005380 <UART_SetConfig+0x210>
 800532a:	2280      	movs	r2, #128	@ 0x80
 800532c:	0112      	lsls	r2, r2, #4
 800532e:	4293      	cmp	r3, r2
 8005330:	d011      	beq.n	8005356 <UART_SetConfig+0x1e6>
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	0112      	lsls	r2, r2, #4
 8005336:	4293      	cmp	r3, r2
 8005338:	d822      	bhi.n	8005380 <UART_SetConfig+0x210>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <UART_SetConfig+0x1d8>
 800533e:	2280      	movs	r2, #128	@ 0x80
 8005340:	00d2      	lsls	r2, r2, #3
 8005342:	4293      	cmp	r3, r2
 8005344:	d00e      	beq.n	8005364 <UART_SetConfig+0x1f4>
 8005346:	e01b      	b.n	8005380 <UART_SetConfig+0x210>
 8005348:	231b      	movs	r3, #27
 800534a:	2218      	movs	r2, #24
 800534c:	189b      	adds	r3, r3, r2
 800534e:	19db      	adds	r3, r3, r7
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e021      	b.n	800539a <UART_SetConfig+0x22a>
 8005356:	231b      	movs	r3, #27
 8005358:	2218      	movs	r2, #24
 800535a:	189b      	adds	r3, r3, r2
 800535c:	19db      	adds	r3, r3, r7
 800535e:	2202      	movs	r2, #2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e01a      	b.n	800539a <UART_SetConfig+0x22a>
 8005364:	231b      	movs	r3, #27
 8005366:	2218      	movs	r2, #24
 8005368:	189b      	adds	r3, r3, r2
 800536a:	19db      	adds	r3, r3, r7
 800536c:	2204      	movs	r2, #4
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e013      	b.n	800539a <UART_SetConfig+0x22a>
 8005372:	231b      	movs	r3, #27
 8005374:	2218      	movs	r2, #24
 8005376:	189b      	adds	r3, r3, r2
 8005378:	19db      	adds	r3, r3, r7
 800537a:	2208      	movs	r2, #8
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e00c      	b.n	800539a <UART_SetConfig+0x22a>
 8005380:	231b      	movs	r3, #27
 8005382:	2218      	movs	r2, #24
 8005384:	189b      	adds	r3, r3, r2
 8005386:	19db      	adds	r3, r3, r7
 8005388:	2210      	movs	r2, #16
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e005      	b.n	800539a <UART_SetConfig+0x22a>
 800538e:	231b      	movs	r3, #27
 8005390:	2218      	movs	r2, #24
 8005392:	189b      	adds	r3, r3, r2
 8005394:	19db      	adds	r3, r3, r7
 8005396:	2210      	movs	r2, #16
 8005398:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a46      	ldr	r2, [pc, #280]	@ (80054b8 <UART_SetConfig+0x348>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d000      	beq.n	80053a6 <UART_SetConfig+0x236>
 80053a4:	e09a      	b.n	80054dc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053a6:	231b      	movs	r3, #27
 80053a8:	2218      	movs	r2, #24
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	19db      	adds	r3, r3, r7
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d01d      	beq.n	80053f0 <UART_SetConfig+0x280>
 80053b4:	dc20      	bgt.n	80053f8 <UART_SetConfig+0x288>
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d015      	beq.n	80053e6 <UART_SetConfig+0x276>
 80053ba:	dc1d      	bgt.n	80053f8 <UART_SetConfig+0x288>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <UART_SetConfig+0x256>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d005      	beq.n	80053d0 <UART_SetConfig+0x260>
 80053c4:	e018      	b.n	80053f8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c6:	f7ff fc57 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 80053ca:	0003      	movs	r3, r0
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ce:	e01c      	b.n	800540a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d0:	4b3c      	ldr	r3, [pc, #240]	@ (80054c4 <UART_SetConfig+0x354>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	4013      	ands	r3, r2
 80053d8:	d002      	beq.n	80053e0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053da:	4b3e      	ldr	r3, [pc, #248]	@ (80054d4 <UART_SetConfig+0x364>)
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053de:	e014      	b.n	800540a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b3d      	ldr	r3, [pc, #244]	@ (80054d8 <UART_SetConfig+0x368>)
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053e4:	e011      	b.n	800540a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7ff fb97 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 80053ea:	0003      	movs	r3, r0
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ee:	e00c      	b.n	800540a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053f6:	e008      	b.n	800540a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80053fc:	231a      	movs	r3, #26
 80053fe:	2218      	movs	r2, #24
 8005400:	189b      	adds	r3, r3, r2
 8005402:	19db      	adds	r3, r3, r7
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
        break;
 8005408:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d100      	bne.n	8005412 <UART_SetConfig+0x2a2>
 8005410:	e133      	b.n	800567a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	0013      	movs	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	189b      	adds	r3, r3, r2
 800541c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541e:	429a      	cmp	r2, r3
 8005420:	d305      	bcc.n	800542e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542a:	429a      	cmp	r2, r3
 800542c:	d906      	bls.n	800543c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800542e:	231a      	movs	r3, #26
 8005430:	2218      	movs	r2, #24
 8005432:	189b      	adds	r3, r3, r2
 8005434:	19db      	adds	r3, r3, r7
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e11e      	b.n	800567a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	6939      	ldr	r1, [r7, #16]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	000b      	movs	r3, r1
 800544a:	0e1b      	lsrs	r3, r3, #24
 800544c:	0010      	movs	r0, r2
 800544e:	0205      	lsls	r5, r0, #8
 8005450:	431d      	orrs	r5, r3
 8005452:	000b      	movs	r3, r1
 8005454:	021c      	lsls	r4, r3, #8
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68b8      	ldr	r0, [r7, #8]
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	1900      	adds	r0, r0, r4
 8005468:	4169      	adcs	r1, r5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	2300      	movs	r3, #0
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f7fb f816 	bl	80004a8 <__aeabi_uldivmod>
 800547c:	0002      	movs	r2, r0
 800547e:	000b      	movs	r3, r1
 8005480:	0013      	movs	r3, r2
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005486:	23c0      	movs	r3, #192	@ 0xc0
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	429a      	cmp	r2, r3
 800548c:	d309      	bcc.n	80054a2 <UART_SetConfig+0x332>
 800548e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	035b      	lsls	r3, r3, #13
 8005494:	429a      	cmp	r2, r3
 8005496:	d204      	bcs.n	80054a2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e0eb      	b.n	800567a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80054a2:	231a      	movs	r3, #26
 80054a4:	2218      	movs	r2, #24
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	19db      	adds	r3, r3, r7
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e0e4      	b.n	800567a <UART_SetConfig+0x50a>
 80054b0:	efff69f3 	.word	0xefff69f3
 80054b4:	ffffcfff 	.word	0xffffcfff
 80054b8:	40004800 	.word	0x40004800
 80054bc:	fffff4ff 	.word	0xfffff4ff
 80054c0:	40013800 	.word	0x40013800
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40004400 	.word	0x40004400
 80054cc:	40004c00 	.word	0x40004c00
 80054d0:	40005000 	.word	0x40005000
 80054d4:	003d0900 	.word	0x003d0900
 80054d8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d000      	beq.n	80054ea <UART_SetConfig+0x37a>
 80054e8:	e070      	b.n	80055cc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80054ea:	231b      	movs	r3, #27
 80054ec:	2218      	movs	r2, #24
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	19db      	adds	r3, r3, r7
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d822      	bhi.n	800553e <UART_SetConfig+0x3ce>
 80054f8:	009a      	lsls	r2, r3, #2
 80054fa:	4b67      	ldr	r3, [pc, #412]	@ (8005698 <UART_SetConfig+0x528>)
 80054fc:	18d3      	adds	r3, r2, r3
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005502:	f7ff fbb9 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 8005506:	0003      	movs	r3, r0
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800550a:	e021      	b.n	8005550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7ff fbca 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8005510:	0003      	movs	r3, r0
 8005512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005514:	e01c      	b.n	8005550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005516:	4b61      	ldr	r3, [pc, #388]	@ (800569c <UART_SetConfig+0x52c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2210      	movs	r2, #16
 800551c:	4013      	ands	r3, r2
 800551e:	d002      	beq.n	8005526 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005520:	4b5f      	ldr	r3, [pc, #380]	@ (80056a0 <UART_SetConfig+0x530>)
 8005522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005524:	e014      	b.n	8005550 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005526:	4b5f      	ldr	r3, [pc, #380]	@ (80056a4 <UART_SetConfig+0x534>)
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800552a:	e011      	b.n	8005550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800552c:	f7ff faf4 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8005530:	0003      	movs	r3, r0
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005534:	e00c      	b.n	8005550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005536:	2380      	movs	r3, #128	@ 0x80
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800553c:	e008      	b.n	8005550 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005542:	231a      	movs	r3, #26
 8005544:	2218      	movs	r2, #24
 8005546:	189b      	adds	r3, r3, r2
 8005548:	19db      	adds	r3, r3, r7
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
        break;
 800554e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d100      	bne.n	8005558 <UART_SetConfig+0x3e8>
 8005556:	e090      	b.n	800567a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555a:	005a      	lsls	r2, r3, #1
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	18d2      	adds	r2, r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	0019      	movs	r1, r3
 800556a:	0010      	movs	r0, r2
 800556c:	f7fa fde8 	bl	8000140 <__udivsi3>
 8005570:	0003      	movs	r3, r0
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d921      	bls.n	80055be <UART_SetConfig+0x44e>
 800557a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	025b      	lsls	r3, r3, #9
 8005580:	429a      	cmp	r2, r3
 8005582:	d21c      	bcs.n	80055be <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	b29a      	uxth	r2, r3
 8005588:	200e      	movs	r0, #14
 800558a:	2418      	movs	r4, #24
 800558c:	1903      	adds	r3, r0, r4
 800558e:	19db      	adds	r3, r3, r7
 8005590:	210f      	movs	r1, #15
 8005592:	438a      	bics	r2, r1
 8005594:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	2207      	movs	r2, #7
 800559e:	4013      	ands	r3, r2
 80055a0:	b299      	uxth	r1, r3
 80055a2:	1903      	adds	r3, r0, r4
 80055a4:	19db      	adds	r3, r3, r7
 80055a6:	1902      	adds	r2, r0, r4
 80055a8:	19d2      	adds	r2, r2, r7
 80055aa:	8812      	ldrh	r2, [r2, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1902      	adds	r2, r0, r4
 80055b6:	19d2      	adds	r2, r2, r7
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e05d      	b.n	800567a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80055be:	231a      	movs	r3, #26
 80055c0:	2218      	movs	r2, #24
 80055c2:	189b      	adds	r3, r3, r2
 80055c4:	19db      	adds	r3, r3, r7
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e056      	b.n	800567a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055cc:	231b      	movs	r3, #27
 80055ce:	2218      	movs	r2, #24
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	19db      	adds	r3, r3, r7
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d822      	bhi.n	8005620 <UART_SetConfig+0x4b0>
 80055da:	009a      	lsls	r2, r3, #2
 80055dc:	4b32      	ldr	r3, [pc, #200]	@ (80056a8 <UART_SetConfig+0x538>)
 80055de:	18d3      	adds	r3, r2, r3
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e4:	f7ff fb48 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 80055e8:	0003      	movs	r3, r0
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ec:	e021      	b.n	8005632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ee:	f7ff fb59 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 80055f2:	0003      	movs	r3, r0
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055f6:	e01c      	b.n	8005632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f8:	4b28      	ldr	r3, [pc, #160]	@ (800569c <UART_SetConfig+0x52c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2210      	movs	r2, #16
 80055fe:	4013      	ands	r3, r2
 8005600:	d002      	beq.n	8005608 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005602:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <UART_SetConfig+0x530>)
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005606:	e014      	b.n	8005632 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005608:	4b26      	ldr	r3, [pc, #152]	@ (80056a4 <UART_SetConfig+0x534>)
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800560c:	e011      	b.n	8005632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560e:	f7ff fa83 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8005612:	0003      	movs	r3, r0
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005616:	e00c      	b.n	8005632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800561e:	e008      	b.n	8005632 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005624:	231a      	movs	r3, #26
 8005626:	2218      	movs	r2, #24
 8005628:	189b      	adds	r3, r3, r2
 800562a:	19db      	adds	r3, r3, r7
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]
        break;
 8005630:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	085a      	lsrs	r2, r3, #1
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	18d2      	adds	r2, r2, r3
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0019      	movs	r1, r3
 8005648:	0010      	movs	r0, r2
 800564a:	f7fa fd79 	bl	8000140 <__udivsi3>
 800564e:	0003      	movs	r3, r0
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	2b0f      	cmp	r3, #15
 8005656:	d90a      	bls.n	800566e <UART_SetConfig+0x4fe>
 8005658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	429a      	cmp	r2, r3
 8005660:	d205      	bcs.n	800566e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	b29a      	uxth	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800566e:	231a      	movs	r3, #26
 8005670:	2218      	movs	r2, #24
 8005672:	189b      	adds	r3, r3, r2
 8005674:	19db      	adds	r3, r3, r7
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2200      	movs	r2, #0
 800567e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2200      	movs	r2, #0
 8005684:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005686:	231a      	movs	r3, #26
 8005688:	2218      	movs	r2, #24
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	781b      	ldrb	r3, [r3, #0]
}
 8005690:	0018      	movs	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	b00e      	add	sp, #56	@ 0x38
 8005696:	bdb0      	pop	{r4, r5, r7, pc}
 8005698:	0800a498 	.word	0x0800a498
 800569c:	40021000 	.word	0x40021000
 80056a0:	003d0900 	.word	0x003d0900
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	0800a4bc 	.word	0x0800a4bc

080056ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	2201      	movs	r2, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a4a      	ldr	r2, [pc, #296]	@ (80057f0 <UART_AdvFeatureConfig+0x144>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	2202      	movs	r2, #2
 80056dc:	4013      	ands	r3, r2
 80056de:	d00b      	beq.n	80056f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4a43      	ldr	r2, [pc, #268]	@ (80057f4 <UART_AdvFeatureConfig+0x148>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	0019      	movs	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	2204      	movs	r2, #4
 80056fe:	4013      	ands	r3, r2
 8005700:	d00b      	beq.n	800571a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a3b      	ldr	r2, [pc, #236]	@ (80057f8 <UART_AdvFeatureConfig+0x14c>)
 800570a:	4013      	ands	r3, r2
 800570c:	0019      	movs	r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	2208      	movs	r2, #8
 8005720:	4013      	ands	r3, r2
 8005722:	d00b      	beq.n	800573c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4a34      	ldr	r2, [pc, #208]	@ (80057fc <UART_AdvFeatureConfig+0x150>)
 800572c:	4013      	ands	r3, r2
 800572e:	0019      	movs	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	2210      	movs	r2, #16
 8005742:	4013      	ands	r3, r2
 8005744:	d00b      	beq.n	800575e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a2c      	ldr	r2, [pc, #176]	@ (8005800 <UART_AdvFeatureConfig+0x154>)
 800574e:	4013      	ands	r3, r2
 8005750:	0019      	movs	r1, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	2220      	movs	r2, #32
 8005764:	4013      	ands	r3, r2
 8005766:	d00b      	beq.n	8005780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4a25      	ldr	r2, [pc, #148]	@ (8005804 <UART_AdvFeatureConfig+0x158>)
 8005770:	4013      	ands	r3, r2
 8005772:	0019      	movs	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	2240      	movs	r2, #64	@ 0x40
 8005786:	4013      	ands	r3, r2
 8005788:	d01d      	beq.n	80057c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <UART_AdvFeatureConfig+0x15c>)
 8005792:	4013      	ands	r3, r2
 8005794:	0019      	movs	r1, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	035b      	lsls	r3, r3, #13
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10b      	bne.n	80057c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	@ (800580c <UART_AdvFeatureConfig+0x160>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	2280      	movs	r2, #128	@ 0x80
 80057cc:	4013      	ands	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005810 <UART_AdvFeatureConfig+0x164>)
 80057d8:	4013      	ands	r3, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }
}
 80057e8:	46c0      	nop			@ (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b002      	add	sp, #8
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	fffdffff 	.word	0xfffdffff
 80057f4:	fffeffff 	.word	0xfffeffff
 80057f8:	fffbffff 	.word	0xfffbffff
 80057fc:	ffff7fff 	.word	0xffff7fff
 8005800:	ffffefff 	.word	0xffffefff
 8005804:	ffffdfff 	.word	0xffffdfff
 8005808:	ffefffff 	.word	0xffefffff
 800580c:	ff9fffff 	.word	0xff9fffff
 8005810:	fff7ffff 	.word	0xfff7ffff

08005814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b092      	sub	sp, #72	@ 0x48
 8005818:	af02      	add	r7, sp, #8
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2284      	movs	r2, #132	@ 0x84
 8005820:	2100      	movs	r1, #0
 8005822:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005824:	f7fd fe0e 	bl	8003444 <HAL_GetTick>
 8005828:	0003      	movs	r3, r0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2208      	movs	r2, #8
 8005834:	4013      	ands	r3, r2
 8005836:	2b08      	cmp	r3, #8
 8005838:	d12c      	bne.n	8005894 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583c:	2280      	movs	r2, #128	@ 0x80
 800583e:	0391      	lsls	r1, r2, #14
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4a46      	ldr	r2, [pc, #280]	@ (800595c <UART_CheckIdleState+0x148>)
 8005844:	9200      	str	r2, [sp, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	f000 f88c 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 800584c:	1e03      	subs	r3, r0, #0
 800584e:	d021      	beq.n	8005894 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005850:	f3ef 8310 	mrs	r3, PRIMASK
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800585a:	2301      	movs	r3, #1
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	f383 8810 	msr	PRIMASK, r3
}
 8005864:	46c0      	nop			@ (mov r8, r8)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2180      	movs	r1, #128	@ 0x80
 8005872:	438a      	bics	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	f383 8810 	msr	PRIMASK, r3
}
 8005880:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2278      	movs	r2, #120	@ 0x78
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e05f      	b.n	8005954 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2204      	movs	r2, #4
 800589c:	4013      	ands	r3, r2
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d146      	bne.n	8005930 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a4:	2280      	movs	r2, #128	@ 0x80
 80058a6:	03d1      	lsls	r1, r2, #15
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <UART_CheckIdleState+0x148>)
 80058ac:	9200      	str	r2, [sp, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f000 f858 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d03b      	beq.n	8005930 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c2:	2301      	movs	r3, #1
 80058c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4921      	ldr	r1, [pc, #132]	@ (8005960 <UART_CheckIdleState+0x14c>)
 80058da:	400a      	ands	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ea:	f3ef 8310 	mrs	r3, PRIMASK
 80058ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80058f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f4:	2301      	movs	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2280      	movs	r2, #128	@ 0x80
 8005920:	2120      	movs	r1, #32
 8005922:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2278      	movs	r2, #120	@ 0x78
 8005928:	2100      	movs	r1, #0
 800592a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e011      	b.n	8005954 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2280      	movs	r2, #128	@ 0x80
 800593a:	2120      	movs	r1, #32
 800593c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2278      	movs	r2, #120	@ 0x78
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b010      	add	sp, #64	@ 0x40
 800595a:	bd80      	pop	{r7, pc}
 800595c:	01ffffff 	.word	0x01ffffff
 8005960:	fffffedf 	.word	0xfffffedf

08005964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005974:	e04b      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	3301      	adds	r3, #1
 800597a:	d048      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597c:	f7fd fd62 	bl	8003444 <HAL_GetTick>
 8005980:	0002      	movs	r2, r0
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <UART_WaitOnFlagUntilTimeout+0x2e>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e04b      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2204      	movs	r2, #4
 800599e:	4013      	ands	r3, r2
 80059a0:	d035      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2208      	movs	r2, #8
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d111      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 f83c 	bl	8005a38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2284      	movs	r2, #132	@ 0x84
 80059c4:	2108      	movs	r1, #8
 80059c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2278      	movs	r2, #120	@ 0x78
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e02c      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	401a      	ands	r2, r3
 80059e0:	2380      	movs	r3, #128	@ 0x80
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d112      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2280      	movs	r2, #128	@ 0x80
 80059ee:	0112      	lsls	r2, r2, #4
 80059f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 f81f 	bl	8005a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2284      	movs	r2, #132	@ 0x84
 80059fe:	2120      	movs	r1, #32
 8005a00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2278      	movs	r2, #120	@ 0x78
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	425a      	negs	r2, r3
 8005a1e:	4153      	adcs	r3, r2
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	001a      	movs	r2, r3
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d0a4      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b004      	add	sp, #16
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	@ 0x38
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a40:	f3ef 8310 	mrs	r3, PRIMASK
 8005a44:	617b      	str	r3, [r7, #20]
  return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f383 8810 	msr	PRIMASK, r3
}
 8005a54:	46c0      	nop			@ (mov r8, r8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4926      	ldr	r1, [pc, #152]	@ (8005afc <UART_EndRxTransfer+0xc4>)
 8005a62:	400a      	ands	r2, r1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f383 8810 	msr	PRIMASK, r3
}
 8005a70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a72:	f3ef 8310 	mrs	r3, PRIMASK
 8005a76:	623b      	str	r3, [r7, #32]
  return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	f383 8810 	msr	PRIMASK, r3
}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2101      	movs	r1, #1
 8005a94:	438a      	bics	r2, r1
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d118      	bne.n	8005ade <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aac:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			@ (mov r8, r8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2110      	movs	r1, #16
 8005ace:	438a      	bics	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2280      	movs	r2, #128	@ 0x80
 8005ae2:	2120      	movs	r1, #32
 8005ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b00e      	add	sp, #56	@ 0x38
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	fffffedf 	.word	0xfffffedf

08005b00 <__cvt>:
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b02:	001f      	movs	r7, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	0016      	movs	r6, r2
 8005b08:	b08b      	sub	sp, #44	@ 0x2c
 8005b0a:	429f      	cmp	r7, r3
 8005b0c:	da04      	bge.n	8005b18 <__cvt+0x18>
 8005b0e:	2180      	movs	r1, #128	@ 0x80
 8005b10:	0609      	lsls	r1, r1, #24
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	001f      	movs	r7, r3
 8005b16:	232d      	movs	r3, #45	@ 0x2d
 8005b18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b1a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005b1c:	7013      	strb	r3, [r2, #0]
 8005b1e:	2320      	movs	r3, #32
 8005b20:	2203      	movs	r2, #3
 8005b22:	439d      	bics	r5, r3
 8005b24:	2d46      	cmp	r5, #70	@ 0x46
 8005b26:	d007      	beq.n	8005b38 <__cvt+0x38>
 8005b28:	002b      	movs	r3, r5
 8005b2a:	3b45      	subs	r3, #69	@ 0x45
 8005b2c:	4259      	negs	r1, r3
 8005b2e:	414b      	adcs	r3, r1
 8005b30:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005b32:	3a01      	subs	r2, #1
 8005b34:	18cb      	adds	r3, r1, r3
 8005b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b38:	ab09      	add	r3, sp, #36	@ 0x24
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	ab08      	add	r3, sp, #32
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b42:	9200      	str	r2, [sp, #0]
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b48:	0032      	movs	r2, r6
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	003b      	movs	r3, r7
 8005b4e:	f001 f89b 	bl	8006c88 <_dtoa_r>
 8005b52:	0004      	movs	r4, r0
 8005b54:	2d47      	cmp	r5, #71	@ 0x47
 8005b56:	d11b      	bne.n	8005b90 <__cvt+0x90>
 8005b58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d511      	bpl.n	8005b82 <__cvt+0x82>
 8005b5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b60:	18c3      	adds	r3, r0, r3
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2300      	movs	r3, #0
 8005b68:	0030      	movs	r0, r6
 8005b6a:	0039      	movs	r1, r7
 8005b6c:	f7fa fc6e 	bl	800044c <__aeabi_dcmpeq>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d001      	beq.n	8005b78 <__cvt+0x78>
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b78:	2230      	movs	r2, #48	@ 0x30
 8005b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b7c:	9907      	ldr	r1, [sp, #28]
 8005b7e:	428b      	cmp	r3, r1
 8005b80:	d320      	bcc.n	8005bc4 <__cvt+0xc4>
 8005b82:	0020      	movs	r0, r4
 8005b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b88:	1b1b      	subs	r3, r3, r4
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	b00b      	add	sp, #44	@ 0x2c
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b92:	18c3      	adds	r3, r0, r3
 8005b94:	9307      	str	r3, [sp, #28]
 8005b96:	2d46      	cmp	r5, #70	@ 0x46
 8005b98:	d1e4      	bne.n	8005b64 <__cvt+0x64>
 8005b9a:	7803      	ldrb	r3, [r0, #0]
 8005b9c:	2b30      	cmp	r3, #48	@ 0x30
 8005b9e:	d10c      	bne.n	8005bba <__cvt+0xba>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	0039      	movs	r1, r7
 8005ba8:	f7fa fc50 	bl	800044c <__aeabi_dcmpeq>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d104      	bne.n	8005bba <__cvt+0xba>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005bbc:	9a07      	ldr	r2, [sp, #28]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	e7ce      	b.n	8005b62 <__cvt+0x62>
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e7d6      	b.n	8005b7a <__cvt+0x7a>

08005bcc <__exponent>:
 8005bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bce:	232b      	movs	r3, #43	@ 0x2b
 8005bd0:	0005      	movs	r5, r0
 8005bd2:	000c      	movs	r4, r1
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	7002      	strb	r2, [r0, #0]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	da01      	bge.n	8005be0 <__exponent+0x14>
 8005bdc:	424c      	negs	r4, r1
 8005bde:	3302      	adds	r3, #2
 8005be0:	706b      	strb	r3, [r5, #1]
 8005be2:	2c09      	cmp	r4, #9
 8005be4:	dd2c      	ble.n	8005c40 <__exponent+0x74>
 8005be6:	ab02      	add	r3, sp, #8
 8005be8:	1dde      	adds	r6, r3, #7
 8005bea:	0020      	movs	r0, r4
 8005bec:	210a      	movs	r1, #10
 8005bee:	f7fa fc17 	bl	8000420 <__aeabi_idivmod>
 8005bf2:	0037      	movs	r7, r6
 8005bf4:	3130      	adds	r1, #48	@ 0x30
 8005bf6:	3e01      	subs	r6, #1
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	7031      	strb	r1, [r6, #0]
 8005bfc:	210a      	movs	r1, #10
 8005bfe:	9401      	str	r4, [sp, #4]
 8005c00:	f7fa fb28 	bl	8000254 <__divsi3>
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	0004      	movs	r4, r0
 8005c08:	2b63      	cmp	r3, #99	@ 0x63
 8005c0a:	dcee      	bgt.n	8005bea <__exponent+0x1e>
 8005c0c:	1eba      	subs	r2, r7, #2
 8005c0e:	1ca8      	adds	r0, r5, #2
 8005c10:	0001      	movs	r1, r0
 8005c12:	0013      	movs	r3, r2
 8005c14:	3430      	adds	r4, #48	@ 0x30
 8005c16:	7014      	strb	r4, [r2, #0]
 8005c18:	ac02      	add	r4, sp, #8
 8005c1a:	3407      	adds	r4, #7
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d80a      	bhi.n	8005c36 <__exponent+0x6a>
 8005c20:	2300      	movs	r3, #0
 8005c22:	42a2      	cmp	r2, r4
 8005c24:	d803      	bhi.n	8005c2e <__exponent+0x62>
 8005c26:	3309      	adds	r3, #9
 8005c28:	aa02      	add	r2, sp, #8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	1bdb      	subs	r3, r3, r7
 8005c2e:	18c0      	adds	r0, r0, r3
 8005c30:	1b40      	subs	r0, r0, r5
 8005c32:	b005      	add	sp, #20
 8005c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c36:	781c      	ldrb	r4, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	700c      	strb	r4, [r1, #0]
 8005c3c:	3101      	adds	r1, #1
 8005c3e:	e7eb      	b.n	8005c18 <__exponent+0x4c>
 8005c40:	2330      	movs	r3, #48	@ 0x30
 8005c42:	18e4      	adds	r4, r4, r3
 8005c44:	70ab      	strb	r3, [r5, #2]
 8005c46:	1d28      	adds	r0, r5, #4
 8005c48:	70ec      	strb	r4, [r5, #3]
 8005c4a:	e7f1      	b.n	8005c30 <__exponent+0x64>

08005c4c <_printf_float>:
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4e:	b097      	sub	sp, #92	@ 0x5c
 8005c50:	000d      	movs	r5, r1
 8005c52:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c54:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005c56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c58:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c5a:	f000 fef9 	bl	8006a50 <_localeconv_r>
 8005c5e:	6803      	ldr	r3, [r0, #0]
 8005c60:	0018      	movs	r0, r3
 8005c62:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c64:	f7fa fa50 	bl	8000108 <strlen>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005c6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8005c6e:	7e2b      	ldrb	r3, [r5, #24]
 8005c70:	2207      	movs	r2, #7
 8005c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	05c9      	lsls	r1, r1, #23
 8005c7e:	d545      	bpl.n	8005d0c <_printf_float+0xc0>
 8005c80:	189b      	adds	r3, r3, r2
 8005c82:	4393      	bics	r3, r2
 8005c84:	001a      	movs	r2, r3
 8005c86:	3208      	adds	r2, #8
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	681e      	ldr	r6, [r3, #0]
 8005c8e:	685f      	ldr	r7, [r3, #4]
 8005c90:	007b      	lsls	r3, r7, #1
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c96:	9610      	str	r6, [sp, #64]	@ 0x40
 8005c98:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005c9a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005c9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005c9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8005f40 <_printf_float+0x2f4>)
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	f7fc fd14 	bl	80026d0 <__aeabi_dcmpun>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d131      	bne.n	8005d10 <_printf_float+0xc4>
 8005cac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005cae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4ba3      	ldr	r3, [pc, #652]	@ (8005f40 <_printf_float+0x2f4>)
 8005cb4:	4252      	negs	r2, r2
 8005cb6:	f7fa fbd9 	bl	800046c <__aeabi_dcmple>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d128      	bne.n	8005d10 <_printf_float+0xc4>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	0030      	movs	r0, r6
 8005cc4:	0039      	movs	r1, r7
 8005cc6:	f7fa fbc7 	bl	8000458 <__aeabi_dcmplt>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d003      	beq.n	8005cd6 <_printf_float+0x8a>
 8005cce:	002b      	movs	r3, r5
 8005cd0:	222d      	movs	r2, #45	@ 0x2d
 8005cd2:	3343      	adds	r3, #67	@ 0x43
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cd8:	4f9a      	ldr	r7, [pc, #616]	@ (8005f44 <_printf_float+0x2f8>)
 8005cda:	2b47      	cmp	r3, #71	@ 0x47
 8005cdc:	d900      	bls.n	8005ce0 <_printf_float+0x94>
 8005cde:	4f9a      	ldr	r7, [pc, #616]	@ (8005f48 <_printf_float+0x2fc>)
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ce6:	612b      	str	r3, [r5, #16]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	439a      	bics	r2, r3
 8005cec:	602a      	str	r2, [r5, #0]
 8005cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cf0:	0029      	movs	r1, r5
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf8:	aa15      	add	r2, sp, #84	@ 0x54
 8005cfa:	f000 f9e5 	bl	80060c8 <_printf_common>
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d000      	beq.n	8005d04 <_printf_float+0xb8>
 8005d02:	e09f      	b.n	8005e44 <_printf_float+0x1f8>
 8005d04:	2001      	movs	r0, #1
 8005d06:	4240      	negs	r0, r0
 8005d08:	b017      	add	sp, #92	@ 0x5c
 8005d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	e7b8      	b.n	8005c82 <_printf_float+0x36>
 8005d10:	0032      	movs	r2, r6
 8005d12:	003b      	movs	r3, r7
 8005d14:	0030      	movs	r0, r6
 8005d16:	0039      	movs	r1, r7
 8005d18:	f7fc fcda 	bl	80026d0 <__aeabi_dcmpun>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d00b      	beq.n	8005d38 <_printf_float+0xec>
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_float+0xe0>
 8005d24:	002b      	movs	r3, r5
 8005d26:	222d      	movs	r2, #45	@ 0x2d
 8005d28:	3343      	adds	r3, #67	@ 0x43
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d2e:	4f87      	ldr	r7, [pc, #540]	@ (8005f4c <_printf_float+0x300>)
 8005d30:	2b47      	cmp	r3, #71	@ 0x47
 8005d32:	d9d5      	bls.n	8005ce0 <_printf_float+0x94>
 8005d34:	4f86      	ldr	r7, [pc, #536]	@ (8005f50 <_printf_float+0x304>)
 8005d36:	e7d3      	b.n	8005ce0 <_printf_float+0x94>
 8005d38:	2220      	movs	r2, #32
 8005d3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005d3c:	686b      	ldr	r3, [r5, #4]
 8005d3e:	4394      	bics	r4, r2
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	d146      	bne.n	8005dd2 <_printf_float+0x186>
 8005d44:	3307      	adds	r3, #7
 8005d46:	606b      	str	r3, [r5, #4]
 8005d48:	2380      	movs	r3, #128	@ 0x80
 8005d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	2200      	movs	r2, #0
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	9206      	str	r2, [sp, #24]
 8005d56:	aa14      	add	r2, sp, #80	@ 0x50
 8005d58:	9205      	str	r2, [sp, #20]
 8005d5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d5c:	a90a      	add	r1, sp, #40	@ 0x28
 8005d5e:	9204      	str	r2, [sp, #16]
 8005d60:	aa13      	add	r2, sp, #76	@ 0x4c
 8005d62:	9203      	str	r2, [sp, #12]
 8005d64:	2223      	movs	r2, #35	@ 0x23
 8005d66:	1852      	adds	r2, r2, r1
 8005d68:	9202      	str	r2, [sp, #8]
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	686b      	ldr	r3, [r5, #4]
 8005d6e:	0032      	movs	r2, r6
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d74:	003b      	movs	r3, r7
 8005d76:	f7ff fec3 	bl	8005b00 <__cvt>
 8005d7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d7c:	0007      	movs	r7, r0
 8005d7e:	2c47      	cmp	r4, #71	@ 0x47
 8005d80:	d12d      	bne.n	8005dde <_printf_float+0x192>
 8005d82:	1cd3      	adds	r3, r2, #3
 8005d84:	db02      	blt.n	8005d8c <_printf_float+0x140>
 8005d86:	686b      	ldr	r3, [r5, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	dd48      	ble.n	8005e1e <_printf_float+0x1d2>
 8005d8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005d90:	3b02      	subs	r3, #2
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d96:	0028      	movs	r0, r5
 8005d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d9a:	3901      	subs	r1, #1
 8005d9c:	3050      	adds	r0, #80	@ 0x50
 8005d9e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005da0:	f7ff ff14 	bl	8005bcc <__exponent>
 8005da4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005da6:	0004      	movs	r4, r0
 8005da8:	1813      	adds	r3, r2, r0
 8005daa:	612b      	str	r3, [r5, #16]
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	dc02      	bgt.n	8005db6 <_printf_float+0x16a>
 8005db0:	682a      	ldr	r2, [r5, #0]
 8005db2:	07d2      	lsls	r2, r2, #31
 8005db4:	d501      	bpl.n	8005dba <_printf_float+0x16e>
 8005db6:	3301      	adds	r3, #1
 8005db8:	612b      	str	r3, [r5, #16]
 8005dba:	2323      	movs	r3, #35	@ 0x23
 8005dbc:	aa0a      	add	r2, sp, #40	@ 0x28
 8005dbe:	189b      	adds	r3, r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d100      	bne.n	8005dc8 <_printf_float+0x17c>
 8005dc6:	e792      	b.n	8005cee <_printf_float+0xa2>
 8005dc8:	002b      	movs	r3, r5
 8005dca:	222d      	movs	r2, #45	@ 0x2d
 8005dcc:	3343      	adds	r3, #67	@ 0x43
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e78d      	b.n	8005cee <_printf_float+0xa2>
 8005dd2:	2c47      	cmp	r4, #71	@ 0x47
 8005dd4:	d1b8      	bne.n	8005d48 <_printf_float+0xfc>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1b6      	bne.n	8005d48 <_printf_float+0xfc>
 8005dda:	3301      	adds	r3, #1
 8005ddc:	e7b3      	b.n	8005d46 <_printf_float+0xfa>
 8005dde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005de0:	0011      	movs	r1, r2
 8005de2:	2b65      	cmp	r3, #101	@ 0x65
 8005de4:	d9d7      	bls.n	8005d96 <_printf_float+0x14a>
 8005de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005de8:	2b66      	cmp	r3, #102	@ 0x66
 8005dea:	d11a      	bne.n	8005e22 <_printf_float+0x1d6>
 8005dec:	686b      	ldr	r3, [r5, #4]
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	dd09      	ble.n	8005e06 <_printf_float+0x1ba>
 8005df2:	612a      	str	r2, [r5, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <_printf_float+0x1b2>
 8005df8:	6829      	ldr	r1, [r5, #0]
 8005dfa:	07c9      	lsls	r1, r1, #31
 8005dfc:	d50b      	bpl.n	8005e16 <_printf_float+0x1ca>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	189b      	adds	r3, r3, r2
 8005e02:	612b      	str	r3, [r5, #16]
 8005e04:	e007      	b.n	8005e16 <_printf_float+0x1ca>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <_printf_float+0x1c6>
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	6829      	ldr	r1, [r5, #0]
 8005e0e:	4211      	tst	r1, r2
 8005e10:	d000      	beq.n	8005e14 <_printf_float+0x1c8>
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	612a      	str	r2, [r5, #16]
 8005e16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e18:	2400      	movs	r4, #0
 8005e1a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005e1c:	e7cd      	b.n	8005dba <_printf_float+0x16e>
 8005e1e:	2367      	movs	r3, #103	@ 0x67
 8005e20:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005e24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e26:	4299      	cmp	r1, r3
 8005e28:	db06      	blt.n	8005e38 <_printf_float+0x1ec>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	6129      	str	r1, [r5, #16]
 8005e2e:	07db      	lsls	r3, r3, #31
 8005e30:	d5f1      	bpl.n	8005e16 <_printf_float+0x1ca>
 8005e32:	3101      	adds	r1, #1
 8005e34:	6129      	str	r1, [r5, #16]
 8005e36:	e7ee      	b.n	8005e16 <_printf_float+0x1ca>
 8005e38:	2201      	movs	r2, #1
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	dce0      	bgt.n	8005e00 <_printf_float+0x1b4>
 8005e3e:	1892      	adds	r2, r2, r2
 8005e40:	1a52      	subs	r2, r2, r1
 8005e42:	e7dd      	b.n	8005e00 <_printf_float+0x1b4>
 8005e44:	682a      	ldr	r2, [r5, #0]
 8005e46:	0553      	lsls	r3, r2, #21
 8005e48:	d408      	bmi.n	8005e5c <_printf_float+0x210>
 8005e4a:	692b      	ldr	r3, [r5, #16]
 8005e4c:	003a      	movs	r2, r7
 8005e4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005e54:	47a0      	blx	r4
 8005e56:	3001      	adds	r0, #1
 8005e58:	d129      	bne.n	8005eae <_printf_float+0x262>
 8005e5a:	e753      	b.n	8005d04 <_printf_float+0xb8>
 8005e5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e5e:	2b65      	cmp	r3, #101	@ 0x65
 8005e60:	d800      	bhi.n	8005e64 <_printf_float+0x218>
 8005e62:	e0da      	b.n	800601a <_printf_float+0x3ce>
 8005e64:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005e66:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f7fa faee 	bl	800044c <__aeabi_dcmpeq>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d033      	beq.n	8005edc <_printf_float+0x290>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4a37      	ldr	r2, [pc, #220]	@ (8005f54 <_printf_float+0x308>)
 8005e78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005e7e:	47a0      	blx	r4
 8005e80:	3001      	adds	r0, #1
 8005e82:	d100      	bne.n	8005e86 <_printf_float+0x23a>
 8005e84:	e73e      	b.n	8005d04 <_printf_float+0xb8>
 8005e86:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005e88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e8a:	42b3      	cmp	r3, r6
 8005e8c:	db02      	blt.n	8005e94 <_printf_float+0x248>
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	07db      	lsls	r3, r3, #31
 8005e92:	d50c      	bpl.n	8005eae <_printf_float+0x262>
 8005e94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005e96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e9e:	47a0      	blx	r4
 8005ea0:	2400      	movs	r4, #0
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d100      	bne.n	8005ea8 <_printf_float+0x25c>
 8005ea6:	e72d      	b.n	8005d04 <_printf_float+0xb8>
 8005ea8:	1e73      	subs	r3, r6, #1
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	dc0a      	bgt.n	8005ec4 <_printf_float+0x278>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	079b      	lsls	r3, r3, #30
 8005eb2:	d500      	bpl.n	8005eb6 <_printf_float+0x26a>
 8005eb4:	e105      	b.n	80060c2 <_printf_float+0x476>
 8005eb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005eb8:	68e8      	ldr	r0, [r5, #12]
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	db00      	blt.n	8005ec0 <_printf_float+0x274>
 8005ebe:	e723      	b.n	8005d08 <_printf_float+0xbc>
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	e721      	b.n	8005d08 <_printf_float+0xbc>
 8005ec4:	002a      	movs	r2, r5
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005ece:	321a      	adds	r2, #26
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d100      	bne.n	8005ed8 <_printf_float+0x28c>
 8005ed6:	e715      	b.n	8005d04 <_printf_float+0xb8>
 8005ed8:	3401      	adds	r4, #1
 8005eda:	e7e5      	b.n	8005ea8 <_printf_float+0x25c>
 8005edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	dc3a      	bgt.n	8005f58 <_printf_float+0x30c>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <_printf_float+0x308>)
 8005ee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005eec:	47a0      	blx	r4
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d100      	bne.n	8005ef4 <_printf_float+0x2a8>
 8005ef2:	e707      	b.n	8005d04 <_printf_float+0xb8>
 8005ef4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005ef6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ef8:	4333      	orrs	r3, r6
 8005efa:	d102      	bne.n	8005f02 <_printf_float+0x2b6>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	07db      	lsls	r3, r3, #31
 8005f00:	d5d5      	bpl.n	8005eae <_printf_float+0x262>
 8005f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f0c:	47a0      	blx	r4
 8005f0e:	2300      	movs	r3, #0
 8005f10:	3001      	adds	r0, #1
 8005f12:	d100      	bne.n	8005f16 <_printf_float+0x2ca>
 8005f14:	e6f6      	b.n	8005d04 <_printf_float+0xb8>
 8005f16:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	dc01      	bgt.n	8005f26 <_printf_float+0x2da>
 8005f22:	0033      	movs	r3, r6
 8005f24:	e792      	b.n	8005e4c <_printf_float+0x200>
 8005f26:	002a      	movs	r2, r5
 8005f28:	2301      	movs	r3, #1
 8005f2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f30:	321a      	adds	r2, #26
 8005f32:	47a0      	blx	r4
 8005f34:	3001      	adds	r0, #1
 8005f36:	d100      	bne.n	8005f3a <_printf_float+0x2ee>
 8005f38:	e6e4      	b.n	8005d04 <_printf_float+0xb8>
 8005f3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	e7ea      	b.n	8005f16 <_printf_float+0x2ca>
 8005f40:	7fefffff 	.word	0x7fefffff
 8005f44:	0800a4e0 	.word	0x0800a4e0
 8005f48:	0800a4e4 	.word	0x0800a4e4
 8005f4c:	0800a4e8 	.word	0x0800a4e8
 8005f50:	0800a4ec 	.word	0x0800a4ec
 8005f54:	0800a4f0 	.word	0x0800a4f0
 8005f58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005f5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f5e:	429e      	cmp	r6, r3
 8005f60:	dd00      	ble.n	8005f64 <_printf_float+0x318>
 8005f62:	001e      	movs	r6, r3
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	dc31      	bgt.n	8005fcc <_printf_float+0x380>
 8005f68:	43f3      	mvns	r3, r6
 8005f6a:	2400      	movs	r4, #0
 8005f6c:	17db      	asrs	r3, r3, #31
 8005f6e:	4033      	ands	r3, r6
 8005f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f72:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f76:	1af3      	subs	r3, r6, r3
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	dc30      	bgt.n	8005fde <_printf_float+0x392>
 8005f7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f80:	429a      	cmp	r2, r3
 8005f82:	dc38      	bgt.n	8005ff6 <_printf_float+0x3aa>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	d435      	bmi.n	8005ff6 <_printf_float+0x3aa>
 8005f8a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005f8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f90:	1b9b      	subs	r3, r3, r6
 8005f92:	1b14      	subs	r4, r2, r4
 8005f94:	429c      	cmp	r4, r3
 8005f96:	dd00      	ble.n	8005f9a <_printf_float+0x34e>
 8005f98:	001c      	movs	r4, r3
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	dc34      	bgt.n	8006008 <_printf_float+0x3bc>
 8005f9e:	43e3      	mvns	r3, r4
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	17db      	asrs	r3, r3, #31
 8005fa4:	401c      	ands	r4, r3
 8005fa6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	1b1b      	subs	r3, r3, r4
 8005fae:	42b3      	cmp	r3, r6
 8005fb0:	dc00      	bgt.n	8005fb4 <_printf_float+0x368>
 8005fb2:	e77c      	b.n	8005eae <_printf_float+0x262>
 8005fb4:	002a      	movs	r2, r5
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005fbe:	321a      	adds	r2, #26
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d100      	bne.n	8005fc8 <_printf_float+0x37c>
 8005fc6:	e69d      	b.n	8005d04 <_printf_float+0xb8>
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7ec      	b.n	8005fa6 <_printf_float+0x35a>
 8005fcc:	0033      	movs	r3, r6
 8005fce:	003a      	movs	r2, r7
 8005fd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fd4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fd6:	47a0      	blx	r4
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d1c5      	bne.n	8005f68 <_printf_float+0x31c>
 8005fdc:	e692      	b.n	8005d04 <_printf_float+0xb8>
 8005fde:	002a      	movs	r2, r5
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fe4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fe6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005fe8:	321a      	adds	r2, #26
 8005fea:	47b0      	blx	r6
 8005fec:	3001      	adds	r0, #1
 8005fee:	d100      	bne.n	8005ff2 <_printf_float+0x3a6>
 8005ff0:	e688      	b.n	8005d04 <_printf_float+0xb8>
 8005ff2:	3401      	adds	r4, #1
 8005ff4:	e7bd      	b.n	8005f72 <_printf_float+0x326>
 8005ff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ffa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ffc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ffe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006000:	47a0      	blx	r4
 8006002:	3001      	adds	r0, #1
 8006004:	d1c1      	bne.n	8005f8a <_printf_float+0x33e>
 8006006:	e67d      	b.n	8005d04 <_printf_float+0xb8>
 8006008:	19ba      	adds	r2, r7, r6
 800600a:	0023      	movs	r3, r4
 800600c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800600e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006010:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006012:	47b0      	blx	r6
 8006014:	3001      	adds	r0, #1
 8006016:	d1c2      	bne.n	8005f9e <_printf_float+0x352>
 8006018:	e674      	b.n	8005d04 <_printf_float+0xb8>
 800601a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800601c:	930c      	str	r3, [sp, #48]	@ 0x30
 800601e:	2b01      	cmp	r3, #1
 8006020:	dc02      	bgt.n	8006028 <_printf_float+0x3dc>
 8006022:	2301      	movs	r3, #1
 8006024:	421a      	tst	r2, r3
 8006026:	d039      	beq.n	800609c <_printf_float+0x450>
 8006028:	2301      	movs	r3, #1
 800602a:	003a      	movs	r2, r7
 800602c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800602e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006030:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006032:	47b0      	blx	r6
 8006034:	3001      	adds	r0, #1
 8006036:	d100      	bne.n	800603a <_printf_float+0x3ee>
 8006038:	e664      	b.n	8005d04 <_printf_float+0xb8>
 800603a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800603c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800603e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006040:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006042:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006044:	47b0      	blx	r6
 8006046:	3001      	adds	r0, #1
 8006048:	d100      	bne.n	800604c <_printf_float+0x400>
 800604a:	e65b      	b.n	8005d04 <_printf_float+0xb8>
 800604c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800604e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	3b01      	subs	r3, #1
 8006056:	930c      	str	r3, [sp, #48]	@ 0x30
 8006058:	2300      	movs	r3, #0
 800605a:	f7fa f9f7 	bl	800044c <__aeabi_dcmpeq>
 800605e:	2800      	cmp	r0, #0
 8006060:	d11a      	bne.n	8006098 <_printf_float+0x44c>
 8006062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006064:	1c7a      	adds	r2, r7, #1
 8006066:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006068:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800606a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800606c:	47b0      	blx	r6
 800606e:	3001      	adds	r0, #1
 8006070:	d10e      	bne.n	8006090 <_printf_float+0x444>
 8006072:	e647      	b.n	8005d04 <_printf_float+0xb8>
 8006074:	002a      	movs	r2, r5
 8006076:	2301      	movs	r3, #1
 8006078:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800607a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800607c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800607e:	321a      	adds	r2, #26
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	d100      	bne.n	8006088 <_printf_float+0x43c>
 8006086:	e63d      	b.n	8005d04 <_printf_float+0xb8>
 8006088:	3601      	adds	r6, #1
 800608a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800608c:	429e      	cmp	r6, r3
 800608e:	dbf1      	blt.n	8006074 <_printf_float+0x428>
 8006090:	002a      	movs	r2, r5
 8006092:	0023      	movs	r3, r4
 8006094:	3250      	adds	r2, #80	@ 0x50
 8006096:	e6da      	b.n	8005e4e <_printf_float+0x202>
 8006098:	2600      	movs	r6, #0
 800609a:	e7f6      	b.n	800608a <_printf_float+0x43e>
 800609c:	003a      	movs	r2, r7
 800609e:	e7e2      	b.n	8006066 <_printf_float+0x41a>
 80060a0:	002a      	movs	r2, r5
 80060a2:	2301      	movs	r3, #1
 80060a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80060aa:	3219      	adds	r2, #25
 80060ac:	47b0      	blx	r6
 80060ae:	3001      	adds	r0, #1
 80060b0:	d100      	bne.n	80060b4 <_printf_float+0x468>
 80060b2:	e627      	b.n	8005d04 <_printf_float+0xb8>
 80060b4:	3401      	adds	r4, #1
 80060b6:	68eb      	ldr	r3, [r5, #12]
 80060b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42a3      	cmp	r3, r4
 80060be:	dcef      	bgt.n	80060a0 <_printf_float+0x454>
 80060c0:	e6f9      	b.n	8005eb6 <_printf_float+0x26a>
 80060c2:	2400      	movs	r4, #0
 80060c4:	e7f7      	b.n	80060b6 <_printf_float+0x46a>
 80060c6:	46c0      	nop			@ (mov r8, r8)

080060c8 <_printf_common>:
 80060c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ca:	0016      	movs	r6, r2
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	688a      	ldr	r2, [r1, #8]
 80060d0:	690b      	ldr	r3, [r1, #16]
 80060d2:	000c      	movs	r4, r1
 80060d4:	9000      	str	r0, [sp, #0]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	da00      	bge.n	80060dc <_printf_common+0x14>
 80060da:	0013      	movs	r3, r2
 80060dc:	0022      	movs	r2, r4
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	3243      	adds	r2, #67	@ 0x43
 80060e2:	7812      	ldrb	r2, [r2, #0]
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d001      	beq.n	80060ec <_printf_common+0x24>
 80060e8:	3301      	adds	r3, #1
 80060ea:	6033      	str	r3, [r6, #0]
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	069b      	lsls	r3, r3, #26
 80060f0:	d502      	bpl.n	80060f8 <_printf_common+0x30>
 80060f2:	6833      	ldr	r3, [r6, #0]
 80060f4:	3302      	adds	r3, #2
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	6822      	ldr	r2, [r4, #0]
 80060fa:	2306      	movs	r3, #6
 80060fc:	0015      	movs	r5, r2
 80060fe:	401d      	ands	r5, r3
 8006100:	421a      	tst	r2, r3
 8006102:	d027      	beq.n	8006154 <_printf_common+0x8c>
 8006104:	0023      	movs	r3, r4
 8006106:	3343      	adds	r3, #67	@ 0x43
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	1e5a      	subs	r2, r3, #1
 800610c:	4193      	sbcs	r3, r2
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	0692      	lsls	r2, r2, #26
 8006112:	d430      	bmi.n	8006176 <_printf_common+0xae>
 8006114:	0022      	movs	r2, r4
 8006116:	9901      	ldr	r1, [sp, #4]
 8006118:	9800      	ldr	r0, [sp, #0]
 800611a:	9d08      	ldr	r5, [sp, #32]
 800611c:	3243      	adds	r2, #67	@ 0x43
 800611e:	47a8      	blx	r5
 8006120:	3001      	adds	r0, #1
 8006122:	d025      	beq.n	8006170 <_printf_common+0xa8>
 8006124:	2206      	movs	r2, #6
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	2500      	movs	r5, #0
 800612a:	4013      	ands	r3, r2
 800612c:	2b04      	cmp	r3, #4
 800612e:	d105      	bne.n	800613c <_printf_common+0x74>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	68e5      	ldr	r5, [r4, #12]
 8006134:	1aed      	subs	r5, r5, r3
 8006136:	43eb      	mvns	r3, r5
 8006138:	17db      	asrs	r3, r3, #31
 800613a:	401d      	ands	r5, r3
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	6922      	ldr	r2, [r4, #16]
 8006140:	4293      	cmp	r3, r2
 8006142:	dd01      	ble.n	8006148 <_printf_common+0x80>
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	18ed      	adds	r5, r5, r3
 8006148:	2600      	movs	r6, #0
 800614a:	42b5      	cmp	r5, r6
 800614c:	d120      	bne.n	8006190 <_printf_common+0xc8>
 800614e:	2000      	movs	r0, #0
 8006150:	e010      	b.n	8006174 <_printf_common+0xac>
 8006152:	3501      	adds	r5, #1
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	6832      	ldr	r2, [r6, #0]
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	42ab      	cmp	r3, r5
 800615c:	ddd2      	ble.n	8006104 <_printf_common+0x3c>
 800615e:	0022      	movs	r2, r4
 8006160:	2301      	movs	r3, #1
 8006162:	9901      	ldr	r1, [sp, #4]
 8006164:	9800      	ldr	r0, [sp, #0]
 8006166:	9f08      	ldr	r7, [sp, #32]
 8006168:	3219      	adds	r2, #25
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	d1f0      	bne.n	8006152 <_printf_common+0x8a>
 8006170:	2001      	movs	r0, #1
 8006172:	4240      	negs	r0, r0
 8006174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006176:	2030      	movs	r0, #48	@ 0x30
 8006178:	18e1      	adds	r1, r4, r3
 800617a:	3143      	adds	r1, #67	@ 0x43
 800617c:	7008      	strb	r0, [r1, #0]
 800617e:	0021      	movs	r1, r4
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	3145      	adds	r1, #69	@ 0x45
 8006184:	7809      	ldrb	r1, [r1, #0]
 8006186:	18a2      	adds	r2, r4, r2
 8006188:	3243      	adds	r2, #67	@ 0x43
 800618a:	3302      	adds	r3, #2
 800618c:	7011      	strb	r1, [r2, #0]
 800618e:	e7c1      	b.n	8006114 <_printf_common+0x4c>
 8006190:	0022      	movs	r2, r4
 8006192:	2301      	movs	r3, #1
 8006194:	9901      	ldr	r1, [sp, #4]
 8006196:	9800      	ldr	r0, [sp, #0]
 8006198:	9f08      	ldr	r7, [sp, #32]
 800619a:	321a      	adds	r2, #26
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	d0e6      	beq.n	8006170 <_printf_common+0xa8>
 80061a2:	3601      	adds	r6, #1
 80061a4:	e7d1      	b.n	800614a <_printf_common+0x82>
	...

080061a8 <_printf_i>:
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b08b      	sub	sp, #44	@ 0x2c
 80061ac:	9206      	str	r2, [sp, #24]
 80061ae:	000a      	movs	r2, r1
 80061b0:	3243      	adds	r2, #67	@ 0x43
 80061b2:	9307      	str	r3, [sp, #28]
 80061b4:	9005      	str	r0, [sp, #20]
 80061b6:	9203      	str	r2, [sp, #12]
 80061b8:	7e0a      	ldrb	r2, [r1, #24]
 80061ba:	000c      	movs	r4, r1
 80061bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061be:	2a78      	cmp	r2, #120	@ 0x78
 80061c0:	d809      	bhi.n	80061d6 <_printf_i+0x2e>
 80061c2:	2a62      	cmp	r2, #98	@ 0x62
 80061c4:	d80b      	bhi.n	80061de <_printf_i+0x36>
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d100      	bne.n	80061cc <_printf_i+0x24>
 80061ca:	e0bc      	b.n	8006346 <_printf_i+0x19e>
 80061cc:	497b      	ldr	r1, [pc, #492]	@ (80063bc <_printf_i+0x214>)
 80061ce:	9104      	str	r1, [sp, #16]
 80061d0:	2a58      	cmp	r2, #88	@ 0x58
 80061d2:	d100      	bne.n	80061d6 <_printf_i+0x2e>
 80061d4:	e090      	b.n	80062f8 <_printf_i+0x150>
 80061d6:	0025      	movs	r5, r4
 80061d8:	3542      	adds	r5, #66	@ 0x42
 80061da:	702a      	strb	r2, [r5, #0]
 80061dc:	e022      	b.n	8006224 <_printf_i+0x7c>
 80061de:	0010      	movs	r0, r2
 80061e0:	3863      	subs	r0, #99	@ 0x63
 80061e2:	2815      	cmp	r0, #21
 80061e4:	d8f7      	bhi.n	80061d6 <_printf_i+0x2e>
 80061e6:	f7f9 ffa1 	bl	800012c <__gnu_thumb1_case_shi>
 80061ea:	0016      	.short	0x0016
 80061ec:	fff6001f 	.word	0xfff6001f
 80061f0:	fff6fff6 	.word	0xfff6fff6
 80061f4:	001ffff6 	.word	0x001ffff6
 80061f8:	fff6fff6 	.word	0xfff6fff6
 80061fc:	fff6fff6 	.word	0xfff6fff6
 8006200:	003600a1 	.word	0x003600a1
 8006204:	fff60080 	.word	0xfff60080
 8006208:	00b2fff6 	.word	0x00b2fff6
 800620c:	0036fff6 	.word	0x0036fff6
 8006210:	fff6fff6 	.word	0xfff6fff6
 8006214:	0084      	.short	0x0084
 8006216:	0025      	movs	r5, r4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	3542      	adds	r5, #66	@ 0x42
 800621c:	1d11      	adds	r1, r2, #4
 800621e:	6019      	str	r1, [r3, #0]
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	702b      	strb	r3, [r5, #0]
 8006224:	2301      	movs	r3, #1
 8006226:	e0a0      	b.n	800636a <_printf_i+0x1c2>
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	6809      	ldr	r1, [r1, #0]
 800622c:	1d02      	adds	r2, r0, #4
 800622e:	060d      	lsls	r5, r1, #24
 8006230:	d50b      	bpl.n	800624a <_printf_i+0xa2>
 8006232:	6806      	ldr	r6, [r0, #0]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	2e00      	cmp	r6, #0
 8006238:	da03      	bge.n	8006242 <_printf_i+0x9a>
 800623a:	232d      	movs	r3, #45	@ 0x2d
 800623c:	9a03      	ldr	r2, [sp, #12]
 800623e:	4276      	negs	r6, r6
 8006240:	7013      	strb	r3, [r2, #0]
 8006242:	4b5e      	ldr	r3, [pc, #376]	@ (80063bc <_printf_i+0x214>)
 8006244:	270a      	movs	r7, #10
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	e018      	b.n	800627c <_printf_i+0xd4>
 800624a:	6806      	ldr	r6, [r0, #0]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	0649      	lsls	r1, r1, #25
 8006250:	d5f1      	bpl.n	8006236 <_printf_i+0x8e>
 8006252:	b236      	sxth	r6, r6
 8006254:	e7ef      	b.n	8006236 <_printf_i+0x8e>
 8006256:	6808      	ldr	r0, [r1, #0]
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	c940      	ldmia	r1!, {r6}
 800625c:	0605      	lsls	r5, r0, #24
 800625e:	d402      	bmi.n	8006266 <_printf_i+0xbe>
 8006260:	0640      	lsls	r0, r0, #25
 8006262:	d500      	bpl.n	8006266 <_printf_i+0xbe>
 8006264:	b2b6      	uxth	r6, r6
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	4b54      	ldr	r3, [pc, #336]	@ (80063bc <_printf_i+0x214>)
 800626a:	270a      	movs	r7, #10
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006270:	d100      	bne.n	8006274 <_printf_i+0xcc>
 8006272:	3f02      	subs	r7, #2
 8006274:	0023      	movs	r3, r4
 8006276:	2200      	movs	r2, #0
 8006278:	3343      	adds	r3, #67	@ 0x43
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	db03      	blt.n	800628c <_printf_i+0xe4>
 8006284:	2104      	movs	r1, #4
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	438a      	bics	r2, r1
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	2e00      	cmp	r6, #0
 800628e:	d102      	bne.n	8006296 <_printf_i+0xee>
 8006290:	9d03      	ldr	r5, [sp, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00c      	beq.n	80062b0 <_printf_i+0x108>
 8006296:	9d03      	ldr	r5, [sp, #12]
 8006298:	0030      	movs	r0, r6
 800629a:	0039      	movs	r1, r7
 800629c:	f7f9 ffd6 	bl	800024c <__aeabi_uidivmod>
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	3d01      	subs	r5, #1
 80062a4:	5c5b      	ldrb	r3, [r3, r1]
 80062a6:	702b      	strb	r3, [r5, #0]
 80062a8:	0033      	movs	r3, r6
 80062aa:	0006      	movs	r6, r0
 80062ac:	429f      	cmp	r7, r3
 80062ae:	d9f3      	bls.n	8006298 <_printf_i+0xf0>
 80062b0:	2f08      	cmp	r7, #8
 80062b2:	d109      	bne.n	80062c8 <_printf_i+0x120>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	07db      	lsls	r3, r3, #31
 80062b8:	d506      	bpl.n	80062c8 <_printf_i+0x120>
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	dc02      	bgt.n	80062c8 <_printf_i+0x120>
 80062c2:	2330      	movs	r3, #48	@ 0x30
 80062c4:	3d01      	subs	r5, #1
 80062c6:	702b      	strb	r3, [r5, #0]
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	1b5b      	subs	r3, r3, r5
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	9b07      	ldr	r3, [sp, #28]
 80062d0:	0021      	movs	r1, r4
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	9805      	ldr	r0, [sp, #20]
 80062d6:	9b06      	ldr	r3, [sp, #24]
 80062d8:	aa09      	add	r2, sp, #36	@ 0x24
 80062da:	f7ff fef5 	bl	80060c8 <_printf_common>
 80062de:	3001      	adds	r0, #1
 80062e0:	d148      	bne.n	8006374 <_printf_i+0x1cc>
 80062e2:	2001      	movs	r0, #1
 80062e4:	4240      	negs	r0, r0
 80062e6:	b00b      	add	sp, #44	@ 0x2c
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	2220      	movs	r2, #32
 80062ec:	6809      	ldr	r1, [r1, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	2278      	movs	r2, #120	@ 0x78
 80062f4:	4932      	ldr	r1, [pc, #200]	@ (80063c0 <_printf_i+0x218>)
 80062f6:	9104      	str	r1, [sp, #16]
 80062f8:	0021      	movs	r1, r4
 80062fa:	3145      	adds	r1, #69	@ 0x45
 80062fc:	700a      	strb	r2, [r1, #0]
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	c940      	ldmia	r1!, {r6}
 8006304:	0610      	lsls	r0, r2, #24
 8006306:	d402      	bmi.n	800630e <_printf_i+0x166>
 8006308:	0650      	lsls	r0, r2, #25
 800630a:	d500      	bpl.n	800630e <_printf_i+0x166>
 800630c:	b2b6      	uxth	r6, r6
 800630e:	6019      	str	r1, [r3, #0]
 8006310:	07d3      	lsls	r3, r2, #31
 8006312:	d502      	bpl.n	800631a <_printf_i+0x172>
 8006314:	2320      	movs	r3, #32
 8006316:	4313      	orrs	r3, r2
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	2e00      	cmp	r6, #0
 800631c:	d001      	beq.n	8006322 <_printf_i+0x17a>
 800631e:	2710      	movs	r7, #16
 8006320:	e7a8      	b.n	8006274 <_printf_i+0xcc>
 8006322:	2220      	movs	r2, #32
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	4393      	bics	r3, r2
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	e7f8      	b.n	800631e <_printf_i+0x176>
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	680d      	ldr	r5, [r1, #0]
 8006330:	1d10      	adds	r0, r2, #4
 8006332:	6949      	ldr	r1, [r1, #20]
 8006334:	6018      	str	r0, [r3, #0]
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	062e      	lsls	r6, r5, #24
 800633a:	d501      	bpl.n	8006340 <_printf_i+0x198>
 800633c:	6019      	str	r1, [r3, #0]
 800633e:	e002      	b.n	8006346 <_printf_i+0x19e>
 8006340:	066d      	lsls	r5, r5, #25
 8006342:	d5fb      	bpl.n	800633c <_printf_i+0x194>
 8006344:	8019      	strh	r1, [r3, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	9d03      	ldr	r5, [sp, #12]
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	e7bf      	b.n	80062ce <_printf_i+0x126>
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	1d11      	adds	r1, r2, #4
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	6815      	ldr	r5, [r2, #0]
 8006356:	2100      	movs	r1, #0
 8006358:	0028      	movs	r0, r5
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	f000 fbf7 	bl	8006b4e <memchr>
 8006360:	2800      	cmp	r0, #0
 8006362:	d001      	beq.n	8006368 <_printf_i+0x1c0>
 8006364:	1b40      	subs	r0, r0, r5
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	e7ac      	b.n	80062ce <_printf_i+0x126>
 8006374:	002a      	movs	r2, r5
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	9906      	ldr	r1, [sp, #24]
 800637a:	9805      	ldr	r0, [sp, #20]
 800637c:	9d07      	ldr	r5, [sp, #28]
 800637e:	47a8      	blx	r5
 8006380:	3001      	adds	r0, #1
 8006382:	d0ae      	beq.n	80062e2 <_printf_i+0x13a>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	079b      	lsls	r3, r3, #30
 8006388:	d415      	bmi.n	80063b6 <_printf_i+0x20e>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	68e0      	ldr	r0, [r4, #12]
 800638e:	4298      	cmp	r0, r3
 8006390:	daa9      	bge.n	80062e6 <_printf_i+0x13e>
 8006392:	0018      	movs	r0, r3
 8006394:	e7a7      	b.n	80062e6 <_printf_i+0x13e>
 8006396:	0022      	movs	r2, r4
 8006398:	2301      	movs	r3, #1
 800639a:	9906      	ldr	r1, [sp, #24]
 800639c:	9805      	ldr	r0, [sp, #20]
 800639e:	9e07      	ldr	r6, [sp, #28]
 80063a0:	3219      	adds	r2, #25
 80063a2:	47b0      	blx	r6
 80063a4:	3001      	adds	r0, #1
 80063a6:	d09c      	beq.n	80062e2 <_printf_i+0x13a>
 80063a8:	3501      	adds	r5, #1
 80063aa:	68e3      	ldr	r3, [r4, #12]
 80063ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	dcf0      	bgt.n	8006396 <_printf_i+0x1ee>
 80063b4:	e7e9      	b.n	800638a <_printf_i+0x1e2>
 80063b6:	2500      	movs	r5, #0
 80063b8:	e7f7      	b.n	80063aa <_printf_i+0x202>
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	0800a4f2 	.word	0x0800a4f2
 80063c0:	0800a503 	.word	0x0800a503

080063c4 <_scanf_float>:
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	b08b      	sub	sp, #44	@ 0x2c
 80063c8:	0016      	movs	r6, r2
 80063ca:	9003      	str	r0, [sp, #12]
 80063cc:	22ae      	movs	r2, #174	@ 0xae
 80063ce:	2000      	movs	r0, #0
 80063d0:	9307      	str	r3, [sp, #28]
 80063d2:	688b      	ldr	r3, [r1, #8]
 80063d4:	000c      	movs	r4, r1
 80063d6:	1e59      	subs	r1, r3, #1
 80063d8:	0052      	lsls	r2, r2, #1
 80063da:	9006      	str	r0, [sp, #24]
 80063dc:	4291      	cmp	r1, r2
 80063de:	d905      	bls.n	80063ec <_scanf_float+0x28>
 80063e0:	3b5e      	subs	r3, #94	@ 0x5e
 80063e2:	3bff      	subs	r3, #255	@ 0xff
 80063e4:	9306      	str	r3, [sp, #24]
 80063e6:	235e      	movs	r3, #94	@ 0x5e
 80063e8:	33ff      	adds	r3, #255	@ 0xff
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	23f0      	movs	r3, #240	@ 0xf0
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4313      	orrs	r3, r2
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	0023      	movs	r3, r4
 80063f8:	2500      	movs	r5, #0
 80063fa:	331c      	adds	r3, #28
 80063fc:	001f      	movs	r7, r3
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	9502      	str	r5, [sp, #8]
 8006402:	9509      	str	r5, [sp, #36]	@ 0x24
 8006404:	9508      	str	r5, [sp, #32]
 8006406:	9501      	str	r5, [sp, #4]
 8006408:	9505      	str	r5, [sp, #20]
 800640a:	68a2      	ldr	r2, [r4, #8]
 800640c:	2a00      	cmp	r2, #0
 800640e:	d00a      	beq.n	8006426 <_scanf_float+0x62>
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b4e      	cmp	r3, #78	@ 0x4e
 8006416:	d844      	bhi.n	80064a2 <_scanf_float+0xde>
 8006418:	0018      	movs	r0, r3
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d82c      	bhi.n	8006478 <_scanf_float+0xb4>
 800641e:	382b      	subs	r0, #43	@ 0x2b
 8006420:	b2c1      	uxtb	r1, r0
 8006422:	290e      	cmp	r1, #14
 8006424:	d92a      	bls.n	800647c <_scanf_float+0xb8>
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <_scanf_float+0x70>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	4aa6      	ldr	r2, [pc, #664]	@ (80066c8 <_scanf_float+0x304>)
 8006430:	4013      	ands	r3, r2
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	9b02      	ldr	r3, [sp, #8]
 8006436:	3b01      	subs	r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d900      	bls.n	800643e <_scanf_float+0x7a>
 800643c:	e0fe      	b.n	800663c <_scanf_float+0x278>
 800643e:	25be      	movs	r5, #190	@ 0xbe
 8006440:	006d      	lsls	r5, r5, #1
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	429f      	cmp	r7, r3
 8006446:	d900      	bls.n	800644a <_scanf_float+0x86>
 8006448:	e0ee      	b.n	8006628 <_scanf_float+0x264>
 800644a:	2001      	movs	r0, #1
 800644c:	b00b      	add	sp, #44	@ 0x2c
 800644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006450:	0018      	movs	r0, r3
 8006452:	3861      	subs	r0, #97	@ 0x61
 8006454:	280d      	cmp	r0, #13
 8006456:	d8e6      	bhi.n	8006426 <_scanf_float+0x62>
 8006458:	f7f9 fe68 	bl	800012c <__gnu_thumb1_case_shi>
 800645c:	ffe50089 	.word	0xffe50089
 8006460:	ffe5ffe5 	.word	0xffe5ffe5
 8006464:	00a700bb 	.word	0x00a700bb
 8006468:	ffe5ffe5 	.word	0xffe5ffe5
 800646c:	ffe5008f 	.word	0xffe5008f
 8006470:	ffe5ffe5 	.word	0xffe5ffe5
 8006474:	006bffe5 	.word	0x006bffe5
 8006478:	3841      	subs	r0, #65	@ 0x41
 800647a:	e7eb      	b.n	8006454 <_scanf_float+0x90>
 800647c:	280e      	cmp	r0, #14
 800647e:	d8d2      	bhi.n	8006426 <_scanf_float+0x62>
 8006480:	f7f9 fe54 	bl	800012c <__gnu_thumb1_case_shi>
 8006484:	ffd1004f 	.word	0xffd1004f
 8006488:	009d004f 	.word	0x009d004f
 800648c:	0021ffd1 	.word	0x0021ffd1
 8006490:	00410041 	.word	0x00410041
 8006494:	00410041 	.word	0x00410041
 8006498:	00410041 	.word	0x00410041
 800649c:	00410041 	.word	0x00410041
 80064a0:	0041      	.short	0x0041
 80064a2:	2b6e      	cmp	r3, #110	@ 0x6e
 80064a4:	d80a      	bhi.n	80064bc <_scanf_float+0xf8>
 80064a6:	2b60      	cmp	r3, #96	@ 0x60
 80064a8:	d8d2      	bhi.n	8006450 <_scanf_float+0x8c>
 80064aa:	2b54      	cmp	r3, #84	@ 0x54
 80064ac:	d100      	bne.n	80064b0 <_scanf_float+0xec>
 80064ae:	e081      	b.n	80065b4 <_scanf_float+0x1f0>
 80064b0:	2b59      	cmp	r3, #89	@ 0x59
 80064b2:	d1b8      	bne.n	8006426 <_scanf_float+0x62>
 80064b4:	2d07      	cmp	r5, #7
 80064b6:	d1b6      	bne.n	8006426 <_scanf_float+0x62>
 80064b8:	2508      	movs	r5, #8
 80064ba:	e02f      	b.n	800651c <_scanf_float+0x158>
 80064bc:	2b74      	cmp	r3, #116	@ 0x74
 80064be:	d079      	beq.n	80065b4 <_scanf_float+0x1f0>
 80064c0:	2b79      	cmp	r3, #121	@ 0x79
 80064c2:	d0f7      	beq.n	80064b4 <_scanf_float+0xf0>
 80064c4:	e7af      	b.n	8006426 <_scanf_float+0x62>
 80064c6:	6821      	ldr	r1, [r4, #0]
 80064c8:	05c8      	lsls	r0, r1, #23
 80064ca:	d51c      	bpl.n	8006506 <_scanf_float+0x142>
 80064cc:	2380      	movs	r3, #128	@ 0x80
 80064ce:	4399      	bics	r1, r3
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	6021      	str	r1, [r4, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <_scanf_float+0x122>
 80064de:	3b01      	subs	r3, #1
 80064e0:	3201      	adds	r2, #1
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	60a2      	str	r2, [r4, #8]
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	60a3      	str	r3, [r4, #8]
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	6873      	ldr	r3, [r6, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	6073      	str	r3, [r6, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dc00      	bgt.n	80064fe <_scanf_float+0x13a>
 80064fc:	e08a      	b.n	8006614 <_scanf_float+0x250>
 80064fe:	6833      	ldr	r3, [r6, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	e781      	b.n	800640a <_scanf_float+0x46>
 8006506:	9a02      	ldr	r2, [sp, #8]
 8006508:	1951      	adds	r1, r2, r5
 800650a:	2900      	cmp	r1, #0
 800650c:	d000      	beq.n	8006510 <_scanf_float+0x14c>
 800650e:	e78a      	b.n	8006426 <_scanf_float+0x62>
 8006510:	000d      	movs	r5, r1
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	486d      	ldr	r0, [pc, #436]	@ (80066cc <_scanf_float+0x308>)
 8006516:	9102      	str	r1, [sp, #8]
 8006518:	4002      	ands	r2, r0
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	703b      	strb	r3, [r7, #0]
 800651e:	3701      	adds	r7, #1
 8006520:	e7e1      	b.n	80064e6 <_scanf_float+0x122>
 8006522:	2180      	movs	r1, #128	@ 0x80
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	420a      	tst	r2, r1
 8006528:	d100      	bne.n	800652c <_scanf_float+0x168>
 800652a:	e77c      	b.n	8006426 <_scanf_float+0x62>
 800652c:	438a      	bics	r2, r1
 800652e:	6022      	str	r2, [r4, #0]
 8006530:	e7f4      	b.n	800651c <_scanf_float+0x158>
 8006532:	9a02      	ldr	r2, [sp, #8]
 8006534:	2a00      	cmp	r2, #0
 8006536:	d10f      	bne.n	8006558 <_scanf_float+0x194>
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	2a00      	cmp	r2, #0
 800653c:	d10f      	bne.n	800655e <_scanf_float+0x19a>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	21e0      	movs	r1, #224	@ 0xe0
 8006542:	0010      	movs	r0, r2
 8006544:	00c9      	lsls	r1, r1, #3
 8006546:	4008      	ands	r0, r1
 8006548:	4288      	cmp	r0, r1
 800654a:	d108      	bne.n	800655e <_scanf_float+0x19a>
 800654c:	4960      	ldr	r1, [pc, #384]	@ (80066d0 <_scanf_float+0x30c>)
 800654e:	400a      	ands	r2, r1
 8006550:	6022      	str	r2, [r4, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	e7e1      	b.n	800651c <_scanf_float+0x158>
 8006558:	9a02      	ldr	r2, [sp, #8]
 800655a:	2a02      	cmp	r2, #2
 800655c:	d058      	beq.n	8006610 <_scanf_float+0x24c>
 800655e:	2d01      	cmp	r5, #1
 8006560:	d002      	beq.n	8006568 <_scanf_float+0x1a4>
 8006562:	2d04      	cmp	r5, #4
 8006564:	d000      	beq.n	8006568 <_scanf_float+0x1a4>
 8006566:	e75e      	b.n	8006426 <_scanf_float+0x62>
 8006568:	3501      	adds	r5, #1
 800656a:	b2ed      	uxtb	r5, r5
 800656c:	e7d6      	b.n	800651c <_scanf_float+0x158>
 800656e:	9a02      	ldr	r2, [sp, #8]
 8006570:	2a01      	cmp	r2, #1
 8006572:	d000      	beq.n	8006576 <_scanf_float+0x1b2>
 8006574:	e757      	b.n	8006426 <_scanf_float+0x62>
 8006576:	2202      	movs	r2, #2
 8006578:	e7ec      	b.n	8006554 <_scanf_float+0x190>
 800657a:	2d00      	cmp	r5, #0
 800657c:	d110      	bne.n	80065a0 <_scanf_float+0x1dc>
 800657e:	9a01      	ldr	r2, [sp, #4]
 8006580:	2a00      	cmp	r2, #0
 8006582:	d000      	beq.n	8006586 <_scanf_float+0x1c2>
 8006584:	e752      	b.n	800642c <_scanf_float+0x68>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	21e0      	movs	r1, #224	@ 0xe0
 800658a:	0010      	movs	r0, r2
 800658c:	00c9      	lsls	r1, r1, #3
 800658e:	4008      	ands	r0, r1
 8006590:	4288      	cmp	r0, r1
 8006592:	d000      	beq.n	8006596 <_scanf_float+0x1d2>
 8006594:	e11d      	b.n	80067d2 <_scanf_float+0x40e>
 8006596:	494e      	ldr	r1, [pc, #312]	@ (80066d0 <_scanf_float+0x30c>)
 8006598:	3501      	adds	r5, #1
 800659a:	400a      	ands	r2, r1
 800659c:	6022      	str	r2, [r4, #0]
 800659e:	e7bd      	b.n	800651c <_scanf_float+0x158>
 80065a0:	21fd      	movs	r1, #253	@ 0xfd
 80065a2:	1eea      	subs	r2, r5, #3
 80065a4:	420a      	tst	r2, r1
 80065a6:	d0df      	beq.n	8006568 <_scanf_float+0x1a4>
 80065a8:	e73d      	b.n	8006426 <_scanf_float+0x62>
 80065aa:	2d02      	cmp	r5, #2
 80065ac:	d000      	beq.n	80065b0 <_scanf_float+0x1ec>
 80065ae:	e73a      	b.n	8006426 <_scanf_float+0x62>
 80065b0:	2503      	movs	r5, #3
 80065b2:	e7b3      	b.n	800651c <_scanf_float+0x158>
 80065b4:	2d06      	cmp	r5, #6
 80065b6:	d000      	beq.n	80065ba <_scanf_float+0x1f6>
 80065b8:	e735      	b.n	8006426 <_scanf_float+0x62>
 80065ba:	2507      	movs	r5, #7
 80065bc:	e7ae      	b.n	800651c <_scanf_float+0x158>
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	0591      	lsls	r1, r2, #22
 80065c2:	d400      	bmi.n	80065c6 <_scanf_float+0x202>
 80065c4:	e72f      	b.n	8006426 <_scanf_float+0x62>
 80065c6:	4943      	ldr	r1, [pc, #268]	@ (80066d4 <_scanf_float+0x310>)
 80065c8:	400a      	ands	r2, r1
 80065ca:	6022      	str	r2, [r4, #0]
 80065cc:	9a01      	ldr	r2, [sp, #4]
 80065ce:	9205      	str	r2, [sp, #20]
 80065d0:	e7a4      	b.n	800651c <_scanf_float+0x158>
 80065d2:	21a0      	movs	r1, #160	@ 0xa0
 80065d4:	2080      	movs	r0, #128	@ 0x80
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	00c9      	lsls	r1, r1, #3
 80065da:	4011      	ands	r1, r2
 80065dc:	00c0      	lsls	r0, r0, #3
 80065de:	4281      	cmp	r1, r0
 80065e0:	d006      	beq.n	80065f0 <_scanf_float+0x22c>
 80065e2:	4202      	tst	r2, r0
 80065e4:	d100      	bne.n	80065e8 <_scanf_float+0x224>
 80065e6:	e71e      	b.n	8006426 <_scanf_float+0x62>
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	2900      	cmp	r1, #0
 80065ec:	d100      	bne.n	80065f0 <_scanf_float+0x22c>
 80065ee:	e0f0      	b.n	80067d2 <_scanf_float+0x40e>
 80065f0:	0591      	lsls	r1, r2, #22
 80065f2:	d404      	bmi.n	80065fe <_scanf_float+0x23a>
 80065f4:	9901      	ldr	r1, [sp, #4]
 80065f6:	9805      	ldr	r0, [sp, #20]
 80065f8:	9709      	str	r7, [sp, #36]	@ 0x24
 80065fa:	1a09      	subs	r1, r1, r0
 80065fc:	9108      	str	r1, [sp, #32]
 80065fe:	4934      	ldr	r1, [pc, #208]	@ (80066d0 <_scanf_float+0x30c>)
 8006600:	400a      	ands	r2, r1
 8006602:	21c0      	movs	r1, #192	@ 0xc0
 8006604:	0049      	lsls	r1, r1, #1
 8006606:	430a      	orrs	r2, r1
 8006608:	6022      	str	r2, [r4, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	e785      	b.n	800651c <_scanf_float+0x158>
 8006610:	2203      	movs	r2, #3
 8006612:	e79f      	b.n	8006554 <_scanf_float+0x190>
 8006614:	23c0      	movs	r3, #192	@ 0xc0
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	0031      	movs	r1, r6
 800661a:	58e3      	ldr	r3, [r4, r3]
 800661c:	9803      	ldr	r0, [sp, #12]
 800661e:	4798      	blx	r3
 8006620:	2800      	cmp	r0, #0
 8006622:	d100      	bne.n	8006626 <_scanf_float+0x262>
 8006624:	e6f1      	b.n	800640a <_scanf_float+0x46>
 8006626:	e6fe      	b.n	8006426 <_scanf_float+0x62>
 8006628:	3f01      	subs	r7, #1
 800662a:	5963      	ldr	r3, [r4, r5]
 800662c:	0032      	movs	r2, r6
 800662e:	7839      	ldrb	r1, [r7, #0]
 8006630:	9803      	ldr	r0, [sp, #12]
 8006632:	4798      	blx	r3
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	3b01      	subs	r3, #1
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	e702      	b.n	8006442 <_scanf_float+0x7e>
 800663c:	1e6b      	subs	r3, r5, #1
 800663e:	2b06      	cmp	r3, #6
 8006640:	d80e      	bhi.n	8006660 <_scanf_float+0x29c>
 8006642:	9702      	str	r7, [sp, #8]
 8006644:	2d02      	cmp	r5, #2
 8006646:	d920      	bls.n	800668a <_scanf_float+0x2c6>
 8006648:	1beb      	subs	r3, r5, r7
 800664a:	b2db      	uxtb	r3, r3
 800664c:	9306      	str	r3, [sp, #24]
 800664e:	9b02      	ldr	r3, [sp, #8]
 8006650:	9a06      	ldr	r2, [sp, #24]
 8006652:	189b      	adds	r3, r3, r2
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d127      	bne.n	80066aa <_scanf_float+0x2e6>
 800665a:	3d03      	subs	r5, #3
 800665c:	b2ed      	uxtb	r5, r5
 800665e:	1b7f      	subs	r7, r7, r5
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	05da      	lsls	r2, r3, #23
 8006664:	d553      	bpl.n	800670e <_scanf_float+0x34a>
 8006666:	055b      	lsls	r3, r3, #21
 8006668:	d536      	bpl.n	80066d8 <_scanf_float+0x314>
 800666a:	25be      	movs	r5, #190	@ 0xbe
 800666c:	006d      	lsls	r5, r5, #1
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	429f      	cmp	r7, r3
 8006672:	d800      	bhi.n	8006676 <_scanf_float+0x2b2>
 8006674:	e6e9      	b.n	800644a <_scanf_float+0x86>
 8006676:	3f01      	subs	r7, #1
 8006678:	5963      	ldr	r3, [r4, r5]
 800667a:	0032      	movs	r2, r6
 800667c:	7839      	ldrb	r1, [r7, #0]
 800667e:	9803      	ldr	r0, [sp, #12]
 8006680:	4798      	blx	r3
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	3b01      	subs	r3, #1
 8006686:	6123      	str	r3, [r4, #16]
 8006688:	e7f1      	b.n	800666e <_scanf_float+0x2aa>
 800668a:	25be      	movs	r5, #190	@ 0xbe
 800668c:	006d      	lsls	r5, r5, #1
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	429f      	cmp	r7, r3
 8006692:	d800      	bhi.n	8006696 <_scanf_float+0x2d2>
 8006694:	e6d9      	b.n	800644a <_scanf_float+0x86>
 8006696:	3f01      	subs	r7, #1
 8006698:	5963      	ldr	r3, [r4, r5]
 800669a:	0032      	movs	r2, r6
 800669c:	7839      	ldrb	r1, [r7, #0]
 800669e:	9803      	ldr	r0, [sp, #12]
 80066a0:	4798      	blx	r3
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	e7f1      	b.n	800668e <_scanf_float+0x2ca>
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	0032      	movs	r2, r6
 80066ae:	3b01      	subs	r3, #1
 80066b0:	7819      	ldrb	r1, [r3, #0]
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	23be      	movs	r3, #190	@ 0xbe
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	58e3      	ldr	r3, [r4, r3]
 80066ba:	9803      	ldr	r0, [sp, #12]
 80066bc:	4798      	blx	r3
 80066be:	6923      	ldr	r3, [r4, #16]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	e7c3      	b.n	800664e <_scanf_float+0x28a>
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	fffffeff 	.word	0xfffffeff
 80066cc:	fffffe7f 	.word	0xfffffe7f
 80066d0:	fffff87f 	.word	0xfffff87f
 80066d4:	fffffd7f 	.word	0xfffffd7f
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	1e7d      	subs	r5, r7, #1
 80066dc:	7829      	ldrb	r1, [r5, #0]
 80066de:	3b01      	subs	r3, #1
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	2965      	cmp	r1, #101	@ 0x65
 80066e4:	d00c      	beq.n	8006700 <_scanf_float+0x33c>
 80066e6:	2945      	cmp	r1, #69	@ 0x45
 80066e8:	d00a      	beq.n	8006700 <_scanf_float+0x33c>
 80066ea:	23be      	movs	r3, #190	@ 0xbe
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	58e3      	ldr	r3, [r4, r3]
 80066f0:	0032      	movs	r2, r6
 80066f2:	9803      	ldr	r0, [sp, #12]
 80066f4:	4798      	blx	r3
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	1ebd      	subs	r5, r7, #2
 80066fa:	3b01      	subs	r3, #1
 80066fc:	7829      	ldrb	r1, [r5, #0]
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	23be      	movs	r3, #190	@ 0xbe
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	0032      	movs	r2, r6
 8006706:	58e3      	ldr	r3, [r4, r3]
 8006708:	9803      	ldr	r0, [sp, #12]
 800670a:	4798      	blx	r3
 800670c:	002f      	movs	r7, r5
 800670e:	6821      	ldr	r1, [r4, #0]
 8006710:	2310      	movs	r3, #16
 8006712:	000a      	movs	r2, r1
 8006714:	401a      	ands	r2, r3
 8006716:	4219      	tst	r1, r3
 8006718:	d001      	beq.n	800671e <_scanf_float+0x35a>
 800671a:	2000      	movs	r0, #0
 800671c:	e696      	b.n	800644c <_scanf_float+0x88>
 800671e:	21c0      	movs	r1, #192	@ 0xc0
 8006720:	703a      	strb	r2, [r7, #0]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	00c9      	lsls	r1, r1, #3
 8006726:	400b      	ands	r3, r1
 8006728:	2180      	movs	r1, #128	@ 0x80
 800672a:	00c9      	lsls	r1, r1, #3
 800672c:	428b      	cmp	r3, r1
 800672e:	d11c      	bne.n	800676a <_scanf_float+0x3a6>
 8006730:	9b05      	ldr	r3, [sp, #20]
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	9905      	ldr	r1, [sp, #20]
 8006736:	1a9a      	subs	r2, r3, r2
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	428b      	cmp	r3, r1
 800673c:	d121      	bne.n	8006782 <_scanf_float+0x3be>
 800673e:	2200      	movs	r2, #0
 8006740:	9904      	ldr	r1, [sp, #16]
 8006742:	9803      	ldr	r0, [sp, #12]
 8006744:	f002 fc6e 	bl	8009024 <_strtod_r>
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	0006      	movs	r6, r0
 800674e:	000f      	movs	r7, r1
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	0791      	lsls	r1, r2, #30
 8006754:	d522      	bpl.n	800679c <_scanf_float+0x3d8>
 8006756:	9907      	ldr	r1, [sp, #28]
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	600a      	str	r2, [r1, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	601e      	str	r6, [r3, #0]
 8006760:	605f      	str	r7, [r3, #4]
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60e3      	str	r3, [r4, #12]
 8006768:	e7d7      	b.n	800671a <_scanf_float+0x356>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0e6      	beq.n	800673e <_scanf_float+0x37a>
 8006770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006772:	9803      	ldr	r0, [sp, #12]
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	230a      	movs	r3, #10
 8006778:	f002 fce6 	bl	8009148 <_strtol_r>
 800677c:	9b08      	ldr	r3, [sp, #32]
 800677e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006780:	1ac2      	subs	r2, r0, r3
 8006782:	0023      	movs	r3, r4
 8006784:	3370      	adds	r3, #112	@ 0x70
 8006786:	33ff      	adds	r3, #255	@ 0xff
 8006788:	429f      	cmp	r7, r3
 800678a:	d302      	bcc.n	8006792 <_scanf_float+0x3ce>
 800678c:	0027      	movs	r7, r4
 800678e:	376f      	adds	r7, #111	@ 0x6f
 8006790:	37ff      	adds	r7, #255	@ 0xff
 8006792:	0038      	movs	r0, r7
 8006794:	4910      	ldr	r1, [pc, #64]	@ (80067d8 <_scanf_float+0x414>)
 8006796:	f000 f8e7 	bl	8006968 <siprintf>
 800679a:	e7d0      	b.n	800673e <_scanf_float+0x37a>
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	0752      	lsls	r2, r2, #29
 80067a0:	d502      	bpl.n	80067a8 <_scanf_float+0x3e4>
 80067a2:	9a07      	ldr	r2, [sp, #28]
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	e7d9      	b.n	800675c <_scanf_float+0x398>
 80067a8:	9a07      	ldr	r2, [sp, #28]
 80067aa:	0030      	movs	r0, r6
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	681d      	ldr	r5, [r3, #0]
 80067b0:	0032      	movs	r2, r6
 80067b2:	003b      	movs	r3, r7
 80067b4:	0039      	movs	r1, r7
 80067b6:	f7fb ff8b 	bl	80026d0 <__aeabi_dcmpun>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d004      	beq.n	80067c8 <_scanf_float+0x404>
 80067be:	4807      	ldr	r0, [pc, #28]	@ (80067dc <_scanf_float+0x418>)
 80067c0:	f000 f9d0 	bl	8006b64 <nanf>
 80067c4:	6028      	str	r0, [r5, #0]
 80067c6:	e7cc      	b.n	8006762 <_scanf_float+0x39e>
 80067c8:	0030      	movs	r0, r6
 80067ca:	0039      	movs	r1, r7
 80067cc:	f7fc f878 	bl	80028c0 <__aeabi_d2f>
 80067d0:	e7f8      	b.n	80067c4 <_scanf_float+0x400>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	e62d      	b.n	8006434 <_scanf_float+0x70>
 80067d8:	0800a514 	.word	0x0800a514
 80067dc:	0800a8ad 	.word	0x0800a8ad

080067e0 <std>:
 80067e0:	2300      	movs	r3, #0
 80067e2:	b510      	push	{r4, lr}
 80067e4:	0004      	movs	r4, r0
 80067e6:	6003      	str	r3, [r0, #0]
 80067e8:	6043      	str	r3, [r0, #4]
 80067ea:	6083      	str	r3, [r0, #8]
 80067ec:	8181      	strh	r1, [r0, #12]
 80067ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80067f0:	81c2      	strh	r2, [r0, #14]
 80067f2:	6103      	str	r3, [r0, #16]
 80067f4:	6143      	str	r3, [r0, #20]
 80067f6:	6183      	str	r3, [r0, #24]
 80067f8:	0019      	movs	r1, r3
 80067fa:	2208      	movs	r2, #8
 80067fc:	305c      	adds	r0, #92	@ 0x5c
 80067fe:	f000 f91f 	bl	8006a40 <memset>
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <std+0x50>)
 8006804:	6224      	str	r4, [r4, #32]
 8006806:	6263      	str	r3, [r4, #36]	@ 0x24
 8006808:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <std+0x54>)
 800680a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800680c:	4b0a      	ldr	r3, [pc, #40]	@ (8006838 <std+0x58>)
 800680e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006810:	4b0a      	ldr	r3, [pc, #40]	@ (800683c <std+0x5c>)
 8006812:	6323      	str	r3, [r4, #48]	@ 0x30
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <std+0x60>)
 8006816:	429c      	cmp	r4, r3
 8006818:	d005      	beq.n	8006826 <std+0x46>
 800681a:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <std+0x64>)
 800681c:	429c      	cmp	r4, r3
 800681e:	d002      	beq.n	8006826 <std+0x46>
 8006820:	4b09      	ldr	r3, [pc, #36]	@ (8006848 <std+0x68>)
 8006822:	429c      	cmp	r4, r3
 8006824:	d103      	bne.n	800682e <std+0x4e>
 8006826:	0020      	movs	r0, r4
 8006828:	3058      	adds	r0, #88	@ 0x58
 800682a:	f000 f98d 	bl	8006b48 <__retarget_lock_init_recursive>
 800682e:	bd10      	pop	{r4, pc}
 8006830:	080069a9 	.word	0x080069a9
 8006834:	080069d1 	.word	0x080069d1
 8006838:	08006a09 	.word	0x08006a09
 800683c:	08006a35 	.word	0x08006a35
 8006840:	20000360 	.word	0x20000360
 8006844:	200003c8 	.word	0x200003c8
 8006848:	20000430 	.word	0x20000430

0800684c <stdio_exit_handler>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4a03      	ldr	r2, [pc, #12]	@ (800685c <stdio_exit_handler+0x10>)
 8006850:	4903      	ldr	r1, [pc, #12]	@ (8006860 <stdio_exit_handler+0x14>)
 8006852:	4804      	ldr	r0, [pc, #16]	@ (8006864 <stdio_exit_handler+0x18>)
 8006854:	f000 f86c 	bl	8006930 <_fwalk_sglue>
 8006858:	bd10      	pop	{r4, pc}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	2000000c 	.word	0x2000000c
 8006860:	08009519 	.word	0x08009519
 8006864:	2000001c 	.word	0x2000001c

08006868 <cleanup_stdio>:
 8006868:	6841      	ldr	r1, [r0, #4]
 800686a:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <cleanup_stdio+0x30>)
 800686c:	b510      	push	{r4, lr}
 800686e:	0004      	movs	r4, r0
 8006870:	4299      	cmp	r1, r3
 8006872:	d001      	beq.n	8006878 <cleanup_stdio+0x10>
 8006874:	f002 fe50 	bl	8009518 <_fflush_r>
 8006878:	68a1      	ldr	r1, [r4, #8]
 800687a:	4b08      	ldr	r3, [pc, #32]	@ (800689c <cleanup_stdio+0x34>)
 800687c:	4299      	cmp	r1, r3
 800687e:	d002      	beq.n	8006886 <cleanup_stdio+0x1e>
 8006880:	0020      	movs	r0, r4
 8006882:	f002 fe49 	bl	8009518 <_fflush_r>
 8006886:	68e1      	ldr	r1, [r4, #12]
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <cleanup_stdio+0x38>)
 800688a:	4299      	cmp	r1, r3
 800688c:	d002      	beq.n	8006894 <cleanup_stdio+0x2c>
 800688e:	0020      	movs	r0, r4
 8006890:	f002 fe42 	bl	8009518 <_fflush_r>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	20000360 	.word	0x20000360
 800689c:	200003c8 	.word	0x200003c8
 80068a0:	20000430 	.word	0x20000430

080068a4 <global_stdio_init.part.0>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <global_stdio_init.part.0+0x28>)
 80068a8:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <global_stdio_init.part.0+0x2c>)
 80068aa:	2104      	movs	r1, #4
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	4809      	ldr	r0, [pc, #36]	@ (80068d4 <global_stdio_init.part.0+0x30>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	f7ff ff95 	bl	80067e0 <std>
 80068b6:	2201      	movs	r2, #1
 80068b8:	2109      	movs	r1, #9
 80068ba:	4807      	ldr	r0, [pc, #28]	@ (80068d8 <global_stdio_init.part.0+0x34>)
 80068bc:	f7ff ff90 	bl	80067e0 <std>
 80068c0:	2202      	movs	r2, #2
 80068c2:	2112      	movs	r1, #18
 80068c4:	4805      	ldr	r0, [pc, #20]	@ (80068dc <global_stdio_init.part.0+0x38>)
 80068c6:	f7ff ff8b 	bl	80067e0 <std>
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	20000498 	.word	0x20000498
 80068d0:	0800684d 	.word	0x0800684d
 80068d4:	20000360 	.word	0x20000360
 80068d8:	200003c8 	.word	0x200003c8
 80068dc:	20000430 	.word	0x20000430

080068e0 <__sfp_lock_acquire>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	4802      	ldr	r0, [pc, #8]	@ (80068ec <__sfp_lock_acquire+0xc>)
 80068e4:	f000 f931 	bl	8006b4a <__retarget_lock_acquire_recursive>
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	200004a1 	.word	0x200004a1

080068f0 <__sfp_lock_release>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4802      	ldr	r0, [pc, #8]	@ (80068fc <__sfp_lock_release+0xc>)
 80068f4:	f000 f92a 	bl	8006b4c <__retarget_lock_release_recursive>
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	200004a1 	.word	0x200004a1

08006900 <__sinit>:
 8006900:	b510      	push	{r4, lr}
 8006902:	0004      	movs	r4, r0
 8006904:	f7ff ffec 	bl	80068e0 <__sfp_lock_acquire>
 8006908:	6a23      	ldr	r3, [r4, #32]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <__sinit+0x14>
 800690e:	f7ff ffef 	bl	80068f0 <__sfp_lock_release>
 8006912:	bd10      	pop	{r4, pc}
 8006914:	4b04      	ldr	r3, [pc, #16]	@ (8006928 <__sinit+0x28>)
 8006916:	6223      	str	r3, [r4, #32]
 8006918:	4b04      	ldr	r3, [pc, #16]	@ (800692c <__sinit+0x2c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f6      	bne.n	800690e <__sinit+0xe>
 8006920:	f7ff ffc0 	bl	80068a4 <global_stdio_init.part.0>
 8006924:	e7f3      	b.n	800690e <__sinit+0xe>
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	08006869 	.word	0x08006869
 800692c:	20000498 	.word	0x20000498

08006930 <_fwalk_sglue>:
 8006930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006932:	0014      	movs	r4, r2
 8006934:	2600      	movs	r6, #0
 8006936:	9000      	str	r0, [sp, #0]
 8006938:	9101      	str	r1, [sp, #4]
 800693a:	68a5      	ldr	r5, [r4, #8]
 800693c:	6867      	ldr	r7, [r4, #4]
 800693e:	3f01      	subs	r7, #1
 8006940:	d504      	bpl.n	800694c <_fwalk_sglue+0x1c>
 8006942:	6824      	ldr	r4, [r4, #0]
 8006944:	2c00      	cmp	r4, #0
 8006946:	d1f8      	bne.n	800693a <_fwalk_sglue+0xa>
 8006948:	0030      	movs	r0, r6
 800694a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800694c:	89ab      	ldrh	r3, [r5, #12]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d908      	bls.n	8006964 <_fwalk_sglue+0x34>
 8006952:	220e      	movs	r2, #14
 8006954:	5eab      	ldrsh	r3, [r5, r2]
 8006956:	3301      	adds	r3, #1
 8006958:	d004      	beq.n	8006964 <_fwalk_sglue+0x34>
 800695a:	0029      	movs	r1, r5
 800695c:	9800      	ldr	r0, [sp, #0]
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	4798      	blx	r3
 8006962:	4306      	orrs	r6, r0
 8006964:	3568      	adds	r5, #104	@ 0x68
 8006966:	e7ea      	b.n	800693e <_fwalk_sglue+0xe>

08006968 <siprintf>:
 8006968:	b40e      	push	{r1, r2, r3}
 800696a:	b500      	push	{lr}
 800696c:	490b      	ldr	r1, [pc, #44]	@ (800699c <siprintf+0x34>)
 800696e:	b09c      	sub	sp, #112	@ 0x70
 8006970:	ab1d      	add	r3, sp, #116	@ 0x74
 8006972:	9002      	str	r0, [sp, #8]
 8006974:	9006      	str	r0, [sp, #24]
 8006976:	9107      	str	r1, [sp, #28]
 8006978:	9104      	str	r1, [sp, #16]
 800697a:	4809      	ldr	r0, [pc, #36]	@ (80069a0 <siprintf+0x38>)
 800697c:	4909      	ldr	r1, [pc, #36]	@ (80069a4 <siprintf+0x3c>)
 800697e:	cb04      	ldmia	r3!, {r2}
 8006980:	9105      	str	r1, [sp, #20]
 8006982:	6800      	ldr	r0, [r0, #0]
 8006984:	a902      	add	r1, sp, #8
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	f002 fc42 	bl	8009210 <_svfiprintf_r>
 800698c:	2200      	movs	r2, #0
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	b01c      	add	sp, #112	@ 0x70
 8006994:	bc08      	pop	{r3}
 8006996:	b003      	add	sp, #12
 8006998:	4718      	bx	r3
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	7fffffff 	.word	0x7fffffff
 80069a0:	20000018 	.word	0x20000018
 80069a4:	ffff0208 	.word	0xffff0208

080069a8 <__sread>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	000c      	movs	r4, r1
 80069ac:	250e      	movs	r5, #14
 80069ae:	5f49      	ldrsh	r1, [r1, r5]
 80069b0:	f000 f878 	bl	8006aa4 <_read_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	db03      	blt.n	80069c0 <__sread+0x18>
 80069b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80069ba:	181b      	adds	r3, r3, r0
 80069bc:	6563      	str	r3, [r4, #84]	@ 0x54
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	4a02      	ldr	r2, [pc, #8]	@ (80069cc <__sread+0x24>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	e7f9      	b.n	80069be <__sread+0x16>
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	ffffefff 	.word	0xffffefff

080069d0 <__swrite>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	001f      	movs	r7, r3
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	0005      	movs	r5, r0
 80069d8:	000c      	movs	r4, r1
 80069da:	0016      	movs	r6, r2
 80069dc:	05db      	lsls	r3, r3, #23
 80069de:	d505      	bpl.n	80069ec <__swrite+0x1c>
 80069e0:	230e      	movs	r3, #14
 80069e2:	5ec9      	ldrsh	r1, [r1, r3]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2302      	movs	r3, #2
 80069e8:	f000 f848 	bl	8006a7c <_lseek_r>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	4a05      	ldr	r2, [pc, #20]	@ (8006a04 <__swrite+0x34>)
 80069f0:	0028      	movs	r0, r5
 80069f2:	4013      	ands	r3, r2
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	0032      	movs	r2, r6
 80069f8:	230e      	movs	r3, #14
 80069fa:	5ee1      	ldrsh	r1, [r4, r3]
 80069fc:	003b      	movs	r3, r7
 80069fe:	f000 f865 	bl	8006acc <_write_r>
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a04:	ffffefff 	.word	0xffffefff

08006a08 <__sseek>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	000c      	movs	r4, r1
 8006a0c:	250e      	movs	r5, #14
 8006a0e:	5f49      	ldrsh	r1, [r1, r5]
 8006a10:	f000 f834 	bl	8006a7c <_lseek_r>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	d103      	bne.n	8006a22 <__sseek+0x1a>
 8006a1a:	4a05      	ldr	r2, [pc, #20]	@ (8006a30 <__sseek+0x28>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	2280      	movs	r2, #128	@ 0x80
 8006a24:	0152      	lsls	r2, r2, #5
 8006a26:	4313      	orrs	r3, r2
 8006a28:	81a3      	strh	r3, [r4, #12]
 8006a2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a2c:	e7f8      	b.n	8006a20 <__sseek+0x18>
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	ffffefff 	.word	0xffffefff

08006a34 <__sclose>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	230e      	movs	r3, #14
 8006a38:	5ec9      	ldrsh	r1, [r1, r3]
 8006a3a:	f000 f80d 	bl	8006a58 <_close_r>
 8006a3e:	bd10      	pop	{r4, pc}

08006a40 <memset>:
 8006a40:	0003      	movs	r3, r0
 8006a42:	1882      	adds	r2, r0, r2
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d100      	bne.n	8006a4a <memset+0xa>
 8006a48:	4770      	bx	lr
 8006a4a:	7019      	strb	r1, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	e7f9      	b.n	8006a44 <memset+0x4>

08006a50 <_localeconv_r>:
 8006a50:	4800      	ldr	r0, [pc, #0]	@ (8006a54 <_localeconv_r+0x4>)
 8006a52:	4770      	bx	lr
 8006a54:	20000158 	.word	0x20000158

08006a58 <_close_r>:
 8006a58:	2300      	movs	r3, #0
 8006a5a:	b570      	push	{r4, r5, r6, lr}
 8006a5c:	4d06      	ldr	r5, [pc, #24]	@ (8006a78 <_close_r+0x20>)
 8006a5e:	0004      	movs	r4, r0
 8006a60:	0008      	movs	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fc fbf5 	bl	8003252 <_close>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_close_r+0x1c>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d000      	beq.n	8006a74 <_close_r+0x1c>
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	2000049c 	.word	0x2000049c

08006a7c <_lseek_r>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	0004      	movs	r4, r0
 8006a80:	0008      	movs	r0, r1
 8006a82:	0011      	movs	r1, r2
 8006a84:	001a      	movs	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	4d05      	ldr	r5, [pc, #20]	@ (8006aa0 <_lseek_r+0x24>)
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fc fc02 	bl	8003294 <_lseek>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d103      	bne.n	8006a9c <_lseek_r+0x20>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d000      	beq.n	8006a9c <_lseek_r+0x20>
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	2000049c 	.word	0x2000049c

08006aa4 <_read_r>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	0004      	movs	r4, r0
 8006aa8:	0008      	movs	r0, r1
 8006aaa:	0011      	movs	r1, r2
 8006aac:	001a      	movs	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4d05      	ldr	r5, [pc, #20]	@ (8006ac8 <_read_r+0x24>)
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	f7fc fb94 	bl	80031e0 <_read>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d103      	bne.n	8006ac4 <_read_r+0x20>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d000      	beq.n	8006ac4 <_read_r+0x20>
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	2000049c 	.word	0x2000049c

08006acc <_write_r>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	0004      	movs	r4, r0
 8006ad0:	0008      	movs	r0, r1
 8006ad2:	0011      	movs	r1, r2
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4d05      	ldr	r5, [pc, #20]	@ (8006af0 <_write_r+0x24>)
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fc fb9d 	bl	800321a <_write>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d103      	bne.n	8006aec <_write_r+0x20>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d000      	beq.n	8006aec <_write_r+0x20>
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	2000049c 	.word	0x2000049c

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	@ (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	20000018 	.word	0x20000018

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	2600      	movs	r6, #0
 8006b04:	4c0c      	ldr	r4, [pc, #48]	@ (8006b38 <__libc_init_array+0x38>)
 8006b06:	4d0d      	ldr	r5, [pc, #52]	@ (8006b3c <__libc_init_array+0x3c>)
 8006b08:	1b64      	subs	r4, r4, r5
 8006b0a:	10a4      	asrs	r4, r4, #2
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	2600      	movs	r6, #0
 8006b12:	f003 fc43 	bl	800a39c <_init>
 8006b16:	4c0a      	ldr	r4, [pc, #40]	@ (8006b40 <__libc_init_array+0x40>)
 8006b18:	4d0a      	ldr	r5, [pc, #40]	@ (8006b44 <__libc_init_array+0x44>)
 8006b1a:	1b64      	subs	r4, r4, r5
 8006b1c:	10a4      	asrs	r4, r4, #2
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	00b3      	lsls	r3, r6, #2
 8006b26:	58eb      	ldr	r3, [r5, r3]
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	00b3      	lsls	r3, r6, #2
 8006b30:	58eb      	ldr	r3, [r5, r3]
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	0800a918 	.word	0x0800a918
 8006b3c:	0800a918 	.word	0x0800a918
 8006b40:	0800a91c 	.word	0x0800a91c
 8006b44:	0800a918 	.word	0x0800a918

08006b48 <__retarget_lock_init_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <__retarget_lock_acquire_recursive>:
 8006b4a:	4770      	bx	lr

08006b4c <__retarget_lock_release_recursive>:
 8006b4c:	4770      	bx	lr

08006b4e <memchr>:
 8006b4e:	b2c9      	uxtb	r1, r1
 8006b50:	1882      	adds	r2, r0, r2
 8006b52:	4290      	cmp	r0, r2
 8006b54:	d101      	bne.n	8006b5a <memchr+0xc>
 8006b56:	2000      	movs	r0, #0
 8006b58:	4770      	bx	lr
 8006b5a:	7803      	ldrb	r3, [r0, #0]
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	d0fb      	beq.n	8006b58 <memchr+0xa>
 8006b60:	3001      	adds	r0, #1
 8006b62:	e7f6      	b.n	8006b52 <memchr+0x4>

08006b64 <nanf>:
 8006b64:	4800      	ldr	r0, [pc, #0]	@ (8006b68 <nanf+0x4>)
 8006b66:	4770      	bx	lr
 8006b68:	7fc00000 	.word	0x7fc00000

08006b6c <quorem>:
 8006b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6e:	6902      	ldr	r2, [r0, #16]
 8006b70:	690f      	ldr	r7, [r1, #16]
 8006b72:	b087      	sub	sp, #28
 8006b74:	0006      	movs	r6, r0
 8006b76:	000b      	movs	r3, r1
 8006b78:	2000      	movs	r0, #0
 8006b7a:	9102      	str	r1, [sp, #8]
 8006b7c:	42ba      	cmp	r2, r7
 8006b7e:	db6d      	blt.n	8006c5c <quorem+0xf0>
 8006b80:	3f01      	subs	r7, #1
 8006b82:	00bc      	lsls	r4, r7, #2
 8006b84:	3314      	adds	r3, #20
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	191b      	adds	r3, r3, r4
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	0033      	movs	r3, r6
 8006b8e:	3314      	adds	r3, #20
 8006b90:	191c      	adds	r4, r3, r4
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	9804      	ldr	r0, [sp, #16]
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	3501      	adds	r5, #1
 8006ba0:	0029      	movs	r1, r5
 8006ba2:	f7f9 facd 	bl	8000140 <__udivsi3>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	9000      	str	r0, [sp, #0]
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	d32b      	bcc.n	8006c06 <quorem+0x9a>
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	9d01      	ldr	r5, [sp, #4]
 8006bb2:	469c      	mov	ip, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	4662      	mov	r2, ip
 8006bbc:	ca08      	ldmia	r2!, {r3}
 8006bbe:	6828      	ldr	r0, [r5, #0]
 8006bc0:	4694      	mov	ip, r2
 8006bc2:	9a00      	ldr	r2, [sp, #0]
 8006bc4:	b299      	uxth	r1, r3
 8006bc6:	4351      	muls	r1, r2
 8006bc8:	9a05      	ldr	r2, [sp, #20]
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	1889      	adds	r1, r1, r2
 8006bce:	9a00      	ldr	r2, [sp, #0]
 8006bd0:	4353      	muls	r3, r2
 8006bd2:	0c0a      	lsrs	r2, r1, #16
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	0c1a      	lsrs	r2, r3, #16
 8006bd8:	b289      	uxth	r1, r1
 8006bda:	9205      	str	r2, [sp, #20]
 8006bdc:	b282      	uxth	r2, r0
 8006bde:	1a52      	subs	r2, r2, r1
 8006be0:	9904      	ldr	r1, [sp, #16]
 8006be2:	0c00      	lsrs	r0, r0, #16
 8006be4:	1852      	adds	r2, r2, r1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	1411      	asrs	r1, r2, #16
 8006bea:	1ac3      	subs	r3, r0, r3
 8006bec:	185b      	adds	r3, r3, r1
 8006bee:	1419      	asrs	r1, r3, #16
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	9104      	str	r1, [sp, #16]
 8006bfa:	c504      	stmia	r5!, {r2}
 8006bfc:	4563      	cmp	r3, ip
 8006bfe:	d2dc      	bcs.n	8006bba <quorem+0x4e>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d030      	beq.n	8006c68 <quorem+0xfc>
 8006c06:	0030      	movs	r0, r6
 8006c08:	9902      	ldr	r1, [sp, #8]
 8006c0a:	f001 fa11 	bl	8008030 <__mcmp>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	db23      	blt.n	8006c5a <quorem+0xee>
 8006c12:	0034      	movs	r4, r6
 8006c14:	2500      	movs	r5, #0
 8006c16:	9902      	ldr	r1, [sp, #8]
 8006c18:	3414      	adds	r4, #20
 8006c1a:	3114      	adds	r1, #20
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	c901      	ldmia	r1!, {r0}
 8006c20:	9302      	str	r3, [sp, #8]
 8006c22:	466b      	mov	r3, sp
 8006c24:	891b      	ldrh	r3, [r3, #8]
 8006c26:	b282      	uxth	r2, r0
 8006c28:	1a9a      	subs	r2, r3, r2
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	1952      	adds	r2, r2, r5
 8006c2e:	0c00      	lsrs	r0, r0, #16
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	1a1b      	subs	r3, r3, r0
 8006c34:	1410      	asrs	r0, r2, #16
 8006c36:	181b      	adds	r3, r3, r0
 8006c38:	141d      	asrs	r5, r3, #16
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	c404      	stmia	r4!, {r2}
 8006c44:	428b      	cmp	r3, r1
 8006c46:	d2e9      	bcs.n	8006c1c <quorem+0xb0>
 8006c48:	9a01      	ldr	r2, [sp, #4]
 8006c4a:	00bb      	lsls	r3, r7, #2
 8006c4c:	18d3      	adds	r3, r2, r3
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	d013      	beq.n	8006c7c <quorem+0x110>
 8006c54:	9b00      	ldr	r3, [sp, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	9800      	ldr	r0, [sp, #0]
 8006c5c:	b007      	add	sp, #28
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <quorem+0x104>
 8006c66:	3f01      	subs	r7, #1
 8006c68:	9b01      	ldr	r3, [sp, #4]
 8006c6a:	3c04      	subs	r4, #4
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d3f7      	bcc.n	8006c60 <quorem+0xf4>
 8006c70:	6137      	str	r7, [r6, #16]
 8006c72:	e7c8      	b.n	8006c06 <quorem+0x9a>
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d104      	bne.n	8006c84 <quorem+0x118>
 8006c7a:	3f01      	subs	r7, #1
 8006c7c:	9a01      	ldr	r2, [sp, #4]
 8006c7e:	3b04      	subs	r3, #4
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d3f7      	bcc.n	8006c74 <quorem+0x108>
 8006c84:	6137      	str	r7, [r6, #16]
 8006c86:	e7e5      	b.n	8006c54 <quorem+0xe8>

08006c88 <_dtoa_r>:
 8006c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8a:	0014      	movs	r4, r2
 8006c8c:	001d      	movs	r5, r3
 8006c8e:	69c6      	ldr	r6, [r0, #28]
 8006c90:	b09d      	sub	sp, #116	@ 0x74
 8006c92:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c94:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006c96:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006c98:	9003      	str	r0, [sp, #12]
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	d10f      	bne.n	8006cbe <_dtoa_r+0x36>
 8006c9e:	2010      	movs	r0, #16
 8006ca0:	f000 fe30 	bl	8007904 <malloc>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	1e02      	subs	r2, r0, #0
 8006ca8:	61d8      	str	r0, [r3, #28]
 8006caa:	d104      	bne.n	8006cb6 <_dtoa_r+0x2e>
 8006cac:	21ef      	movs	r1, #239	@ 0xef
 8006cae:	4bc7      	ldr	r3, [pc, #796]	@ (8006fcc <_dtoa_r+0x344>)
 8006cb0:	48c7      	ldr	r0, [pc, #796]	@ (8006fd0 <_dtoa_r+0x348>)
 8006cb2:	f002 fca3 	bl	80095fc <__assert_func>
 8006cb6:	6046      	str	r6, [r0, #4]
 8006cb8:	6086      	str	r6, [r0, #8]
 8006cba:	6006      	str	r6, [r0, #0]
 8006cbc:	60c6      	str	r6, [r0, #12]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d00b      	beq.n	8006ce0 <_dtoa_r+0x58>
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4093      	lsls	r3, r2
 8006cce:	604a      	str	r2, [r1, #4]
 8006cd0:	608b      	str	r3, [r1, #8]
 8006cd2:	9803      	ldr	r0, [sp, #12]
 8006cd4:	f000 ff16 	bl	8007b04 <_Bfree>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	da1e      	bge.n	8006d22 <_dtoa_r+0x9a>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	006b      	lsls	r3, r5, #1
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006cf0:	4bb8      	ldr	r3, [pc, #736]	@ (8006fd4 <_dtoa_r+0x34c>)
 8006cf2:	4ab8      	ldr	r2, [pc, #736]	@ (8006fd4 <_dtoa_r+0x34c>)
 8006cf4:	403b      	ands	r3, r7
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d116      	bne.n	8006d28 <_dtoa_r+0xa0>
 8006cfa:	4bb7      	ldr	r3, [pc, #732]	@ (8006fd8 <_dtoa_r+0x350>)
 8006cfc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	033b      	lsls	r3, r7, #12
 8006d02:	0b1b      	lsrs	r3, r3, #12
 8006d04:	4323      	orrs	r3, r4
 8006d06:	d101      	bne.n	8006d0c <_dtoa_r+0x84>
 8006d08:	f000 fd83 	bl	8007812 <_dtoa_r+0xb8a>
 8006d0c:	4bb3      	ldr	r3, [pc, #716]	@ (8006fdc <_dtoa_r+0x354>)
 8006d0e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d002      	beq.n	8006d1c <_dtoa_r+0x94>
 8006d16:	4bb2      	ldr	r3, [pc, #712]	@ (8006fe0 <_dtoa_r+0x358>)
 8006d18:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	9808      	ldr	r0, [sp, #32]
 8006d1e:	b01d      	add	sp, #116	@ 0x74
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d22:	2300      	movs	r3, #0
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	e7e2      	b.n	8006cee <_dtoa_r+0x66>
 8006d28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d2c:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d34:	2200      	movs	r2, #0
 8006d36:	2300      	movs	r3, #0
 8006d38:	f7f9 fb88 	bl	800044c <__aeabi_dcmpeq>
 8006d3c:	1e06      	subs	r6, r0, #0
 8006d3e:	d00b      	beq.n	8006d58 <_dtoa_r+0xd0>
 8006d40:	2301      	movs	r3, #1
 8006d42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <_dtoa_r+0xca>
 8006d4c:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe4 <_dtoa_r+0x35c>)
 8006d4e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe8 <_dtoa_r+0x360>)
 8006d54:	9308      	str	r3, [sp, #32]
 8006d56:	e7e1      	b.n	8006d1c <_dtoa_r+0x94>
 8006d58:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	9803      	ldr	r0, [sp, #12]
 8006d62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d66:	f001 fa85 	bl	8008274 <__d2b>
 8006d6a:	007a      	lsls	r2, r7, #1
 8006d6c:	9005      	str	r0, [sp, #20]
 8006d6e:	0d52      	lsrs	r2, r2, #21
 8006d70:	d100      	bne.n	8006d74 <_dtoa_r+0xec>
 8006d72:	e07b      	b.n	8006e6c <_dtoa_r+0x1e4>
 8006d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d76:	9618      	str	r6, [sp, #96]	@ 0x60
 8006d78:	0319      	lsls	r1, r3, #12
 8006d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8006fec <_dtoa_r+0x364>)
 8006d7c:	0b09      	lsrs	r1, r1, #12
 8006d7e:	430b      	orrs	r3, r1
 8006d80:	499b      	ldr	r1, [pc, #620]	@ (8006ff0 <_dtoa_r+0x368>)
 8006d82:	1857      	adds	r7, r2, r1
 8006d84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d88:	0019      	movs	r1, r3
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4b99      	ldr	r3, [pc, #612]	@ (8006ff4 <_dtoa_r+0x36c>)
 8006d8e:	f7fb f903 	bl	8001f98 <__aeabi_dsub>
 8006d92:	4a99      	ldr	r2, [pc, #612]	@ (8006ff8 <_dtoa_r+0x370>)
 8006d94:	4b99      	ldr	r3, [pc, #612]	@ (8006ffc <_dtoa_r+0x374>)
 8006d96:	f7fa fe37 	bl	8001a08 <__aeabi_dmul>
 8006d9a:	4a99      	ldr	r2, [pc, #612]	@ (8007000 <_dtoa_r+0x378>)
 8006d9c:	4b99      	ldr	r3, [pc, #612]	@ (8007004 <_dtoa_r+0x37c>)
 8006d9e:	f7f9 fe8b 	bl	8000ab8 <__aeabi_dadd>
 8006da2:	0004      	movs	r4, r0
 8006da4:	0038      	movs	r0, r7
 8006da6:	000d      	movs	r5, r1
 8006da8:	f7fb fcf0 	bl	800278c <__aeabi_i2d>
 8006dac:	4a96      	ldr	r2, [pc, #600]	@ (8007008 <_dtoa_r+0x380>)
 8006dae:	4b97      	ldr	r3, [pc, #604]	@ (800700c <_dtoa_r+0x384>)
 8006db0:	f7fa fe2a 	bl	8001a08 <__aeabi_dmul>
 8006db4:	0002      	movs	r2, r0
 8006db6:	000b      	movs	r3, r1
 8006db8:	0020      	movs	r0, r4
 8006dba:	0029      	movs	r1, r5
 8006dbc:	f7f9 fe7c 	bl	8000ab8 <__aeabi_dadd>
 8006dc0:	0004      	movs	r4, r0
 8006dc2:	000d      	movs	r5, r1
 8006dc4:	f7fb fca6 	bl	8002714 <__aeabi_d2iz>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	9004      	str	r0, [sp, #16]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	0020      	movs	r0, r4
 8006dd0:	0029      	movs	r1, r5
 8006dd2:	f7f9 fb41 	bl	8000458 <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d00b      	beq.n	8006df2 <_dtoa_r+0x16a>
 8006dda:	9804      	ldr	r0, [sp, #16]
 8006ddc:	f7fb fcd6 	bl	800278c <__aeabi_i2d>
 8006de0:	002b      	movs	r3, r5
 8006de2:	0022      	movs	r2, r4
 8006de4:	f7f9 fb32 	bl	800044c <__aeabi_dcmpeq>
 8006de8:	4243      	negs	r3, r0
 8006dea:	4158      	adcs	r0, r3
 8006dec:	9b04      	ldr	r3, [sp, #16]
 8006dee:	1a1b      	subs	r3, r3, r0
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	2301      	movs	r3, #1
 8006df4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	2b16      	cmp	r3, #22
 8006dfa:	d810      	bhi.n	8006e1e <_dtoa_r+0x196>
 8006dfc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006dfe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006e00:	9a04      	ldr	r2, [sp, #16]
 8006e02:	4b83      	ldr	r3, [pc, #524]	@ (8007010 <_dtoa_r+0x388>)
 8006e04:	00d2      	lsls	r2, r2, #3
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f7f9 fb24 	bl	8000458 <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d047      	beq.n	8006ea4 <_dtoa_r+0x21c>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e1e:	2200      	movs	r2, #0
 8006e20:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e22:	9206      	str	r2, [sp, #24]
 8006e24:	1bdb      	subs	r3, r3, r7
 8006e26:	1e5a      	subs	r2, r3, #1
 8006e28:	d53e      	bpl.n	8006ea8 <_dtoa_r+0x220>
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	9306      	str	r3, [sp, #24]
 8006e30:	2300      	movs	r3, #0
 8006e32:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	db38      	blt.n	8006eac <_dtoa_r+0x224>
 8006e3a:	9a04      	ldr	r2, [sp, #16]
 8006e3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e3e:	4694      	mov	ip, r2
 8006e40:	4463      	add	r3, ip
 8006e42:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e44:	2300      	movs	r3, #0
 8006e46:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e4c:	2401      	movs	r4, #1
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d867      	bhi.n	8006f22 <_dtoa_r+0x29a>
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	dd02      	ble.n	8006e5c <_dtoa_r+0x1d4>
 8006e56:	2400      	movs	r4, #0
 8006e58:	3b04      	subs	r3, #4
 8006e5a:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e5e:	1e98      	subs	r0, r3, #2
 8006e60:	2803      	cmp	r0, #3
 8006e62:	d867      	bhi.n	8006f34 <_dtoa_r+0x2ac>
 8006e64:	f7f9 f958 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006e68:	5b383a2b 	.word	0x5b383a2b
 8006e6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e6e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006e70:	18f6      	adds	r6, r6, r3
 8006e72:	4b68      	ldr	r3, [pc, #416]	@ (8007014 <_dtoa_r+0x38c>)
 8006e74:	18f2      	adds	r2, r6, r3
 8006e76:	2a20      	cmp	r2, #32
 8006e78:	dd0f      	ble.n	8006e9a <_dtoa_r+0x212>
 8006e7a:	2340      	movs	r3, #64	@ 0x40
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	409f      	lsls	r7, r3
 8006e80:	4b65      	ldr	r3, [pc, #404]	@ (8007018 <_dtoa_r+0x390>)
 8006e82:	0038      	movs	r0, r7
 8006e84:	18f3      	adds	r3, r6, r3
 8006e86:	40dc      	lsrs	r4, r3
 8006e88:	4320      	orrs	r0, r4
 8006e8a:	f7fb fcad 	bl	80027e8 <__aeabi_ui2d>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4b62      	ldr	r3, [pc, #392]	@ (800701c <_dtoa_r+0x394>)
 8006e92:	1e77      	subs	r7, r6, #1
 8006e94:	18cb      	adds	r3, r1, r3
 8006e96:	9218      	str	r2, [sp, #96]	@ 0x60
 8006e98:	e776      	b.n	8006d88 <_dtoa_r+0x100>
 8006e9a:	2320      	movs	r3, #32
 8006e9c:	0020      	movs	r0, r4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	4098      	lsls	r0, r3
 8006ea2:	e7f2      	b.n	8006e8a <_dtoa_r+0x202>
 8006ea4:	9015      	str	r0, [sp, #84]	@ 0x54
 8006ea6:	e7ba      	b.n	8006e1e <_dtoa_r+0x196>
 8006ea8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006eaa:	e7c3      	b.n	8006e34 <_dtoa_r+0x1ac>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	9a04      	ldr	r2, [sp, #16]
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	9306      	str	r3, [sp, #24]
 8006eb4:	4253      	negs	r3, r2
 8006eb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9314      	str	r3, [sp, #80]	@ 0x50
 8006ebc:	e7c5      	b.n	8006e4a <_dtoa_r+0x1c2>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ec4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc13      	bgt.n	8006ef4 <_dtoa_r+0x26c>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	001a      	movs	r2, r3
 8006ed0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006ed6:	e00d      	b.n	8006ef4 <_dtoa_r+0x26c>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e7f1      	b.n	8006ec0 <_dtoa_r+0x238>
 8006edc:	2300      	movs	r3, #0
 8006ede:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ee0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ee2:	4694      	mov	ip, r2
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	4463      	add	r3, ip
 8006ee8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006eea:	3301      	adds	r3, #1
 8006eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dc00      	bgt.n	8006ef4 <_dtoa_r+0x26c>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9a03      	ldr	r2, [sp, #12]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	69d0      	ldr	r0, [r2, #28]
 8006efa:	2204      	movs	r2, #4
 8006efc:	0015      	movs	r5, r2
 8006efe:	3514      	adds	r5, #20
 8006f00:	429d      	cmp	r5, r3
 8006f02:	d91b      	bls.n	8006f3c <_dtoa_r+0x2b4>
 8006f04:	6041      	str	r1, [r0, #4]
 8006f06:	9803      	ldr	r0, [sp, #12]
 8006f08:	f000 fdb8 	bl	8007a7c <_Balloc>
 8006f0c:	9008      	str	r0, [sp, #32]
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d117      	bne.n	8006f42 <_dtoa_r+0x2ba>
 8006f12:	21b0      	movs	r1, #176	@ 0xb0
 8006f14:	4b42      	ldr	r3, [pc, #264]	@ (8007020 <_dtoa_r+0x398>)
 8006f16:	482e      	ldr	r0, [pc, #184]	@ (8006fd0 <_dtoa_r+0x348>)
 8006f18:	9a08      	ldr	r2, [sp, #32]
 8006f1a:	31ff      	adds	r1, #255	@ 0xff
 8006f1c:	e6c9      	b.n	8006cb2 <_dtoa_r+0x2a>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7dd      	b.n	8006ede <_dtoa_r+0x256>
 8006f22:	2300      	movs	r3, #0
 8006f24:	9410      	str	r4, [sp, #64]	@ 0x40
 8006f26:	9322      	str	r3, [sp, #136]	@ 0x88
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f2e:	2200      	movs	r2, #0
 8006f30:	3313      	adds	r3, #19
 8006f32:	e7cf      	b.n	8006ed4 <_dtoa_r+0x24c>
 8006f34:	2301      	movs	r3, #1
 8006f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f38:	3b02      	subs	r3, #2
 8006f3a:	e7f6      	b.n	8006f2a <_dtoa_r+0x2a2>
 8006f3c:	3101      	adds	r1, #1
 8006f3e:	0052      	lsls	r2, r2, #1
 8006f40:	e7dc      	b.n	8006efc <_dtoa_r+0x274>
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	9a08      	ldr	r2, [sp, #32]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4c:	2b0e      	cmp	r3, #14
 8006f4e:	d900      	bls.n	8006f52 <_dtoa_r+0x2ca>
 8006f50:	e0d9      	b.n	8007106 <_dtoa_r+0x47e>
 8006f52:	2c00      	cmp	r4, #0
 8006f54:	d100      	bne.n	8006f58 <_dtoa_r+0x2d0>
 8006f56:	e0d6      	b.n	8007106 <_dtoa_r+0x47e>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dd64      	ble.n	8007028 <_dtoa_r+0x3a0>
 8006f5e:	210f      	movs	r1, #15
 8006f60:	9a04      	ldr	r2, [sp, #16]
 8006f62:	4b2b      	ldr	r3, [pc, #172]	@ (8007010 <_dtoa_r+0x388>)
 8006f64:	400a      	ands	r2, r1
 8006f66:	00d2      	lsls	r2, r2, #3
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	681e      	ldr	r6, [r3, #0]
 8006f6c:	685f      	ldr	r7, [r3, #4]
 8006f6e:	9b04      	ldr	r3, [sp, #16]
 8006f70:	2402      	movs	r4, #2
 8006f72:	111d      	asrs	r5, r3, #4
 8006f74:	05db      	lsls	r3, r3, #23
 8006f76:	d50a      	bpl.n	8006f8e <_dtoa_r+0x306>
 8006f78:	4b2a      	ldr	r3, [pc, #168]	@ (8007024 <_dtoa_r+0x39c>)
 8006f7a:	400d      	ands	r5, r1
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f84:	f7fa f8fc 	bl	8001180 <__aeabi_ddiv>
 8006f88:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f8c:	3401      	adds	r4, #1
 8006f8e:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <_dtoa_r+0x39c>)
 8006f90:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	d108      	bne.n	8006fa8 <_dtoa_r+0x320>
 8006f96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	003b      	movs	r3, r7
 8006f9e:	f7fa f8ef 	bl	8001180 <__aeabi_ddiv>
 8006fa2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fa6:	e05a      	b.n	800705e <_dtoa_r+0x3d6>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	421d      	tst	r5, r3
 8006fac:	d009      	beq.n	8006fc2 <_dtoa_r+0x33a>
 8006fae:	18e4      	adds	r4, r4, r3
 8006fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fb2:	0030      	movs	r0, r6
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	0039      	movs	r1, r7
 8006fba:	f7fa fd25 	bl	8001a08 <__aeabi_dmul>
 8006fbe:	0006      	movs	r6, r0
 8006fc0:	000f      	movs	r7, r1
 8006fc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fc4:	106d      	asrs	r5, r5, #1
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	e7e2      	b.n	8006f90 <_dtoa_r+0x308>
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	0800a526 	.word	0x0800a526
 8006fd0:	0800a53d 	.word	0x0800a53d
 8006fd4:	7ff00000 	.word	0x7ff00000
 8006fd8:	0000270f 	.word	0x0000270f
 8006fdc:	0800a522 	.word	0x0800a522
 8006fe0:	0800a525 	.word	0x0800a525
 8006fe4:	0800a4f1 	.word	0x0800a4f1
 8006fe8:	0800a4f0 	.word	0x0800a4f0
 8006fec:	3ff00000 	.word	0x3ff00000
 8006ff0:	fffffc01 	.word	0xfffffc01
 8006ff4:	3ff80000 	.word	0x3ff80000
 8006ff8:	636f4361 	.word	0x636f4361
 8006ffc:	3fd287a7 	.word	0x3fd287a7
 8007000:	8b60c8b3 	.word	0x8b60c8b3
 8007004:	3fc68a28 	.word	0x3fc68a28
 8007008:	509f79fb 	.word	0x509f79fb
 800700c:	3fd34413 	.word	0x3fd34413
 8007010:	0800a638 	.word	0x0800a638
 8007014:	00000432 	.word	0x00000432
 8007018:	00000412 	.word	0x00000412
 800701c:	fe100000 	.word	0xfe100000
 8007020:	0800a595 	.word	0x0800a595
 8007024:	0800a610 	.word	0x0800a610
 8007028:	9b04      	ldr	r3, [sp, #16]
 800702a:	2402      	movs	r4, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d016      	beq.n	800705e <_dtoa_r+0x3d6>
 8007030:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007032:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007034:	220f      	movs	r2, #15
 8007036:	425d      	negs	r5, r3
 8007038:	402a      	ands	r2, r5
 800703a:	4bd7      	ldr	r3, [pc, #860]	@ (8007398 <_dtoa_r+0x710>)
 800703c:	00d2      	lsls	r2, r2, #3
 800703e:	189b      	adds	r3, r3, r2
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f7fa fce0 	bl	8001a08 <__aeabi_dmul>
 8007048:	2701      	movs	r7, #1
 800704a:	2300      	movs	r3, #0
 800704c:	900a      	str	r0, [sp, #40]	@ 0x28
 800704e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007050:	4ed2      	ldr	r6, [pc, #840]	@ (800739c <_dtoa_r+0x714>)
 8007052:	112d      	asrs	r5, r5, #4
 8007054:	2d00      	cmp	r5, #0
 8007056:	d000      	beq.n	800705a <_dtoa_r+0x3d2>
 8007058:	e0ba      	b.n	80071d0 <_dtoa_r+0x548>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1a1      	bne.n	8006fa2 <_dtoa_r+0x31a>
 800705e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007060:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007062:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007064:	2b00      	cmp	r3, #0
 8007066:	d100      	bne.n	800706a <_dtoa_r+0x3e2>
 8007068:	e0bd      	b.n	80071e6 <_dtoa_r+0x55e>
 800706a:	2200      	movs	r2, #0
 800706c:	0030      	movs	r0, r6
 800706e:	0039      	movs	r1, r7
 8007070:	4bcb      	ldr	r3, [pc, #812]	@ (80073a0 <_dtoa_r+0x718>)
 8007072:	f7f9 f9f1 	bl	8000458 <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d100      	bne.n	800707c <_dtoa_r+0x3f4>
 800707a:	e0b4      	b.n	80071e6 <_dtoa_r+0x55e>
 800707c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d100      	bne.n	8007084 <_dtoa_r+0x3fc>
 8007082:	e0b0      	b.n	80071e6 <_dtoa_r+0x55e>
 8007084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007086:	2b00      	cmp	r3, #0
 8007088:	dd39      	ble.n	80070fe <_dtoa_r+0x476>
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	2200      	movs	r2, #0
 800708e:	3b01      	subs	r3, #1
 8007090:	930c      	str	r3, [sp, #48]	@ 0x30
 8007092:	0030      	movs	r0, r6
 8007094:	4bc3      	ldr	r3, [pc, #780]	@ (80073a4 <_dtoa_r+0x71c>)
 8007096:	0039      	movs	r1, r7
 8007098:	f7fa fcb6 	bl	8001a08 <__aeabi_dmul>
 800709c:	900a      	str	r0, [sp, #40]	@ 0x28
 800709e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a2:	3401      	adds	r4, #1
 80070a4:	0020      	movs	r0, r4
 80070a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80070a8:	f7fb fb70 	bl	800278c <__aeabi_i2d>
 80070ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070b0:	f7fa fcaa 	bl	8001a08 <__aeabi_dmul>
 80070b4:	4bbc      	ldr	r3, [pc, #752]	@ (80073a8 <_dtoa_r+0x720>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	f7f9 fcfe 	bl	8000ab8 <__aeabi_dadd>
 80070bc:	4bbb      	ldr	r3, [pc, #748]	@ (80073ac <_dtoa_r+0x724>)
 80070be:	0006      	movs	r6, r0
 80070c0:	18cf      	adds	r7, r1, r3
 80070c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d000      	beq.n	80070ca <_dtoa_r+0x442>
 80070c8:	e091      	b.n	80071ee <_dtoa_r+0x566>
 80070ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070ce:	2200      	movs	r2, #0
 80070d0:	4bb7      	ldr	r3, [pc, #732]	@ (80073b0 <_dtoa_r+0x728>)
 80070d2:	f7fa ff61 	bl	8001f98 <__aeabi_dsub>
 80070d6:	0032      	movs	r2, r6
 80070d8:	003b      	movs	r3, r7
 80070da:	0004      	movs	r4, r0
 80070dc:	000d      	movs	r5, r1
 80070de:	f7f9 f9cf 	bl	8000480 <__aeabi_dcmpgt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d000      	beq.n	80070e8 <_dtoa_r+0x460>
 80070e6:	e29d      	b.n	8007624 <_dtoa_r+0x99c>
 80070e8:	2180      	movs	r1, #128	@ 0x80
 80070ea:	0609      	lsls	r1, r1, #24
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	0032      	movs	r2, r6
 80070f0:	0020      	movs	r0, r4
 80070f2:	0029      	movs	r1, r5
 80070f4:	f7f9 f9b0 	bl	8000458 <__aeabi_dcmplt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d000      	beq.n	80070fe <_dtoa_r+0x476>
 80070fc:	e130      	b.n	8007360 <_dtoa_r+0x6d8>
 80070fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007100:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007102:	930a      	str	r3, [sp, #40]	@ 0x28
 8007104:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007106:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007108:	2b00      	cmp	r3, #0
 800710a:	da00      	bge.n	800710e <_dtoa_r+0x486>
 800710c:	e177      	b.n	80073fe <_dtoa_r+0x776>
 800710e:	9a04      	ldr	r2, [sp, #16]
 8007110:	2a0e      	cmp	r2, #14
 8007112:	dd00      	ble.n	8007116 <_dtoa_r+0x48e>
 8007114:	e173      	b.n	80073fe <_dtoa_r+0x776>
 8007116:	4ba0      	ldr	r3, [pc, #640]	@ (8007398 <_dtoa_r+0x710>)
 8007118:	00d2      	lsls	r2, r2, #3
 800711a:	189b      	adds	r3, r3, r2
 800711c:	685c      	ldr	r4, [r3, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	9306      	str	r3, [sp, #24]
 8007122:	9407      	str	r4, [sp, #28]
 8007124:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	da03      	bge.n	8007132 <_dtoa_r+0x4aa>
 800712a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc00      	bgt.n	8007132 <_dtoa_r+0x4aa>
 8007130:	e106      	b.n	8007340 <_dtoa_r+0x6b8>
 8007132:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007134:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007138:	9d08      	ldr	r5, [sp, #32]
 800713a:	3b01      	subs	r3, #1
 800713c:	195b      	adds	r3, r3, r5
 800713e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007140:	9a06      	ldr	r2, [sp, #24]
 8007142:	9b07      	ldr	r3, [sp, #28]
 8007144:	0030      	movs	r0, r6
 8007146:	0039      	movs	r1, r7
 8007148:	f7fa f81a 	bl	8001180 <__aeabi_ddiv>
 800714c:	f7fb fae2 	bl	8002714 <__aeabi_d2iz>
 8007150:	9009      	str	r0, [sp, #36]	@ 0x24
 8007152:	f7fb fb1b 	bl	800278c <__aeabi_i2d>
 8007156:	9a06      	ldr	r2, [sp, #24]
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	f7fa fc55 	bl	8001a08 <__aeabi_dmul>
 800715e:	0002      	movs	r2, r0
 8007160:	000b      	movs	r3, r1
 8007162:	0030      	movs	r0, r6
 8007164:	0039      	movs	r1, r7
 8007166:	f7fa ff17 	bl	8001f98 <__aeabi_dsub>
 800716a:	002b      	movs	r3, r5
 800716c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800716e:	3501      	adds	r5, #1
 8007170:	3230      	adds	r2, #48	@ 0x30
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007176:	002c      	movs	r4, r5
 8007178:	429a      	cmp	r2, r3
 800717a:	d000      	beq.n	800717e <_dtoa_r+0x4f6>
 800717c:	e131      	b.n	80073e2 <_dtoa_r+0x75a>
 800717e:	0002      	movs	r2, r0
 8007180:	000b      	movs	r3, r1
 8007182:	f7f9 fc99 	bl	8000ab8 <__aeabi_dadd>
 8007186:	9a06      	ldr	r2, [sp, #24]
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	0006      	movs	r6, r0
 800718c:	000f      	movs	r7, r1
 800718e:	f7f9 f977 	bl	8000480 <__aeabi_dcmpgt>
 8007192:	2800      	cmp	r0, #0
 8007194:	d000      	beq.n	8007198 <_dtoa_r+0x510>
 8007196:	e10f      	b.n	80073b8 <_dtoa_r+0x730>
 8007198:	9a06      	ldr	r2, [sp, #24]
 800719a:	9b07      	ldr	r3, [sp, #28]
 800719c:	0030      	movs	r0, r6
 800719e:	0039      	movs	r1, r7
 80071a0:	f7f9 f954 	bl	800044c <__aeabi_dcmpeq>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d003      	beq.n	80071b0 <_dtoa_r+0x528>
 80071a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071aa:	07dd      	lsls	r5, r3, #31
 80071ac:	d500      	bpl.n	80071b0 <_dtoa_r+0x528>
 80071ae:	e103      	b.n	80073b8 <_dtoa_r+0x730>
 80071b0:	9905      	ldr	r1, [sp, #20]
 80071b2:	9803      	ldr	r0, [sp, #12]
 80071b4:	f000 fca6 	bl	8007b04 <_Bfree>
 80071b8:	2300      	movs	r3, #0
 80071ba:	7023      	strb	r3, [r4, #0]
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071c0:	3301      	adds	r3, #1
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d100      	bne.n	80071cc <_dtoa_r+0x544>
 80071ca:	e5a7      	b.n	8006d1c <_dtoa_r+0x94>
 80071cc:	601c      	str	r4, [r3, #0]
 80071ce:	e5a5      	b.n	8006d1c <_dtoa_r+0x94>
 80071d0:	423d      	tst	r5, r7
 80071d2:	d005      	beq.n	80071e0 <_dtoa_r+0x558>
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	6873      	ldr	r3, [r6, #4]
 80071d8:	f7fa fc16 	bl	8001a08 <__aeabi_dmul>
 80071dc:	003b      	movs	r3, r7
 80071de:	3401      	adds	r4, #1
 80071e0:	106d      	asrs	r5, r5, #1
 80071e2:	3608      	adds	r6, #8
 80071e4:	e736      	b.n	8007054 <_dtoa_r+0x3cc>
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80071ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ec:	e75a      	b.n	80070a4 <_dtoa_r+0x41c>
 80071ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071f0:	4b69      	ldr	r3, [pc, #420]	@ (8007398 <_dtoa_r+0x710>)
 80071f2:	3a01      	subs	r2, #1
 80071f4:	00d2      	lsls	r2, r2, #3
 80071f6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80071f8:	189b      	adds	r3, r3, r2
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2900      	cmp	r1, #0
 8007200:	d04c      	beq.n	800729c <_dtoa_r+0x614>
 8007202:	2000      	movs	r0, #0
 8007204:	496b      	ldr	r1, [pc, #428]	@ (80073b4 <_dtoa_r+0x72c>)
 8007206:	f7f9 ffbb 	bl	8001180 <__aeabi_ddiv>
 800720a:	0032      	movs	r2, r6
 800720c:	003b      	movs	r3, r7
 800720e:	f7fa fec3 	bl	8001f98 <__aeabi_dsub>
 8007212:	9a08      	ldr	r2, [sp, #32]
 8007214:	0006      	movs	r6, r0
 8007216:	4694      	mov	ip, r2
 8007218:	000f      	movs	r7, r1
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	9316      	str	r3, [sp, #88]	@ 0x58
 800721e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007220:	4463      	add	r3, ip
 8007222:	9311      	str	r3, [sp, #68]	@ 0x44
 8007224:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007226:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007228:	f7fb fa74 	bl	8002714 <__aeabi_d2iz>
 800722c:	0005      	movs	r5, r0
 800722e:	f7fb faad 	bl	800278c <__aeabi_i2d>
 8007232:	0002      	movs	r2, r0
 8007234:	000b      	movs	r3, r1
 8007236:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800723a:	f7fa fead 	bl	8001f98 <__aeabi_dsub>
 800723e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007240:	3530      	adds	r5, #48	@ 0x30
 8007242:	1c5c      	adds	r4, r3, #1
 8007244:	701d      	strb	r5, [r3, #0]
 8007246:	0032      	movs	r2, r6
 8007248:	003b      	movs	r3, r7
 800724a:	900a      	str	r0, [sp, #40]	@ 0x28
 800724c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800724e:	f7f9 f903 	bl	8000458 <__aeabi_dcmplt>
 8007252:	2800      	cmp	r0, #0
 8007254:	d16a      	bne.n	800732c <_dtoa_r+0x6a4>
 8007256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800725a:	2000      	movs	r0, #0
 800725c:	4950      	ldr	r1, [pc, #320]	@ (80073a0 <_dtoa_r+0x718>)
 800725e:	f7fa fe9b 	bl	8001f98 <__aeabi_dsub>
 8007262:	0032      	movs	r2, r6
 8007264:	003b      	movs	r3, r7
 8007266:	f7f9 f8f7 	bl	8000458 <__aeabi_dcmplt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d000      	beq.n	8007270 <_dtoa_r+0x5e8>
 800726e:	e0a5      	b.n	80073bc <_dtoa_r+0x734>
 8007270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007272:	42a3      	cmp	r3, r4
 8007274:	d100      	bne.n	8007278 <_dtoa_r+0x5f0>
 8007276:	e742      	b.n	80070fe <_dtoa_r+0x476>
 8007278:	2200      	movs	r2, #0
 800727a:	0030      	movs	r0, r6
 800727c:	0039      	movs	r1, r7
 800727e:	4b49      	ldr	r3, [pc, #292]	@ (80073a4 <_dtoa_r+0x71c>)
 8007280:	f7fa fbc2 	bl	8001a08 <__aeabi_dmul>
 8007284:	2200      	movs	r2, #0
 8007286:	0006      	movs	r6, r0
 8007288:	000f      	movs	r7, r1
 800728a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800728c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800728e:	4b45      	ldr	r3, [pc, #276]	@ (80073a4 <_dtoa_r+0x71c>)
 8007290:	f7fa fbba 	bl	8001a08 <__aeabi_dmul>
 8007294:	9416      	str	r4, [sp, #88]	@ 0x58
 8007296:	900a      	str	r0, [sp, #40]	@ 0x28
 8007298:	910b      	str	r1, [sp, #44]	@ 0x2c
 800729a:	e7c3      	b.n	8007224 <_dtoa_r+0x59c>
 800729c:	0030      	movs	r0, r6
 800729e:	0039      	movs	r1, r7
 80072a0:	f7fa fbb2 	bl	8001a08 <__aeabi_dmul>
 80072a4:	9d08      	ldr	r5, [sp, #32]
 80072a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80072a8:	002b      	movs	r3, r5
 80072aa:	4694      	mov	ip, r2
 80072ac:	9016      	str	r0, [sp, #88]	@ 0x58
 80072ae:	9117      	str	r1, [sp, #92]	@ 0x5c
 80072b0:	4463      	add	r3, ip
 80072b2:	9319      	str	r3, [sp, #100]	@ 0x64
 80072b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b8:	f7fb fa2c 	bl	8002714 <__aeabi_d2iz>
 80072bc:	0004      	movs	r4, r0
 80072be:	f7fb fa65 	bl	800278c <__aeabi_i2d>
 80072c2:	000b      	movs	r3, r1
 80072c4:	0002      	movs	r2, r0
 80072c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ca:	f7fa fe65 	bl	8001f98 <__aeabi_dsub>
 80072ce:	3430      	adds	r4, #48	@ 0x30
 80072d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072d2:	702c      	strb	r4, [r5, #0]
 80072d4:	3501      	adds	r5, #1
 80072d6:	0006      	movs	r6, r0
 80072d8:	000f      	movs	r7, r1
 80072da:	42ab      	cmp	r3, r5
 80072dc:	d129      	bne.n	8007332 <_dtoa_r+0x6aa>
 80072de:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80072e0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80072e6:	469c      	mov	ip, r3
 80072e8:	2200      	movs	r2, #0
 80072ea:	4b32      	ldr	r3, [pc, #200]	@ (80073b4 <_dtoa_r+0x72c>)
 80072ec:	4464      	add	r4, ip
 80072ee:	f7f9 fbe3 	bl	8000ab8 <__aeabi_dadd>
 80072f2:	0002      	movs	r2, r0
 80072f4:	000b      	movs	r3, r1
 80072f6:	0030      	movs	r0, r6
 80072f8:	0039      	movs	r1, r7
 80072fa:	f7f9 f8c1 	bl	8000480 <__aeabi_dcmpgt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d15c      	bne.n	80073bc <_dtoa_r+0x734>
 8007302:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007304:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007306:	2000      	movs	r0, #0
 8007308:	492a      	ldr	r1, [pc, #168]	@ (80073b4 <_dtoa_r+0x72c>)
 800730a:	f7fa fe45 	bl	8001f98 <__aeabi_dsub>
 800730e:	0002      	movs	r2, r0
 8007310:	000b      	movs	r3, r1
 8007312:	0030      	movs	r0, r6
 8007314:	0039      	movs	r1, r7
 8007316:	f7f9 f89f 	bl	8000458 <__aeabi_dcmplt>
 800731a:	2800      	cmp	r0, #0
 800731c:	d100      	bne.n	8007320 <_dtoa_r+0x698>
 800731e:	e6ee      	b.n	80070fe <_dtoa_r+0x476>
 8007320:	0023      	movs	r3, r4
 8007322:	3c01      	subs	r4, #1
 8007324:	7822      	ldrb	r2, [r4, #0]
 8007326:	2a30      	cmp	r2, #48	@ 0x30
 8007328:	d0fa      	beq.n	8007320 <_dtoa_r+0x698>
 800732a:	001c      	movs	r4, r3
 800732c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	e73e      	b.n	80071b0 <_dtoa_r+0x528>
 8007332:	2200      	movs	r2, #0
 8007334:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <_dtoa_r+0x71c>)
 8007336:	f7fa fb67 	bl	8001a08 <__aeabi_dmul>
 800733a:	900a      	str	r0, [sp, #40]	@ 0x28
 800733c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800733e:	e7b9      	b.n	80072b4 <_dtoa_r+0x62c>
 8007340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10c      	bne.n	8007360 <_dtoa_r+0x6d8>
 8007346:	9806      	ldr	r0, [sp, #24]
 8007348:	9907      	ldr	r1, [sp, #28]
 800734a:	2200      	movs	r2, #0
 800734c:	4b18      	ldr	r3, [pc, #96]	@ (80073b0 <_dtoa_r+0x728>)
 800734e:	f7fa fb5b 	bl	8001a08 <__aeabi_dmul>
 8007352:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007356:	f7f9 f89d 	bl	8000494 <__aeabi_dcmpge>
 800735a:	2800      	cmp	r0, #0
 800735c:	d100      	bne.n	8007360 <_dtoa_r+0x6d8>
 800735e:	e164      	b.n	800762a <_dtoa_r+0x9a2>
 8007360:	2600      	movs	r6, #0
 8007362:	0037      	movs	r7, r6
 8007364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007366:	9c08      	ldr	r4, [sp, #32]
 8007368:	43db      	mvns	r3, r3
 800736a:	930c      	str	r3, [sp, #48]	@ 0x30
 800736c:	2300      	movs	r3, #0
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	0031      	movs	r1, r6
 8007372:	9803      	ldr	r0, [sp, #12]
 8007374:	f000 fbc6 	bl	8007b04 <_Bfree>
 8007378:	2f00      	cmp	r7, #0
 800737a:	d0d7      	beq.n	800732c <_dtoa_r+0x6a4>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <_dtoa_r+0x706>
 8007382:	42bb      	cmp	r3, r7
 8007384:	d003      	beq.n	800738e <_dtoa_r+0x706>
 8007386:	0019      	movs	r1, r3
 8007388:	9803      	ldr	r0, [sp, #12]
 800738a:	f000 fbbb 	bl	8007b04 <_Bfree>
 800738e:	0039      	movs	r1, r7
 8007390:	9803      	ldr	r0, [sp, #12]
 8007392:	f000 fbb7 	bl	8007b04 <_Bfree>
 8007396:	e7c9      	b.n	800732c <_dtoa_r+0x6a4>
 8007398:	0800a638 	.word	0x0800a638
 800739c:	0800a610 	.word	0x0800a610
 80073a0:	3ff00000 	.word	0x3ff00000
 80073a4:	40240000 	.word	0x40240000
 80073a8:	401c0000 	.word	0x401c0000
 80073ac:	fcc00000 	.word	0xfcc00000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80073bc:	0023      	movs	r3, r4
 80073be:	001c      	movs	r4, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	2a39      	cmp	r2, #57	@ 0x39
 80073c6:	d108      	bne.n	80073da <_dtoa_r+0x752>
 80073c8:	9a08      	ldr	r2, [sp, #32]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d1f7      	bne.n	80073be <_dtoa_r+0x736>
 80073ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073d0:	9908      	ldr	r1, [sp, #32]
 80073d2:	3201      	adds	r2, #1
 80073d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80073d6:	2230      	movs	r2, #48	@ 0x30
 80073d8:	700a      	strb	r2, [r1, #0]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	3201      	adds	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e7a4      	b.n	800732c <_dtoa_r+0x6a4>
 80073e2:	2200      	movs	r2, #0
 80073e4:	4bc6      	ldr	r3, [pc, #792]	@ (8007700 <_dtoa_r+0xa78>)
 80073e6:	f7fa fb0f 	bl	8001a08 <__aeabi_dmul>
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	0006      	movs	r6, r0
 80073f0:	000f      	movs	r7, r1
 80073f2:	f7f9 f82b 	bl	800044c <__aeabi_dcmpeq>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d100      	bne.n	80073fc <_dtoa_r+0x774>
 80073fa:	e6a1      	b.n	8007140 <_dtoa_r+0x4b8>
 80073fc:	e6d8      	b.n	80071b0 <_dtoa_r+0x528>
 80073fe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007400:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007402:	9c06      	ldr	r4, [sp, #24]
 8007404:	2f00      	cmp	r7, #0
 8007406:	d014      	beq.n	8007432 <_dtoa_r+0x7aa>
 8007408:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800740a:	2a01      	cmp	r2, #1
 800740c:	dd00      	ble.n	8007410 <_dtoa_r+0x788>
 800740e:	e0c8      	b.n	80075a2 <_dtoa_r+0x91a>
 8007410:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007412:	2a00      	cmp	r2, #0
 8007414:	d100      	bne.n	8007418 <_dtoa_r+0x790>
 8007416:	e0be      	b.n	8007596 <_dtoa_r+0x90e>
 8007418:	4aba      	ldr	r2, [pc, #744]	@ (8007704 <_dtoa_r+0xa7c>)
 800741a:	189b      	adds	r3, r3, r2
 800741c:	9a06      	ldr	r2, [sp, #24]
 800741e:	2101      	movs	r1, #1
 8007420:	18d2      	adds	r2, r2, r3
 8007422:	9206      	str	r2, [sp, #24]
 8007424:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007426:	9803      	ldr	r0, [sp, #12]
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	930d      	str	r3, [sp, #52]	@ 0x34
 800742c:	f000 fc6e 	bl	8007d0c <__i2b>
 8007430:	0007      	movs	r7, r0
 8007432:	2c00      	cmp	r4, #0
 8007434:	d00e      	beq.n	8007454 <_dtoa_r+0x7cc>
 8007436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	dd0b      	ble.n	8007454 <_dtoa_r+0x7cc>
 800743c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800743e:	0023      	movs	r3, r4
 8007440:	4294      	cmp	r4, r2
 8007442:	dd00      	ble.n	8007446 <_dtoa_r+0x7be>
 8007444:	0013      	movs	r3, r2
 8007446:	9a06      	ldr	r2, [sp, #24]
 8007448:	1ae4      	subs	r4, r4, r3
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	9206      	str	r2, [sp, #24]
 800744e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	930d      	str	r3, [sp, #52]	@ 0x34
 8007454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01f      	beq.n	800749a <_dtoa_r+0x812>
 800745a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d100      	bne.n	8007462 <_dtoa_r+0x7da>
 8007460:	e0b5      	b.n	80075ce <_dtoa_r+0x946>
 8007462:	2d00      	cmp	r5, #0
 8007464:	d010      	beq.n	8007488 <_dtoa_r+0x800>
 8007466:	0039      	movs	r1, r7
 8007468:	002a      	movs	r2, r5
 800746a:	9803      	ldr	r0, [sp, #12]
 800746c:	f000 fd18 	bl	8007ea0 <__pow5mult>
 8007470:	9a05      	ldr	r2, [sp, #20]
 8007472:	0001      	movs	r1, r0
 8007474:	0007      	movs	r7, r0
 8007476:	9803      	ldr	r0, [sp, #12]
 8007478:	f000 fc60 	bl	8007d3c <__multiply>
 800747c:	0006      	movs	r6, r0
 800747e:	9905      	ldr	r1, [sp, #20]
 8007480:	9803      	ldr	r0, [sp, #12]
 8007482:	f000 fb3f 	bl	8007b04 <_Bfree>
 8007486:	9605      	str	r6, [sp, #20]
 8007488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800748a:	1b5a      	subs	r2, r3, r5
 800748c:	42ab      	cmp	r3, r5
 800748e:	d004      	beq.n	800749a <_dtoa_r+0x812>
 8007490:	9905      	ldr	r1, [sp, #20]
 8007492:	9803      	ldr	r0, [sp, #12]
 8007494:	f000 fd04 	bl	8007ea0 <__pow5mult>
 8007498:	9005      	str	r0, [sp, #20]
 800749a:	2101      	movs	r1, #1
 800749c:	9803      	ldr	r0, [sp, #12]
 800749e:	f000 fc35 	bl	8007d0c <__i2b>
 80074a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074a4:	0006      	movs	r6, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d100      	bne.n	80074ac <_dtoa_r+0x824>
 80074aa:	e1bc      	b.n	8007826 <_dtoa_r+0xb9e>
 80074ac:	001a      	movs	r2, r3
 80074ae:	0001      	movs	r1, r0
 80074b0:	9803      	ldr	r0, [sp, #12]
 80074b2:	f000 fcf5 	bl	8007ea0 <__pow5mult>
 80074b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074b8:	0006      	movs	r6, r0
 80074ba:	2500      	movs	r5, #0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	dc16      	bgt.n	80074ee <_dtoa_r+0x866>
 80074c0:	2500      	movs	r5, #0
 80074c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	d10e      	bne.n	80074e6 <_dtoa_r+0x85e>
 80074c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ca:	031b      	lsls	r3, r3, #12
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	d10a      	bne.n	80074e6 <_dtoa_r+0x85e>
 80074d0:	4b8d      	ldr	r3, [pc, #564]	@ (8007708 <_dtoa_r+0xa80>)
 80074d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074d4:	4213      	tst	r3, r2
 80074d6:	d006      	beq.n	80074e6 <_dtoa_r+0x85e>
 80074d8:	9b06      	ldr	r3, [sp, #24]
 80074da:	3501      	adds	r5, #1
 80074dc:	3301      	adds	r3, #1
 80074de:	9306      	str	r3, [sp, #24]
 80074e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e2:	3301      	adds	r3, #1
 80074e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80074e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074e8:	2001      	movs	r0, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d008      	beq.n	8007500 <_dtoa_r+0x878>
 80074ee:	6933      	ldr	r3, [r6, #16]
 80074f0:	3303      	adds	r3, #3
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	18f3      	adds	r3, r6, r3
 80074f6:	6858      	ldr	r0, [r3, #4]
 80074f8:	f000 fbb8 	bl	8007c6c <__hi0bits>
 80074fc:	2320      	movs	r3, #32
 80074fe:	1a18      	subs	r0, r3, r0
 8007500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007502:	1818      	adds	r0, r3, r0
 8007504:	0002      	movs	r2, r0
 8007506:	231f      	movs	r3, #31
 8007508:	401a      	ands	r2, r3
 800750a:	4218      	tst	r0, r3
 800750c:	d065      	beq.n	80075da <_dtoa_r+0x952>
 800750e:	3301      	adds	r3, #1
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	2b04      	cmp	r3, #4
 8007514:	dd5d      	ble.n	80075d2 <_dtoa_r+0x94a>
 8007516:	231c      	movs	r3, #28
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	9a06      	ldr	r2, [sp, #24]
 800751c:	18e4      	adds	r4, r4, r3
 800751e:	18d2      	adds	r2, r2, r3
 8007520:	9206      	str	r2, [sp, #24]
 8007522:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	930d      	str	r3, [sp, #52]	@ 0x34
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	dd05      	ble.n	800753a <_dtoa_r+0x8b2>
 800752e:	001a      	movs	r2, r3
 8007530:	9905      	ldr	r1, [sp, #20]
 8007532:	9803      	ldr	r0, [sp, #12]
 8007534:	f000 fd10 	bl	8007f58 <__lshift>
 8007538:	9005      	str	r0, [sp, #20]
 800753a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd05      	ble.n	800754c <_dtoa_r+0x8c4>
 8007540:	0031      	movs	r1, r6
 8007542:	001a      	movs	r2, r3
 8007544:	9803      	ldr	r0, [sp, #12]
 8007546:	f000 fd07 	bl	8007f58 <__lshift>
 800754a:	0006      	movs	r6, r0
 800754c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	d045      	beq.n	80075de <_dtoa_r+0x956>
 8007552:	0031      	movs	r1, r6
 8007554:	9805      	ldr	r0, [sp, #20]
 8007556:	f000 fd6b 	bl	8008030 <__mcmp>
 800755a:	2800      	cmp	r0, #0
 800755c:	da3f      	bge.n	80075de <_dtoa_r+0x956>
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	220a      	movs	r2, #10
 8007562:	3b01      	subs	r3, #1
 8007564:	930c      	str	r3, [sp, #48]	@ 0x30
 8007566:	9905      	ldr	r1, [sp, #20]
 8007568:	2300      	movs	r3, #0
 800756a:	9803      	ldr	r0, [sp, #12]
 800756c:	f000 faee 	bl	8007b4c <__multadd>
 8007570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007572:	9005      	str	r0, [sp, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d100      	bne.n	800757a <_dtoa_r+0x8f2>
 8007578:	e15c      	b.n	8007834 <_dtoa_r+0xbac>
 800757a:	2300      	movs	r3, #0
 800757c:	0039      	movs	r1, r7
 800757e:	220a      	movs	r2, #10
 8007580:	9803      	ldr	r0, [sp, #12]
 8007582:	f000 fae3 	bl	8007b4c <__multadd>
 8007586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007588:	0007      	movs	r7, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	dc55      	bgt.n	800763a <_dtoa_r+0x9b2>
 800758e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007590:	2b02      	cmp	r3, #2
 8007592:	dc2d      	bgt.n	80075f0 <_dtoa_r+0x968>
 8007594:	e051      	b.n	800763a <_dtoa_r+0x9b2>
 8007596:	2336      	movs	r3, #54	@ 0x36
 8007598:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800759a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800759c:	9c06      	ldr	r4, [sp, #24]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	e73c      	b.n	800741c <_dtoa_r+0x794>
 80075a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a4:	1e5d      	subs	r5, r3, #1
 80075a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	db08      	blt.n	80075be <_dtoa_r+0x936>
 80075ac:	1b5d      	subs	r5, r3, r5
 80075ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b0:	9c06      	ldr	r4, [sp, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	db00      	blt.n	80075b8 <_dtoa_r+0x930>
 80075b6:	e731      	b.n	800741c <_dtoa_r+0x794>
 80075b8:	1ae4      	subs	r4, r4, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	e72e      	b.n	800741c <_dtoa_r+0x794>
 80075be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075c2:	1aeb      	subs	r3, r5, r3
 80075c4:	18d3      	adds	r3, r2, r3
 80075c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80075c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80075ca:	2500      	movs	r5, #0
 80075cc:	e7ef      	b.n	80075ae <_dtoa_r+0x926>
 80075ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80075d0:	e75e      	b.n	8007490 <_dtoa_r+0x808>
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d0a8      	beq.n	8007528 <_dtoa_r+0x8a0>
 80075d6:	331c      	adds	r3, #28
 80075d8:	e79f      	b.n	800751a <_dtoa_r+0x892>
 80075da:	0013      	movs	r3, r2
 80075dc:	e7fb      	b.n	80075d6 <_dtoa_r+0x94e>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80075e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dc23      	bgt.n	8007632 <_dtoa_r+0x9aa>
 80075ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	dd20      	ble.n	8007632 <_dtoa_r+0x9aa>
 80075f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d000      	beq.n	80075f8 <_dtoa_r+0x970>
 80075f6:	e6b5      	b.n	8007364 <_dtoa_r+0x6dc>
 80075f8:	0031      	movs	r1, r6
 80075fa:	2205      	movs	r2, #5
 80075fc:	9803      	ldr	r0, [sp, #12]
 80075fe:	f000 faa5 	bl	8007b4c <__multadd>
 8007602:	0006      	movs	r6, r0
 8007604:	0001      	movs	r1, r0
 8007606:	9805      	ldr	r0, [sp, #20]
 8007608:	f000 fd12 	bl	8008030 <__mcmp>
 800760c:	2800      	cmp	r0, #0
 800760e:	dc00      	bgt.n	8007612 <_dtoa_r+0x98a>
 8007610:	e6a8      	b.n	8007364 <_dtoa_r+0x6dc>
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	9a08      	ldr	r2, [sp, #32]
 8007616:	1c5c      	adds	r4, r3, #1
 8007618:	2331      	movs	r3, #49	@ 0x31
 800761a:	7013      	strb	r3, [r2, #0]
 800761c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800761e:	3301      	adds	r3, #1
 8007620:	930c      	str	r3, [sp, #48]	@ 0x30
 8007622:	e6a3      	b.n	800736c <_dtoa_r+0x6e4>
 8007624:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007626:	0037      	movs	r7, r6
 8007628:	e7f3      	b.n	8007612 <_dtoa_r+0x98a>
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800762e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007630:	e7f9      	b.n	8007626 <_dtoa_r+0x99e>
 8007632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d100      	bne.n	800763a <_dtoa_r+0x9b2>
 8007638:	e100      	b.n	800783c <_dtoa_r+0xbb4>
 800763a:	2c00      	cmp	r4, #0
 800763c:	dd05      	ble.n	800764a <_dtoa_r+0x9c2>
 800763e:	0039      	movs	r1, r7
 8007640:	0022      	movs	r2, r4
 8007642:	9803      	ldr	r0, [sp, #12]
 8007644:	f000 fc88 	bl	8007f58 <__lshift>
 8007648:	0007      	movs	r7, r0
 800764a:	0038      	movs	r0, r7
 800764c:	2d00      	cmp	r5, #0
 800764e:	d018      	beq.n	8007682 <_dtoa_r+0x9fa>
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	9803      	ldr	r0, [sp, #12]
 8007654:	f000 fa12 	bl	8007a7c <_Balloc>
 8007658:	1e04      	subs	r4, r0, #0
 800765a:	d105      	bne.n	8007668 <_dtoa_r+0x9e0>
 800765c:	0022      	movs	r2, r4
 800765e:	4b2b      	ldr	r3, [pc, #172]	@ (800770c <_dtoa_r+0xa84>)
 8007660:	482b      	ldr	r0, [pc, #172]	@ (8007710 <_dtoa_r+0xa88>)
 8007662:	492c      	ldr	r1, [pc, #176]	@ (8007714 <_dtoa_r+0xa8c>)
 8007664:	f7ff fb25 	bl	8006cb2 <_dtoa_r+0x2a>
 8007668:	0039      	movs	r1, r7
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	310c      	adds	r1, #12
 800766e:	3202      	adds	r2, #2
 8007670:	0092      	lsls	r2, r2, #2
 8007672:	300c      	adds	r0, #12
 8007674:	f001 ffb2 	bl	80095dc <memcpy>
 8007678:	2201      	movs	r2, #1
 800767a:	0021      	movs	r1, r4
 800767c:	9803      	ldr	r0, [sp, #12]
 800767e:	f000 fc6b 	bl	8007f58 <__lshift>
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007686:	9306      	str	r3, [sp, #24]
 8007688:	3b01      	subs	r3, #1
 800768a:	189b      	adds	r3, r3, r2
 800768c:	2201      	movs	r2, #1
 800768e:	9704      	str	r7, [sp, #16]
 8007690:	0007      	movs	r7, r0
 8007692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007696:	4013      	ands	r3, r2
 8007698:	930e      	str	r3, [sp, #56]	@ 0x38
 800769a:	0031      	movs	r1, r6
 800769c:	9805      	ldr	r0, [sp, #20]
 800769e:	f7ff fa65 	bl	8006b6c <quorem>
 80076a2:	9904      	ldr	r1, [sp, #16]
 80076a4:	0005      	movs	r5, r0
 80076a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80076a8:	9805      	ldr	r0, [sp, #20]
 80076aa:	f000 fcc1 	bl	8008030 <__mcmp>
 80076ae:	003a      	movs	r2, r7
 80076b0:	900d      	str	r0, [sp, #52]	@ 0x34
 80076b2:	0031      	movs	r1, r6
 80076b4:	9803      	ldr	r0, [sp, #12]
 80076b6:	f000 fcd7 	bl	8008068 <__mdiff>
 80076ba:	2201      	movs	r2, #1
 80076bc:	68c3      	ldr	r3, [r0, #12]
 80076be:	0004      	movs	r4, r0
 80076c0:	3530      	adds	r5, #48	@ 0x30
 80076c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <_dtoa_r+0xa4a>
 80076c8:	0001      	movs	r1, r0
 80076ca:	9805      	ldr	r0, [sp, #20]
 80076cc:	f000 fcb0 	bl	8008030 <__mcmp>
 80076d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80076d2:	0021      	movs	r1, r4
 80076d4:	9803      	ldr	r0, [sp, #12]
 80076d6:	f000 fa15 	bl	8007b04 <_Bfree>
 80076da:	9b06      	ldr	r3, [sp, #24]
 80076dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076de:	1c5c      	adds	r4, r3, #1
 80076e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80076e2:	4313      	orrs	r3, r2
 80076e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076e6:	4313      	orrs	r3, r2
 80076e8:	d116      	bne.n	8007718 <_dtoa_r+0xa90>
 80076ea:	2d39      	cmp	r5, #57	@ 0x39
 80076ec:	d02f      	beq.n	800774e <_dtoa_r+0xac6>
 80076ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dd01      	ble.n	80076f8 <_dtoa_r+0xa70>
 80076f4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80076f6:	3531      	adds	r5, #49	@ 0x31
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	701d      	strb	r5, [r3, #0]
 80076fc:	e638      	b.n	8007370 <_dtoa_r+0x6e8>
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	40240000 	.word	0x40240000
 8007704:	00000433 	.word	0x00000433
 8007708:	7ff00000 	.word	0x7ff00000
 800770c:	0800a595 	.word	0x0800a595
 8007710:	0800a53d 	.word	0x0800a53d
 8007714:	000002ef 	.word	0x000002ef
 8007718:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800771a:	2b00      	cmp	r3, #0
 800771c:	db04      	blt.n	8007728 <_dtoa_r+0xaa0>
 800771e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007720:	4313      	orrs	r3, r2
 8007722:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007724:	4313      	orrs	r3, r2
 8007726:	d11e      	bne.n	8007766 <_dtoa_r+0xade>
 8007728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	dde4      	ble.n	80076f8 <_dtoa_r+0xa70>
 800772e:	9905      	ldr	r1, [sp, #20]
 8007730:	2201      	movs	r2, #1
 8007732:	9803      	ldr	r0, [sp, #12]
 8007734:	f000 fc10 	bl	8007f58 <__lshift>
 8007738:	0031      	movs	r1, r6
 800773a:	9005      	str	r0, [sp, #20]
 800773c:	f000 fc78 	bl	8008030 <__mcmp>
 8007740:	2800      	cmp	r0, #0
 8007742:	dc02      	bgt.n	800774a <_dtoa_r+0xac2>
 8007744:	d1d8      	bne.n	80076f8 <_dtoa_r+0xa70>
 8007746:	07eb      	lsls	r3, r5, #31
 8007748:	d5d6      	bpl.n	80076f8 <_dtoa_r+0xa70>
 800774a:	2d39      	cmp	r5, #57	@ 0x39
 800774c:	d1d2      	bne.n	80076f4 <_dtoa_r+0xa6c>
 800774e:	2339      	movs	r3, #57	@ 0x39
 8007750:	9a06      	ldr	r2, [sp, #24]
 8007752:	7013      	strb	r3, [r2, #0]
 8007754:	0023      	movs	r3, r4
 8007756:	001c      	movs	r4, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	2a39      	cmp	r2, #57	@ 0x39
 800775e:	d04f      	beq.n	8007800 <_dtoa_r+0xb78>
 8007760:	3201      	adds	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e604      	b.n	8007370 <_dtoa_r+0x6e8>
 8007766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	dd03      	ble.n	8007774 <_dtoa_r+0xaec>
 800776c:	2d39      	cmp	r5, #57	@ 0x39
 800776e:	d0ee      	beq.n	800774e <_dtoa_r+0xac6>
 8007770:	3501      	adds	r5, #1
 8007772:	e7c1      	b.n	80076f8 <_dtoa_r+0xa70>
 8007774:	9b06      	ldr	r3, [sp, #24]
 8007776:	9a06      	ldr	r2, [sp, #24]
 8007778:	701d      	strb	r5, [r3, #0]
 800777a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777c:	4293      	cmp	r3, r2
 800777e:	d02a      	beq.n	80077d6 <_dtoa_r+0xb4e>
 8007780:	2300      	movs	r3, #0
 8007782:	220a      	movs	r2, #10
 8007784:	9905      	ldr	r1, [sp, #20]
 8007786:	9803      	ldr	r0, [sp, #12]
 8007788:	f000 f9e0 	bl	8007b4c <__multadd>
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	9005      	str	r0, [sp, #20]
 8007790:	42bb      	cmp	r3, r7
 8007792:	d109      	bne.n	80077a8 <_dtoa_r+0xb20>
 8007794:	2300      	movs	r3, #0
 8007796:	220a      	movs	r2, #10
 8007798:	9904      	ldr	r1, [sp, #16]
 800779a:	9803      	ldr	r0, [sp, #12]
 800779c:	f000 f9d6 	bl	8007b4c <__multadd>
 80077a0:	9004      	str	r0, [sp, #16]
 80077a2:	0007      	movs	r7, r0
 80077a4:	9406      	str	r4, [sp, #24]
 80077a6:	e778      	b.n	800769a <_dtoa_r+0xa12>
 80077a8:	9904      	ldr	r1, [sp, #16]
 80077aa:	2300      	movs	r3, #0
 80077ac:	220a      	movs	r2, #10
 80077ae:	9803      	ldr	r0, [sp, #12]
 80077b0:	f000 f9cc 	bl	8007b4c <__multadd>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9004      	str	r0, [sp, #16]
 80077b8:	220a      	movs	r2, #10
 80077ba:	0039      	movs	r1, r7
 80077bc:	9803      	ldr	r0, [sp, #12]
 80077be:	f000 f9c5 	bl	8007b4c <__multadd>
 80077c2:	e7ee      	b.n	80077a2 <_dtoa_r+0xb1a>
 80077c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077c6:	2401      	movs	r4, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dd00      	ble.n	80077ce <_dtoa_r+0xb46>
 80077cc:	001c      	movs	r4, r3
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	191c      	adds	r4, r3, r4
 80077d2:	2300      	movs	r3, #0
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	9905      	ldr	r1, [sp, #20]
 80077d8:	2201      	movs	r2, #1
 80077da:	9803      	ldr	r0, [sp, #12]
 80077dc:	f000 fbbc 	bl	8007f58 <__lshift>
 80077e0:	0031      	movs	r1, r6
 80077e2:	9005      	str	r0, [sp, #20]
 80077e4:	f000 fc24 	bl	8008030 <__mcmp>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	dcb3      	bgt.n	8007754 <_dtoa_r+0xacc>
 80077ec:	d101      	bne.n	80077f2 <_dtoa_r+0xb6a>
 80077ee:	07ed      	lsls	r5, r5, #31
 80077f0:	d4b0      	bmi.n	8007754 <_dtoa_r+0xacc>
 80077f2:	0023      	movs	r3, r4
 80077f4:	001c      	movs	r4, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	2a30      	cmp	r2, #48	@ 0x30
 80077fc:	d0fa      	beq.n	80077f4 <_dtoa_r+0xb6c>
 80077fe:	e5b7      	b.n	8007370 <_dtoa_r+0x6e8>
 8007800:	9a08      	ldr	r2, [sp, #32]
 8007802:	429a      	cmp	r2, r3
 8007804:	d1a7      	bne.n	8007756 <_dtoa_r+0xace>
 8007806:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007808:	3301      	adds	r3, #1
 800780a:	930c      	str	r3, [sp, #48]	@ 0x30
 800780c:	2331      	movs	r3, #49	@ 0x31
 800780e:	7013      	strb	r3, [r2, #0]
 8007810:	e5ae      	b.n	8007370 <_dtoa_r+0x6e8>
 8007812:	4b15      	ldr	r3, [pc, #84]	@ (8007868 <_dtoa_r+0xbe0>)
 8007814:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007816:	9308      	str	r3, [sp, #32]
 8007818:	4b14      	ldr	r3, [pc, #80]	@ (800786c <_dtoa_r+0xbe4>)
 800781a:	2a00      	cmp	r2, #0
 800781c:	d001      	beq.n	8007822 <_dtoa_r+0xb9a>
 800781e:	f7ff fa7b 	bl	8006d18 <_dtoa_r+0x90>
 8007822:	f7ff fa7b 	bl	8006d1c <_dtoa_r+0x94>
 8007826:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007828:	2b01      	cmp	r3, #1
 800782a:	dc00      	bgt.n	800782e <_dtoa_r+0xba6>
 800782c:	e648      	b.n	80074c0 <_dtoa_r+0x838>
 800782e:	2001      	movs	r0, #1
 8007830:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007832:	e665      	b.n	8007500 <_dtoa_r+0x878>
 8007834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007836:	2b00      	cmp	r3, #0
 8007838:	dc00      	bgt.n	800783c <_dtoa_r+0xbb4>
 800783a:	e6d6      	b.n	80075ea <_dtoa_r+0x962>
 800783c:	2400      	movs	r4, #0
 800783e:	0031      	movs	r1, r6
 8007840:	9805      	ldr	r0, [sp, #20]
 8007842:	f7ff f993 	bl	8006b6c <quorem>
 8007846:	9b08      	ldr	r3, [sp, #32]
 8007848:	3030      	adds	r0, #48	@ 0x30
 800784a:	5518      	strb	r0, [r3, r4]
 800784c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800784e:	3401      	adds	r4, #1
 8007850:	0005      	movs	r5, r0
 8007852:	429c      	cmp	r4, r3
 8007854:	dab6      	bge.n	80077c4 <_dtoa_r+0xb3c>
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	9905      	ldr	r1, [sp, #20]
 800785c:	9803      	ldr	r0, [sp, #12]
 800785e:	f000 f975 	bl	8007b4c <__multadd>
 8007862:	9005      	str	r0, [sp, #20]
 8007864:	e7eb      	b.n	800783e <_dtoa_r+0xbb6>
 8007866:	46c0      	nop			@ (mov r8, r8)
 8007868:	0800a519 	.word	0x0800a519
 800786c:	0800a521 	.word	0x0800a521

08007870 <_free_r>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	0005      	movs	r5, r0
 8007874:	1e0c      	subs	r4, r1, #0
 8007876:	d010      	beq.n	800789a <_free_r+0x2a>
 8007878:	3c04      	subs	r4, #4
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da00      	bge.n	8007882 <_free_r+0x12>
 8007880:	18e4      	adds	r4, r4, r3
 8007882:	0028      	movs	r0, r5
 8007884:	f000 f8ea 	bl	8007a5c <__malloc_lock>
 8007888:	4a1d      	ldr	r2, [pc, #116]	@ (8007900 <_free_r+0x90>)
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <_free_r+0x2c>
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	6014      	str	r4, [r2, #0]
 8007894:	0028      	movs	r0, r5
 8007896:	f000 f8e9 	bl	8007a6c <__malloc_unlock>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	42a3      	cmp	r3, r4
 800789e:	d908      	bls.n	80078b2 <_free_r+0x42>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	1821      	adds	r1, r4, r0
 80078a4:	428b      	cmp	r3, r1
 80078a6:	d1f3      	bne.n	8007890 <_free_r+0x20>
 80078a8:	6819      	ldr	r1, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	1809      	adds	r1, r1, r0
 80078ae:	6021      	str	r1, [r4, #0]
 80078b0:	e7ee      	b.n	8007890 <_free_r+0x20>
 80078b2:	001a      	movs	r2, r3
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <_free_r+0x4e>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	d9f9      	bls.n	80078b2 <_free_r+0x42>
 80078be:	6811      	ldr	r1, [r2, #0]
 80078c0:	1850      	adds	r0, r2, r1
 80078c2:	42a0      	cmp	r0, r4
 80078c4:	d10b      	bne.n	80078de <_free_r+0x6e>
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1809      	adds	r1, r1, r0
 80078ca:	1850      	adds	r0, r2, r1
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	4283      	cmp	r3, r0
 80078d0:	d1e0      	bne.n	8007894 <_free_r+0x24>
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	1841      	adds	r1, r0, r1
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	6053      	str	r3, [r2, #4]
 80078dc:	e7da      	b.n	8007894 <_free_r+0x24>
 80078de:	42a0      	cmp	r0, r4
 80078e0:	d902      	bls.n	80078e8 <_free_r+0x78>
 80078e2:	230c      	movs	r3, #12
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	e7d5      	b.n	8007894 <_free_r+0x24>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	1821      	adds	r1, r4, r0
 80078ec:	428b      	cmp	r3, r1
 80078ee:	d103      	bne.n	80078f8 <_free_r+0x88>
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	1809      	adds	r1, r1, r0
 80078f6:	6021      	str	r1, [r4, #0]
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	6054      	str	r4, [r2, #4]
 80078fc:	e7ca      	b.n	8007894 <_free_r+0x24>
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	200004a8 	.word	0x200004a8

08007904 <malloc>:
 8007904:	b510      	push	{r4, lr}
 8007906:	4b03      	ldr	r3, [pc, #12]	@ (8007914 <malloc+0x10>)
 8007908:	0001      	movs	r1, r0
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	f000 f826 	bl	800795c <_malloc_r>
 8007910:	bd10      	pop	{r4, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	20000018 	.word	0x20000018

08007918 <sbrk_aligned>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4e0f      	ldr	r6, [pc, #60]	@ (8007958 <sbrk_aligned+0x40>)
 800791c:	000d      	movs	r5, r1
 800791e:	6831      	ldr	r1, [r6, #0]
 8007920:	0004      	movs	r4, r0
 8007922:	2900      	cmp	r1, #0
 8007924:	d102      	bne.n	800792c <sbrk_aligned+0x14>
 8007926:	f001 fe47 	bl	80095b8 <_sbrk_r>
 800792a:	6030      	str	r0, [r6, #0]
 800792c:	0029      	movs	r1, r5
 800792e:	0020      	movs	r0, r4
 8007930:	f001 fe42 	bl	80095b8 <_sbrk_r>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d103      	bne.n	8007940 <sbrk_aligned+0x28>
 8007938:	2501      	movs	r5, #1
 800793a:	426d      	negs	r5, r5
 800793c:	0028      	movs	r0, r5
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	2303      	movs	r3, #3
 8007942:	1cc5      	adds	r5, r0, #3
 8007944:	439d      	bics	r5, r3
 8007946:	42a8      	cmp	r0, r5
 8007948:	d0f8      	beq.n	800793c <sbrk_aligned+0x24>
 800794a:	1a29      	subs	r1, r5, r0
 800794c:	0020      	movs	r0, r4
 800794e:	f001 fe33 	bl	80095b8 <_sbrk_r>
 8007952:	3001      	adds	r0, #1
 8007954:	d1f2      	bne.n	800793c <sbrk_aligned+0x24>
 8007956:	e7ef      	b.n	8007938 <sbrk_aligned+0x20>
 8007958:	200004a4 	.word	0x200004a4

0800795c <_malloc_r>:
 800795c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800795e:	2203      	movs	r2, #3
 8007960:	1ccb      	adds	r3, r1, #3
 8007962:	4393      	bics	r3, r2
 8007964:	3308      	adds	r3, #8
 8007966:	0005      	movs	r5, r0
 8007968:	001f      	movs	r7, r3
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d234      	bcs.n	80079d8 <_malloc_r+0x7c>
 800796e:	270c      	movs	r7, #12
 8007970:	42b9      	cmp	r1, r7
 8007972:	d833      	bhi.n	80079dc <_malloc_r+0x80>
 8007974:	0028      	movs	r0, r5
 8007976:	f000 f871 	bl	8007a5c <__malloc_lock>
 800797a:	4e37      	ldr	r6, [pc, #220]	@ (8007a58 <_malloc_r+0xfc>)
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	001c      	movs	r4, r3
 8007980:	2c00      	cmp	r4, #0
 8007982:	d12f      	bne.n	80079e4 <_malloc_r+0x88>
 8007984:	0039      	movs	r1, r7
 8007986:	0028      	movs	r0, r5
 8007988:	f7ff ffc6 	bl	8007918 <sbrk_aligned>
 800798c:	0004      	movs	r4, r0
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d15f      	bne.n	8007a52 <_malloc_r+0xf6>
 8007992:	6834      	ldr	r4, [r6, #0]
 8007994:	9400      	str	r4, [sp, #0]
 8007996:	9b00      	ldr	r3, [sp, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d14a      	bne.n	8007a32 <_malloc_r+0xd6>
 800799c:	2c00      	cmp	r4, #0
 800799e:	d052      	beq.n	8007a46 <_malloc_r+0xea>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	0028      	movs	r0, r5
 80079a4:	18e3      	adds	r3, r4, r3
 80079a6:	9900      	ldr	r1, [sp, #0]
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f001 fe05 	bl	80095b8 <_sbrk_r>
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	4283      	cmp	r3, r0
 80079b2:	d148      	bne.n	8007a46 <_malloc_r+0xea>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	0028      	movs	r0, r5
 80079b8:	1aff      	subs	r7, r7, r3
 80079ba:	0039      	movs	r1, r7
 80079bc:	f7ff ffac 	bl	8007918 <sbrk_aligned>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d040      	beq.n	8007a46 <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	19db      	adds	r3, r3, r7
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	6833      	ldr	r3, [r6, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	d133      	bne.n	8007a3a <_malloc_r+0xde>
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	e019      	b.n	8007a0c <_malloc_r+0xb0>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dac9      	bge.n	8007970 <_malloc_r+0x14>
 80079dc:	230c      	movs	r3, #12
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	2000      	movs	r0, #0
 80079e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079e4:	6821      	ldr	r1, [r4, #0]
 80079e6:	1bc9      	subs	r1, r1, r7
 80079e8:	d420      	bmi.n	8007a2c <_malloc_r+0xd0>
 80079ea:	290b      	cmp	r1, #11
 80079ec:	d90a      	bls.n	8007a04 <_malloc_r+0xa8>
 80079ee:	19e2      	adds	r2, r4, r7
 80079f0:	6027      	str	r7, [r4, #0]
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	d104      	bne.n	8007a00 <_malloc_r+0xa4>
 80079f6:	6032      	str	r2, [r6, #0]
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	6011      	str	r1, [r2, #0]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	e005      	b.n	8007a0c <_malloc_r+0xb0>
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	e7f9      	b.n	80079f8 <_malloc_r+0x9c>
 8007a04:	6862      	ldr	r2, [r4, #4]
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	d10e      	bne.n	8007a28 <_malloc_r+0xcc>
 8007a0a:	6032      	str	r2, [r6, #0]
 8007a0c:	0028      	movs	r0, r5
 8007a0e:	f000 f82d 	bl	8007a6c <__malloc_unlock>
 8007a12:	0020      	movs	r0, r4
 8007a14:	2207      	movs	r2, #7
 8007a16:	300b      	adds	r0, #11
 8007a18:	1d23      	adds	r3, r4, #4
 8007a1a:	4390      	bics	r0, r2
 8007a1c:	1ac2      	subs	r2, r0, r3
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	d0df      	beq.n	80079e2 <_malloc_r+0x86>
 8007a22:	1a1b      	subs	r3, r3, r0
 8007a24:	50a3      	str	r3, [r4, r2]
 8007a26:	e7dc      	b.n	80079e2 <_malloc_r+0x86>
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	e7ef      	b.n	8007a0c <_malloc_r+0xb0>
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	6864      	ldr	r4, [r4, #4]
 8007a30:	e7a6      	b.n	8007980 <_malloc_r+0x24>
 8007a32:	9c00      	ldr	r4, [sp, #0]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	e7ad      	b.n	8007996 <_malloc_r+0x3a>
 8007a3a:	001a      	movs	r2, r3
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	d1fb      	bne.n	8007a3a <_malloc_r+0xde>
 8007a42:	2300      	movs	r3, #0
 8007a44:	e7da      	b.n	80079fc <_malloc_r+0xa0>
 8007a46:	230c      	movs	r3, #12
 8007a48:	0028      	movs	r0, r5
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f000 f80e 	bl	8007a6c <__malloc_unlock>
 8007a50:	e7c6      	b.n	80079e0 <_malloc_r+0x84>
 8007a52:	6007      	str	r7, [r0, #0]
 8007a54:	e7da      	b.n	8007a0c <_malloc_r+0xb0>
 8007a56:	46c0      	nop			@ (mov r8, r8)
 8007a58:	200004a8 	.word	0x200004a8

08007a5c <__malloc_lock>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4802      	ldr	r0, [pc, #8]	@ (8007a68 <__malloc_lock+0xc>)
 8007a60:	f7ff f873 	bl	8006b4a <__retarget_lock_acquire_recursive>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	200004a0 	.word	0x200004a0

08007a6c <__malloc_unlock>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	4802      	ldr	r0, [pc, #8]	@ (8007a78 <__malloc_unlock+0xc>)
 8007a70:	f7ff f86c 	bl	8006b4c <__retarget_lock_release_recursive>
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	200004a0 	.word	0x200004a0

08007a7c <_Balloc>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	69c5      	ldr	r5, [r0, #28]
 8007a80:	0006      	movs	r6, r0
 8007a82:	000c      	movs	r4, r1
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d10e      	bne.n	8007aa6 <_Balloc+0x2a>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7ff ff3b 	bl	8007904 <malloc>
 8007a8e:	1e02      	subs	r2, r0, #0
 8007a90:	61f0      	str	r0, [r6, #28]
 8007a92:	d104      	bne.n	8007a9e <_Balloc+0x22>
 8007a94:	216b      	movs	r1, #107	@ 0x6b
 8007a96:	4b19      	ldr	r3, [pc, #100]	@ (8007afc <_Balloc+0x80>)
 8007a98:	4819      	ldr	r0, [pc, #100]	@ (8007b00 <_Balloc+0x84>)
 8007a9a:	f001 fdaf 	bl	80095fc <__assert_func>
 8007a9e:	6045      	str	r5, [r0, #4]
 8007aa0:	6085      	str	r5, [r0, #8]
 8007aa2:	6005      	str	r5, [r0, #0]
 8007aa4:	60c5      	str	r5, [r0, #12]
 8007aa6:	69f5      	ldr	r5, [r6, #28]
 8007aa8:	68eb      	ldr	r3, [r5, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <_Balloc+0x5a>
 8007aae:	69f3      	ldr	r3, [r6, #28]
 8007ab0:	00a2      	lsls	r2, r4, #2
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	189b      	adds	r3, r3, r2
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d118      	bne.n	8007aee <_Balloc+0x72>
 8007abc:	2101      	movs	r1, #1
 8007abe:	000d      	movs	r5, r1
 8007ac0:	40a5      	lsls	r5, r4
 8007ac2:	1d6a      	adds	r2, r5, #5
 8007ac4:	0030      	movs	r0, r6
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	f001 fdb6 	bl	8009638 <_calloc_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d00c      	beq.n	8007aea <_Balloc+0x6e>
 8007ad0:	6044      	str	r4, [r0, #4]
 8007ad2:	6085      	str	r5, [r0, #8]
 8007ad4:	e00d      	b.n	8007af2 <_Balloc+0x76>
 8007ad6:	2221      	movs	r2, #33	@ 0x21
 8007ad8:	2104      	movs	r1, #4
 8007ada:	0030      	movs	r0, r6
 8007adc:	f001 fdac 	bl	8009638 <_calloc_r>
 8007ae0:	69f3      	ldr	r3, [r6, #28]
 8007ae2:	60e8      	str	r0, [r5, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e1      	bne.n	8007aae <_Balloc+0x32>
 8007aea:	2000      	movs	r0, #0
 8007aec:	bd70      	pop	{r4, r5, r6, pc}
 8007aee:	6802      	ldr	r2, [r0, #0]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6103      	str	r3, [r0, #16]
 8007af6:	60c3      	str	r3, [r0, #12]
 8007af8:	e7f8      	b.n	8007aec <_Balloc+0x70>
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	0800a526 	.word	0x0800a526
 8007b00:	0800a5a6 	.word	0x0800a5a6

08007b04 <_Bfree>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	69c6      	ldr	r6, [r0, #28]
 8007b08:	0005      	movs	r5, r0
 8007b0a:	000c      	movs	r4, r1
 8007b0c:	2e00      	cmp	r6, #0
 8007b0e:	d10e      	bne.n	8007b2e <_Bfree+0x2a>
 8007b10:	2010      	movs	r0, #16
 8007b12:	f7ff fef7 	bl	8007904 <malloc>
 8007b16:	1e02      	subs	r2, r0, #0
 8007b18:	61e8      	str	r0, [r5, #28]
 8007b1a:	d104      	bne.n	8007b26 <_Bfree+0x22>
 8007b1c:	218f      	movs	r1, #143	@ 0x8f
 8007b1e:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <_Bfree+0x40>)
 8007b20:	4809      	ldr	r0, [pc, #36]	@ (8007b48 <_Bfree+0x44>)
 8007b22:	f001 fd6b 	bl	80095fc <__assert_func>
 8007b26:	6046      	str	r6, [r0, #4]
 8007b28:	6086      	str	r6, [r0, #8]
 8007b2a:	6006      	str	r6, [r0, #0]
 8007b2c:	60c6      	str	r6, [r0, #12]
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d007      	beq.n	8007b42 <_Bfree+0x3e>
 8007b32:	69eb      	ldr	r3, [r5, #28]
 8007b34:	6862      	ldr	r2, [r4, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	189b      	adds	r3, r3, r2
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	601c      	str	r4, [r3, #0]
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	0800a526 	.word	0x0800a526
 8007b48:	0800a5a6 	.word	0x0800a5a6

08007b4c <__multadd>:
 8007b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b4e:	000f      	movs	r7, r1
 8007b50:	9001      	str	r0, [sp, #4]
 8007b52:	000c      	movs	r4, r1
 8007b54:	001e      	movs	r6, r3
 8007b56:	2000      	movs	r0, #0
 8007b58:	690d      	ldr	r5, [r1, #16]
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3001      	adds	r0, #1
 8007b60:	b299      	uxth	r1, r3
 8007b62:	4351      	muls	r1, r2
 8007b64:	0c1b      	lsrs	r3, r3, #16
 8007b66:	4353      	muls	r3, r2
 8007b68:	1989      	adds	r1, r1, r6
 8007b6a:	0c0e      	lsrs	r6, r1, #16
 8007b6c:	199b      	adds	r3, r3, r6
 8007b6e:	0c1e      	lsrs	r6, r3, #16
 8007b70:	b289      	uxth	r1, r1
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	185b      	adds	r3, r3, r1
 8007b76:	c708      	stmia	r7!, {r3}
 8007b78:	4285      	cmp	r5, r0
 8007b7a:	dcef      	bgt.n	8007b5c <__multadd+0x10>
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	d022      	beq.n	8007bc6 <__multadd+0x7a>
 8007b80:	68a3      	ldr	r3, [r4, #8]
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	dc19      	bgt.n	8007bba <__multadd+0x6e>
 8007b86:	6861      	ldr	r1, [r4, #4]
 8007b88:	9801      	ldr	r0, [sp, #4]
 8007b8a:	3101      	adds	r1, #1
 8007b8c:	f7ff ff76 	bl	8007a7c <_Balloc>
 8007b90:	1e07      	subs	r7, r0, #0
 8007b92:	d105      	bne.n	8007ba0 <__multadd+0x54>
 8007b94:	003a      	movs	r2, r7
 8007b96:	21ba      	movs	r1, #186	@ 0xba
 8007b98:	4b0c      	ldr	r3, [pc, #48]	@ (8007bcc <__multadd+0x80>)
 8007b9a:	480d      	ldr	r0, [pc, #52]	@ (8007bd0 <__multadd+0x84>)
 8007b9c:	f001 fd2e 	bl	80095fc <__assert_func>
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	310c      	adds	r1, #12
 8007ba6:	3202      	adds	r2, #2
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	300c      	adds	r0, #12
 8007bac:	f001 fd16 	bl	80095dc <memcpy>
 8007bb0:	0021      	movs	r1, r4
 8007bb2:	9801      	ldr	r0, [sp, #4]
 8007bb4:	f7ff ffa6 	bl	8007b04 <_Bfree>
 8007bb8:	003c      	movs	r4, r7
 8007bba:	1d2b      	adds	r3, r5, #4
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	18e3      	adds	r3, r4, r3
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	605e      	str	r6, [r3, #4]
 8007bc4:	6125      	str	r5, [r4, #16]
 8007bc6:	0020      	movs	r0, r4
 8007bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bca:	46c0      	nop			@ (mov r8, r8)
 8007bcc:	0800a595 	.word	0x0800a595
 8007bd0:	0800a5a6 	.word	0x0800a5a6

08007bd4 <__s2b>:
 8007bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd6:	0007      	movs	r7, r0
 8007bd8:	0018      	movs	r0, r3
 8007bda:	000c      	movs	r4, r1
 8007bdc:	3008      	adds	r0, #8
 8007bde:	2109      	movs	r1, #9
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	0015      	movs	r5, r2
 8007be4:	f7f8 fb36 	bl	8000254 <__divsi3>
 8007be8:	2301      	movs	r3, #1
 8007bea:	2100      	movs	r1, #0
 8007bec:	4283      	cmp	r3, r0
 8007bee:	db0a      	blt.n	8007c06 <__s2b+0x32>
 8007bf0:	0038      	movs	r0, r7
 8007bf2:	f7ff ff43 	bl	8007a7c <_Balloc>
 8007bf6:	1e01      	subs	r1, r0, #0
 8007bf8:	d108      	bne.n	8007c0c <__s2b+0x38>
 8007bfa:	000a      	movs	r2, r1
 8007bfc:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <__s2b+0x90>)
 8007bfe:	481a      	ldr	r0, [pc, #104]	@ (8007c68 <__s2b+0x94>)
 8007c00:	31d3      	adds	r1, #211	@ 0xd3
 8007c02:	f001 fcfb 	bl	80095fc <__assert_func>
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	3101      	adds	r1, #1
 8007c0a:	e7ef      	b.n	8007bec <__s2b+0x18>
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	6143      	str	r3, [r0, #20]
 8007c10:	2301      	movs	r3, #1
 8007c12:	6103      	str	r3, [r0, #16]
 8007c14:	2d09      	cmp	r5, #9
 8007c16:	dd18      	ble.n	8007c4a <__s2b+0x76>
 8007c18:	0023      	movs	r3, r4
 8007c1a:	3309      	adds	r3, #9
 8007c1c:	001e      	movs	r6, r3
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	1964      	adds	r4, r4, r5
 8007c22:	7833      	ldrb	r3, [r6, #0]
 8007c24:	220a      	movs	r2, #10
 8007c26:	0038      	movs	r0, r7
 8007c28:	3b30      	subs	r3, #48	@ 0x30
 8007c2a:	f7ff ff8f 	bl	8007b4c <__multadd>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	0001      	movs	r1, r0
 8007c32:	42a6      	cmp	r6, r4
 8007c34:	d1f5      	bne.n	8007c22 <__s2b+0x4e>
 8007c36:	002c      	movs	r4, r5
 8007c38:	9b00      	ldr	r3, [sp, #0]
 8007c3a:	3c08      	subs	r4, #8
 8007c3c:	191c      	adds	r4, r3, r4
 8007c3e:	002e      	movs	r6, r5
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	429e      	cmp	r6, r3
 8007c44:	db04      	blt.n	8007c50 <__s2b+0x7c>
 8007c46:	0008      	movs	r0, r1
 8007c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c4a:	2509      	movs	r5, #9
 8007c4c:	340a      	adds	r4, #10
 8007c4e:	e7f6      	b.n	8007c3e <__s2b+0x6a>
 8007c50:	1b63      	subs	r3, r4, r5
 8007c52:	5d9b      	ldrb	r3, [r3, r6]
 8007c54:	220a      	movs	r2, #10
 8007c56:	0038      	movs	r0, r7
 8007c58:	3b30      	subs	r3, #48	@ 0x30
 8007c5a:	f7ff ff77 	bl	8007b4c <__multadd>
 8007c5e:	3601      	adds	r6, #1
 8007c60:	0001      	movs	r1, r0
 8007c62:	e7ed      	b.n	8007c40 <__s2b+0x6c>
 8007c64:	0800a595 	.word	0x0800a595
 8007c68:	0800a5a6 	.word	0x0800a5a6

08007c6c <__hi0bits>:
 8007c6c:	2280      	movs	r2, #128	@ 0x80
 8007c6e:	0003      	movs	r3, r0
 8007c70:	0252      	lsls	r2, r2, #9
 8007c72:	2000      	movs	r0, #0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d201      	bcs.n	8007c7c <__hi0bits+0x10>
 8007c78:	041b      	lsls	r3, r3, #16
 8007c7a:	3010      	adds	r0, #16
 8007c7c:	2280      	movs	r2, #128	@ 0x80
 8007c7e:	0452      	lsls	r2, r2, #17
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d201      	bcs.n	8007c88 <__hi0bits+0x1c>
 8007c84:	3008      	adds	r0, #8
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	2280      	movs	r2, #128	@ 0x80
 8007c8a:	0552      	lsls	r2, r2, #21
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d201      	bcs.n	8007c94 <__hi0bits+0x28>
 8007c90:	3004      	adds	r0, #4
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	2280      	movs	r2, #128	@ 0x80
 8007c96:	05d2      	lsls	r2, r2, #23
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d201      	bcs.n	8007ca0 <__hi0bits+0x34>
 8007c9c:	3002      	adds	r0, #2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db03      	blt.n	8007cac <__hi0bits+0x40>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	4213      	tst	r3, r2
 8007ca8:	d100      	bne.n	8007cac <__hi0bits+0x40>
 8007caa:	2020      	movs	r0, #32
 8007cac:	4770      	bx	lr

08007cae <__lo0bits>:
 8007cae:	6803      	ldr	r3, [r0, #0]
 8007cb0:	0001      	movs	r1, r0
 8007cb2:	2207      	movs	r2, #7
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	4010      	ands	r0, r2
 8007cb8:	4213      	tst	r3, r2
 8007cba:	d00d      	beq.n	8007cd8 <__lo0bits+0x2a>
 8007cbc:	3a06      	subs	r2, #6
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	4213      	tst	r3, r2
 8007cc2:	d105      	bne.n	8007cd0 <__lo0bits+0x22>
 8007cc4:	3002      	adds	r0, #2
 8007cc6:	4203      	tst	r3, r0
 8007cc8:	d003      	beq.n	8007cd2 <__lo0bits+0x24>
 8007cca:	40d3      	lsrs	r3, r2
 8007ccc:	0010      	movs	r0, r2
 8007cce:	600b      	str	r3, [r1, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	089b      	lsrs	r3, r3, #2
 8007cd4:	600b      	str	r3, [r1, #0]
 8007cd6:	e7fb      	b.n	8007cd0 <__lo0bits+0x22>
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d101      	bne.n	8007ce2 <__lo0bits+0x34>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	0c1b      	lsrs	r3, r3, #16
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	d101      	bne.n	8007cec <__lo0bits+0x3e>
 8007ce8:	3008      	adds	r0, #8
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	071a      	lsls	r2, r3, #28
 8007cee:	d101      	bne.n	8007cf4 <__lo0bits+0x46>
 8007cf0:	3004      	adds	r0, #4
 8007cf2:	091b      	lsrs	r3, r3, #4
 8007cf4:	079a      	lsls	r2, r3, #30
 8007cf6:	d101      	bne.n	8007cfc <__lo0bits+0x4e>
 8007cf8:	3002      	adds	r0, #2
 8007cfa:	089b      	lsrs	r3, r3, #2
 8007cfc:	07da      	lsls	r2, r3, #31
 8007cfe:	d4e9      	bmi.n	8007cd4 <__lo0bits+0x26>
 8007d00:	3001      	adds	r0, #1
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	d1e6      	bne.n	8007cd4 <__lo0bits+0x26>
 8007d06:	2020      	movs	r0, #32
 8007d08:	e7e2      	b.n	8007cd0 <__lo0bits+0x22>
	...

08007d0c <__i2b>:
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	000c      	movs	r4, r1
 8007d10:	2101      	movs	r1, #1
 8007d12:	f7ff feb3 	bl	8007a7c <_Balloc>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d107      	bne.n	8007d2a <__i2b+0x1e>
 8007d1a:	2146      	movs	r1, #70	@ 0x46
 8007d1c:	4c05      	ldr	r4, [pc, #20]	@ (8007d34 <__i2b+0x28>)
 8007d1e:	0002      	movs	r2, r0
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <__i2b+0x2c>)
 8007d22:	0020      	movs	r0, r4
 8007d24:	31ff      	adds	r1, #255	@ 0xff
 8007d26:	f001 fc69 	bl	80095fc <__assert_func>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6144      	str	r4, [r0, #20]
 8007d2e:	6103      	str	r3, [r0, #16]
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	0800a5a6 	.word	0x0800a5a6
 8007d38:	0800a595 	.word	0x0800a595

08007d3c <__multiply>:
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	0014      	movs	r4, r2
 8007d40:	690a      	ldr	r2, [r1, #16]
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	000d      	movs	r5, r1
 8007d46:	b08b      	sub	sp, #44	@ 0x2c
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	db02      	blt.n	8007d52 <__multiply+0x16>
 8007d4c:	0023      	movs	r3, r4
 8007d4e:	000c      	movs	r4, r1
 8007d50:	001d      	movs	r5, r3
 8007d52:	6927      	ldr	r7, [r4, #16]
 8007d54:	692e      	ldr	r6, [r5, #16]
 8007d56:	6861      	ldr	r1, [r4, #4]
 8007d58:	19bb      	adds	r3, r7, r6
 8007d5a:	9303      	str	r3, [sp, #12]
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	19ba      	adds	r2, r7, r6
 8007d60:	4293      	cmp	r3, r2
 8007d62:	da00      	bge.n	8007d66 <__multiply+0x2a>
 8007d64:	3101      	adds	r1, #1
 8007d66:	f7ff fe89 	bl	8007a7c <_Balloc>
 8007d6a:	9002      	str	r0, [sp, #8]
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d106      	bne.n	8007d7e <__multiply+0x42>
 8007d70:	21b1      	movs	r1, #177	@ 0xb1
 8007d72:	4b49      	ldr	r3, [pc, #292]	@ (8007e98 <__multiply+0x15c>)
 8007d74:	4849      	ldr	r0, [pc, #292]	@ (8007e9c <__multiply+0x160>)
 8007d76:	9a02      	ldr	r2, [sp, #8]
 8007d78:	0049      	lsls	r1, r1, #1
 8007d7a:	f001 fc3f 	bl	80095fc <__assert_func>
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	3314      	adds	r3, #20
 8007d84:	469c      	mov	ip, r3
 8007d86:	19bb      	adds	r3, r7, r6
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4463      	add	r3, ip
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	4663      	mov	r3, ip
 8007d90:	9904      	ldr	r1, [sp, #16]
 8007d92:	428b      	cmp	r3, r1
 8007d94:	d32a      	bcc.n	8007dec <__multiply+0xb0>
 8007d96:	0023      	movs	r3, r4
 8007d98:	00bf      	lsls	r7, r7, #2
 8007d9a:	3314      	adds	r3, #20
 8007d9c:	3514      	adds	r5, #20
 8007d9e:	9308      	str	r3, [sp, #32]
 8007da0:	00b6      	lsls	r6, r6, #2
 8007da2:	19db      	adds	r3, r3, r7
 8007da4:	9305      	str	r3, [sp, #20]
 8007da6:	19ab      	adds	r3, r5, r6
 8007da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007daa:	2304      	movs	r3, #4
 8007dac:	9306      	str	r3, [sp, #24]
 8007dae:	0023      	movs	r3, r4
 8007db0:	9a05      	ldr	r2, [sp, #20]
 8007db2:	3315      	adds	r3, #21
 8007db4:	9501      	str	r5, [sp, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d305      	bcc.n	8007dc6 <__multiply+0x8a>
 8007dba:	1b13      	subs	r3, r2, r4
 8007dbc:	3b15      	subs	r3, #21
 8007dbe:	089b      	lsrs	r3, r3, #2
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	9306      	str	r3, [sp, #24]
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d310      	bcc.n	8007df0 <__multiply+0xb4>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dd05      	ble.n	8007de0 <__multiply+0xa4>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d056      	beq.n	8007e8e <__multiply+0x152>
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	9a03      	ldr	r2, [sp, #12]
 8007de4:	0018      	movs	r0, r3
 8007de6:	611a      	str	r2, [r3, #16]
 8007de8:	b00b      	add	sp, #44	@ 0x2c
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dec:	c304      	stmia	r3!, {r2}
 8007dee:	e7cf      	b.n	8007d90 <__multiply+0x54>
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	b280      	uxth	r0, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d01e      	beq.n	8007e38 <__multiply+0xfc>
 8007dfa:	4667      	mov	r7, ip
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	9e08      	ldr	r6, [sp, #32]
 8007e00:	ce02      	ldmia	r6!, {r1}
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	b28b      	uxth	r3, r1
 8007e08:	4343      	muls	r3, r0
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	466b      	mov	r3, sp
 8007e0e:	0c09      	lsrs	r1, r1, #16
 8007e10:	8b9b      	ldrh	r3, [r3, #28]
 8007e12:	4341      	muls	r1, r0
 8007e14:	18d3      	adds	r3, r2, r3
 8007e16:	9a07      	ldr	r2, [sp, #28]
 8007e18:	195b      	adds	r3, r3, r5
 8007e1a:	0c12      	lsrs	r2, r2, #16
 8007e1c:	1889      	adds	r1, r1, r2
 8007e1e:	0c1a      	lsrs	r2, r3, #16
 8007e20:	188a      	adds	r2, r1, r2
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	0c15      	lsrs	r5, r2, #16
 8007e26:	0412      	lsls	r2, r2, #16
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	9b05      	ldr	r3, [sp, #20]
 8007e2c:	c704      	stmia	r7!, {r2}
 8007e2e:	42b3      	cmp	r3, r6
 8007e30:	d8e6      	bhi.n	8007e00 <__multiply+0xc4>
 8007e32:	4663      	mov	r3, ip
 8007e34:	9a06      	ldr	r2, [sp, #24]
 8007e36:	509d      	str	r5, [r3, r2]
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	0c00      	lsrs	r0, r0, #16
 8007e3e:	d020      	beq.n	8007e82 <__multiply+0x146>
 8007e40:	4663      	mov	r3, ip
 8007e42:	0025      	movs	r5, r4
 8007e44:	4661      	mov	r1, ip
 8007e46:	2700      	movs	r7, #0
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3514      	adds	r5, #20
 8007e4c:	682a      	ldr	r2, [r5, #0]
 8007e4e:	680e      	ldr	r6, [r1, #0]
 8007e50:	b292      	uxth	r2, r2
 8007e52:	4342      	muls	r2, r0
 8007e54:	0c36      	lsrs	r6, r6, #16
 8007e56:	1992      	adds	r2, r2, r6
 8007e58:	19d2      	adds	r2, r2, r7
 8007e5a:	0416      	lsls	r6, r2, #16
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	431e      	orrs	r6, r3
 8007e60:	600e      	str	r6, [r1, #0]
 8007e62:	cd40      	ldmia	r5!, {r6}
 8007e64:	684b      	ldr	r3, [r1, #4]
 8007e66:	0c36      	lsrs	r6, r6, #16
 8007e68:	4346      	muls	r6, r0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	0c12      	lsrs	r2, r2, #16
 8007e6e:	18f3      	adds	r3, r6, r3
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	9a05      	ldr	r2, [sp, #20]
 8007e74:	0c1f      	lsrs	r7, r3, #16
 8007e76:	3104      	adds	r1, #4
 8007e78:	42aa      	cmp	r2, r5
 8007e7a:	d8e7      	bhi.n	8007e4c <__multiply+0x110>
 8007e7c:	4662      	mov	r2, ip
 8007e7e:	9906      	ldr	r1, [sp, #24]
 8007e80:	5053      	str	r3, [r2, r1]
 8007e82:	9b01      	ldr	r3, [sp, #4]
 8007e84:	3304      	adds	r3, #4
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	2304      	movs	r3, #4
 8007e8a:	449c      	add	ip, r3
 8007e8c:	e79b      	b.n	8007dc6 <__multiply+0x8a>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	e79b      	b.n	8007dce <__multiply+0x92>
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	0800a595 	.word	0x0800a595
 8007e9c:	0800a5a6 	.word	0x0800a5a6

08007ea0 <__pow5mult>:
 8007ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	0015      	movs	r5, r2
 8007ea6:	0007      	movs	r7, r0
 8007ea8:	000e      	movs	r6, r1
 8007eaa:	401a      	ands	r2, r3
 8007eac:	421d      	tst	r5, r3
 8007eae:	d008      	beq.n	8007ec2 <__pow5mult+0x22>
 8007eb0:	4925      	ldr	r1, [pc, #148]	@ (8007f48 <__pow5mult+0xa8>)
 8007eb2:	3a01      	subs	r2, #1
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	5852      	ldr	r2, [r2, r1]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	0031      	movs	r1, r6
 8007ebc:	f7ff fe46 	bl	8007b4c <__multadd>
 8007ec0:	0006      	movs	r6, r0
 8007ec2:	10ad      	asrs	r5, r5, #2
 8007ec4:	d03d      	beq.n	8007f42 <__pow5mult+0xa2>
 8007ec6:	69fc      	ldr	r4, [r7, #28]
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	d10f      	bne.n	8007eec <__pow5mult+0x4c>
 8007ecc:	2010      	movs	r0, #16
 8007ece:	f7ff fd19 	bl	8007904 <malloc>
 8007ed2:	1e02      	subs	r2, r0, #0
 8007ed4:	61f8      	str	r0, [r7, #28]
 8007ed6:	d105      	bne.n	8007ee4 <__pow5mult+0x44>
 8007ed8:	21b4      	movs	r1, #180	@ 0xb4
 8007eda:	4b1c      	ldr	r3, [pc, #112]	@ (8007f4c <__pow5mult+0xac>)
 8007edc:	481c      	ldr	r0, [pc, #112]	@ (8007f50 <__pow5mult+0xb0>)
 8007ede:	31ff      	adds	r1, #255	@ 0xff
 8007ee0:	f001 fb8c 	bl	80095fc <__assert_func>
 8007ee4:	6044      	str	r4, [r0, #4]
 8007ee6:	6084      	str	r4, [r0, #8]
 8007ee8:	6004      	str	r4, [r0, #0]
 8007eea:	60c4      	str	r4, [r0, #12]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	689c      	ldr	r4, [r3, #8]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	2c00      	cmp	r4, #0
 8007ef4:	d108      	bne.n	8007f08 <__pow5mult+0x68>
 8007ef6:	0038      	movs	r0, r7
 8007ef8:	4916      	ldr	r1, [pc, #88]	@ (8007f54 <__pow5mult+0xb4>)
 8007efa:	f7ff ff07 	bl	8007d0c <__i2b>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	0004      	movs	r4, r0
 8007f02:	6098      	str	r0, [r3, #8]
 8007f04:	2300      	movs	r3, #0
 8007f06:	6003      	str	r3, [r0, #0]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	421d      	tst	r5, r3
 8007f0c:	d00a      	beq.n	8007f24 <__pow5mult+0x84>
 8007f0e:	0031      	movs	r1, r6
 8007f10:	0022      	movs	r2, r4
 8007f12:	0038      	movs	r0, r7
 8007f14:	f7ff ff12 	bl	8007d3c <__multiply>
 8007f18:	0031      	movs	r1, r6
 8007f1a:	9001      	str	r0, [sp, #4]
 8007f1c:	0038      	movs	r0, r7
 8007f1e:	f7ff fdf1 	bl	8007b04 <_Bfree>
 8007f22:	9e01      	ldr	r6, [sp, #4]
 8007f24:	106d      	asrs	r5, r5, #1
 8007f26:	d00c      	beq.n	8007f42 <__pow5mult+0xa2>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d107      	bne.n	8007f3e <__pow5mult+0x9e>
 8007f2e:	0022      	movs	r2, r4
 8007f30:	0021      	movs	r1, r4
 8007f32:	0038      	movs	r0, r7
 8007f34:	f7ff ff02 	bl	8007d3c <__multiply>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6020      	str	r0, [r4, #0]
 8007f3c:	6003      	str	r3, [r0, #0]
 8007f3e:	0004      	movs	r4, r0
 8007f40:	e7e2      	b.n	8007f08 <__pow5mult+0x68>
 8007f42:	0030      	movs	r0, r6
 8007f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	0800a600 	.word	0x0800a600
 8007f4c:	0800a526 	.word	0x0800a526
 8007f50:	0800a5a6 	.word	0x0800a5a6
 8007f54:	00000271 	.word	0x00000271

08007f58 <__lshift>:
 8007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5a:	000c      	movs	r4, r1
 8007f5c:	0016      	movs	r6, r2
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	1157      	asrs	r7, r2, #5
 8007f62:	b085      	sub	sp, #20
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	6849      	ldr	r1, [r1, #4]
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	9a00      	ldr	r2, [sp, #0]
 8007f74:	4293      	cmp	r3, r2
 8007f76:	db10      	blt.n	8007f9a <__lshift+0x42>
 8007f78:	9802      	ldr	r0, [sp, #8]
 8007f7a:	f7ff fd7f 	bl	8007a7c <_Balloc>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	0001      	movs	r1, r0
 8007f82:	0005      	movs	r5, r0
 8007f84:	001a      	movs	r2, r3
 8007f86:	3114      	adds	r1, #20
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	d10c      	bne.n	8007fa6 <__lshift+0x4e>
 8007f8c:	21ef      	movs	r1, #239	@ 0xef
 8007f8e:	002a      	movs	r2, r5
 8007f90:	4b25      	ldr	r3, [pc, #148]	@ (8008028 <__lshift+0xd0>)
 8007f92:	4826      	ldr	r0, [pc, #152]	@ (800802c <__lshift+0xd4>)
 8007f94:	0049      	lsls	r1, r1, #1
 8007f96:	f001 fb31 	bl	80095fc <__assert_func>
 8007f9a:	3101      	adds	r1, #1
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	e7e8      	b.n	8007f72 <__lshift+0x1a>
 8007fa0:	0098      	lsls	r0, r3, #2
 8007fa2:	500a      	str	r2, [r1, r0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	42bb      	cmp	r3, r7
 8007fa8:	dbfa      	blt.n	8007fa0 <__lshift+0x48>
 8007faa:	43fb      	mvns	r3, r7
 8007fac:	17db      	asrs	r3, r3, #31
 8007fae:	401f      	ands	r7, r3
 8007fb0:	00bf      	lsls	r7, r7, #2
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	201f      	movs	r0, #31
 8007fb6:	19c9      	adds	r1, r1, r7
 8007fb8:	0037      	movs	r7, r6
 8007fba:	6922      	ldr	r2, [r4, #16]
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	0092      	lsls	r2, r2, #2
 8007fc0:	189a      	adds	r2, r3, r2
 8007fc2:	4007      	ands	r7, r0
 8007fc4:	4206      	tst	r6, r0
 8007fc6:	d029      	beq.n	800801c <__lshift+0xc4>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	1bc0      	subs	r0, r0, r7
 8007fcc:	9003      	str	r0, [sp, #12]
 8007fce:	468c      	mov	ip, r1
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	681e      	ldr	r6, [r3, #0]
 8007fd4:	40be      	lsls	r6, r7
 8007fd6:	4306      	orrs	r6, r0
 8007fd8:	4660      	mov	r0, ip
 8007fda:	c040      	stmia	r0!, {r6}
 8007fdc:	4684      	mov	ip, r0
 8007fde:	9e03      	ldr	r6, [sp, #12]
 8007fe0:	cb01      	ldmia	r3!, {r0}
 8007fe2:	40f0      	lsrs	r0, r6
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d8f4      	bhi.n	8007fd2 <__lshift+0x7a>
 8007fe8:	0026      	movs	r6, r4
 8007fea:	3615      	adds	r6, #21
 8007fec:	2304      	movs	r3, #4
 8007fee:	42b2      	cmp	r2, r6
 8007ff0:	d304      	bcc.n	8007ffc <__lshift+0xa4>
 8007ff2:	1b13      	subs	r3, r2, r4
 8007ff4:	3b15      	subs	r3, #21
 8007ff6:	089b      	lsrs	r3, r3, #2
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	50c8      	str	r0, [r1, r3]
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d002      	beq.n	8008008 <__lshift+0xb0>
 8008002:	9b01      	ldr	r3, [sp, #4]
 8008004:	3302      	adds	r3, #2
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	9802      	ldr	r0, [sp, #8]
 800800c:	3b01      	subs	r3, #1
 800800e:	0021      	movs	r1, r4
 8008010:	612b      	str	r3, [r5, #16]
 8008012:	f7ff fd77 	bl	8007b04 <_Bfree>
 8008016:	0028      	movs	r0, r5
 8008018:	b005      	add	sp, #20
 800801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801c:	cb01      	ldmia	r3!, {r0}
 800801e:	c101      	stmia	r1!, {r0}
 8008020:	429a      	cmp	r2, r3
 8008022:	d8fb      	bhi.n	800801c <__lshift+0xc4>
 8008024:	e7f0      	b.n	8008008 <__lshift+0xb0>
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	0800a595 	.word	0x0800a595
 800802c:	0800a5a6 	.word	0x0800a5a6

08008030 <__mcmp>:
 8008030:	b530      	push	{r4, r5, lr}
 8008032:	690b      	ldr	r3, [r1, #16]
 8008034:	6904      	ldr	r4, [r0, #16]
 8008036:	0002      	movs	r2, r0
 8008038:	1ae0      	subs	r0, r4, r3
 800803a:	429c      	cmp	r4, r3
 800803c:	d10f      	bne.n	800805e <__mcmp+0x2e>
 800803e:	3214      	adds	r2, #20
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	3114      	adds	r1, #20
 8008044:	0014      	movs	r4, r2
 8008046:	18c9      	adds	r1, r1, r3
 8008048:	18d2      	adds	r2, r2, r3
 800804a:	3a04      	subs	r2, #4
 800804c:	3904      	subs	r1, #4
 800804e:	6815      	ldr	r5, [r2, #0]
 8008050:	680b      	ldr	r3, [r1, #0]
 8008052:	429d      	cmp	r5, r3
 8008054:	d004      	beq.n	8008060 <__mcmp+0x30>
 8008056:	2001      	movs	r0, #1
 8008058:	429d      	cmp	r5, r3
 800805a:	d200      	bcs.n	800805e <__mcmp+0x2e>
 800805c:	3802      	subs	r0, #2
 800805e:	bd30      	pop	{r4, r5, pc}
 8008060:	4294      	cmp	r4, r2
 8008062:	d3f2      	bcc.n	800804a <__mcmp+0x1a>
 8008064:	e7fb      	b.n	800805e <__mcmp+0x2e>
	...

08008068 <__mdiff>:
 8008068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806a:	000c      	movs	r4, r1
 800806c:	b087      	sub	sp, #28
 800806e:	9000      	str	r0, [sp, #0]
 8008070:	0011      	movs	r1, r2
 8008072:	0020      	movs	r0, r4
 8008074:	0017      	movs	r7, r2
 8008076:	f7ff ffdb 	bl	8008030 <__mcmp>
 800807a:	1e05      	subs	r5, r0, #0
 800807c:	d110      	bne.n	80080a0 <__mdiff+0x38>
 800807e:	0001      	movs	r1, r0
 8008080:	9800      	ldr	r0, [sp, #0]
 8008082:	f7ff fcfb 	bl	8007a7c <_Balloc>
 8008086:	1e02      	subs	r2, r0, #0
 8008088:	d104      	bne.n	8008094 <__mdiff+0x2c>
 800808a:	4b40      	ldr	r3, [pc, #256]	@ (800818c <__mdiff+0x124>)
 800808c:	4840      	ldr	r0, [pc, #256]	@ (8008190 <__mdiff+0x128>)
 800808e:	4941      	ldr	r1, [pc, #260]	@ (8008194 <__mdiff+0x12c>)
 8008090:	f001 fab4 	bl	80095fc <__assert_func>
 8008094:	2301      	movs	r3, #1
 8008096:	6145      	str	r5, [r0, #20]
 8008098:	6103      	str	r3, [r0, #16]
 800809a:	0010      	movs	r0, r2
 800809c:	b007      	add	sp, #28
 800809e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a0:	2600      	movs	r6, #0
 80080a2:	42b0      	cmp	r0, r6
 80080a4:	da03      	bge.n	80080ae <__mdiff+0x46>
 80080a6:	0023      	movs	r3, r4
 80080a8:	003c      	movs	r4, r7
 80080aa:	001f      	movs	r7, r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	6861      	ldr	r1, [r4, #4]
 80080b0:	9800      	ldr	r0, [sp, #0]
 80080b2:	f7ff fce3 	bl	8007a7c <_Balloc>
 80080b6:	1e02      	subs	r2, r0, #0
 80080b8:	d103      	bne.n	80080c2 <__mdiff+0x5a>
 80080ba:	4b34      	ldr	r3, [pc, #208]	@ (800818c <__mdiff+0x124>)
 80080bc:	4834      	ldr	r0, [pc, #208]	@ (8008190 <__mdiff+0x128>)
 80080be:	4936      	ldr	r1, [pc, #216]	@ (8008198 <__mdiff+0x130>)
 80080c0:	e7e6      	b.n	8008090 <__mdiff+0x28>
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	3414      	adds	r4, #20
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	18e3      	adds	r3, r4, r3
 80080cc:	0021      	movs	r1, r4
 80080ce:	9401      	str	r4, [sp, #4]
 80080d0:	003c      	movs	r4, r7
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	3414      	adds	r4, #20
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	18e3      	adds	r3, r4, r3
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	0003      	movs	r3, r0
 80080e0:	60c6      	str	r6, [r0, #12]
 80080e2:	468c      	mov	ip, r1
 80080e4:	2000      	movs	r0, #0
 80080e6:	3314      	adds	r3, #20
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	4663      	mov	r3, ip
 80080ee:	cb20      	ldmia	r3!, {r5}
 80080f0:	b2a9      	uxth	r1, r5
 80080f2:	000e      	movs	r6, r1
 80080f4:	469c      	mov	ip, r3
 80080f6:	cc08      	ldmia	r4!, {r3}
 80080f8:	0c2d      	lsrs	r5, r5, #16
 80080fa:	b299      	uxth	r1, r3
 80080fc:	1a71      	subs	r1, r6, r1
 80080fe:	1809      	adds	r1, r1, r0
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	1408      	asrs	r0, r1, #16
 8008104:	1aeb      	subs	r3, r5, r3
 8008106:	181b      	adds	r3, r3, r0
 8008108:	1418      	asrs	r0, r3, #16
 800810a:	b289      	uxth	r1, r1
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	4319      	orrs	r1, r3
 8008110:	9b05      	ldr	r3, [sp, #20]
 8008112:	c302      	stmia	r3!, {r1}
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	42a3      	cmp	r3, r4
 800811a:	d8e7      	bhi.n	80080ec <__mdiff+0x84>
 800811c:	0039      	movs	r1, r7
 800811e:	9c03      	ldr	r4, [sp, #12]
 8008120:	3115      	adds	r1, #21
 8008122:	2304      	movs	r3, #4
 8008124:	428c      	cmp	r4, r1
 8008126:	d304      	bcc.n	8008132 <__mdiff+0xca>
 8008128:	1be3      	subs	r3, r4, r7
 800812a:	3b15      	subs	r3, #21
 800812c:	089b      	lsrs	r3, r3, #2
 800812e:	3301      	adds	r3, #1
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	9901      	ldr	r1, [sp, #4]
 8008134:	18cd      	adds	r5, r1, r3
 8008136:	9904      	ldr	r1, [sp, #16]
 8008138:	002e      	movs	r6, r5
 800813a:	18cb      	adds	r3, r1, r3
 800813c:	001f      	movs	r7, r3
 800813e:	9902      	ldr	r1, [sp, #8]
 8008140:	428e      	cmp	r6, r1
 8008142:	d311      	bcc.n	8008168 <__mdiff+0x100>
 8008144:	9c02      	ldr	r4, [sp, #8]
 8008146:	1ee9      	subs	r1, r5, #3
 8008148:	2000      	movs	r0, #0
 800814a:	428c      	cmp	r4, r1
 800814c:	d304      	bcc.n	8008158 <__mdiff+0xf0>
 800814e:	0021      	movs	r1, r4
 8008150:	3103      	adds	r1, #3
 8008152:	1b49      	subs	r1, r1, r5
 8008154:	0889      	lsrs	r1, r1, #2
 8008156:	0088      	lsls	r0, r1, #2
 8008158:	181b      	adds	r3, r3, r0
 800815a:	3b04      	subs	r3, #4
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	2900      	cmp	r1, #0
 8008160:	d010      	beq.n	8008184 <__mdiff+0x11c>
 8008162:	9b00      	ldr	r3, [sp, #0]
 8008164:	6113      	str	r3, [r2, #16]
 8008166:	e798      	b.n	800809a <__mdiff+0x32>
 8008168:	4684      	mov	ip, r0
 800816a:	ce02      	ldmia	r6!, {r1}
 800816c:	b288      	uxth	r0, r1
 800816e:	4460      	add	r0, ip
 8008170:	1400      	asrs	r0, r0, #16
 8008172:	0c0c      	lsrs	r4, r1, #16
 8008174:	1904      	adds	r4, r0, r4
 8008176:	4461      	add	r1, ip
 8008178:	1420      	asrs	r0, r4, #16
 800817a:	b289      	uxth	r1, r1
 800817c:	0424      	lsls	r4, r4, #16
 800817e:	4321      	orrs	r1, r4
 8008180:	c702      	stmia	r7!, {r1}
 8008182:	e7dc      	b.n	800813e <__mdiff+0xd6>
 8008184:	9900      	ldr	r1, [sp, #0]
 8008186:	3901      	subs	r1, #1
 8008188:	9100      	str	r1, [sp, #0]
 800818a:	e7e6      	b.n	800815a <__mdiff+0xf2>
 800818c:	0800a595 	.word	0x0800a595
 8008190:	0800a5a6 	.word	0x0800a5a6
 8008194:	00000237 	.word	0x00000237
 8008198:	00000245 	.word	0x00000245

0800819c <__ulp>:
 800819c:	b510      	push	{r4, lr}
 800819e:	2400      	movs	r4, #0
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <__ulp+0x38>)
 80081a2:	4a0d      	ldr	r2, [pc, #52]	@ (80081d8 <__ulp+0x3c>)
 80081a4:	400b      	ands	r3, r1
 80081a6:	189b      	adds	r3, r3, r2
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	dc06      	bgt.n	80081ba <__ulp+0x1e>
 80081ac:	425b      	negs	r3, r3
 80081ae:	151a      	asrs	r2, r3, #20
 80081b0:	2a13      	cmp	r2, #19
 80081b2:	dc05      	bgt.n	80081c0 <__ulp+0x24>
 80081b4:	2380      	movs	r3, #128	@ 0x80
 80081b6:	031b      	lsls	r3, r3, #12
 80081b8:	4113      	asrs	r3, r2
 80081ba:	0019      	movs	r1, r3
 80081bc:	0020      	movs	r0, r4
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	3a14      	subs	r2, #20
 80081c2:	2401      	movs	r4, #1
 80081c4:	2a1e      	cmp	r2, #30
 80081c6:	dc02      	bgt.n	80081ce <__ulp+0x32>
 80081c8:	2480      	movs	r4, #128	@ 0x80
 80081ca:	0624      	lsls	r4, r4, #24
 80081cc:	40d4      	lsrs	r4, r2
 80081ce:	2300      	movs	r3, #0
 80081d0:	e7f3      	b.n	80081ba <__ulp+0x1e>
 80081d2:	46c0      	nop			@ (mov r8, r8)
 80081d4:	7ff00000 	.word	0x7ff00000
 80081d8:	fcc00000 	.word	0xfcc00000

080081dc <__b2d>:
 80081dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081de:	0006      	movs	r6, r0
 80081e0:	6903      	ldr	r3, [r0, #16]
 80081e2:	3614      	adds	r6, #20
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	18f3      	adds	r3, r6, r3
 80081e8:	1f1d      	subs	r5, r3, #4
 80081ea:	682c      	ldr	r4, [r5, #0]
 80081ec:	000f      	movs	r7, r1
 80081ee:	0020      	movs	r0, r4
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	f7ff fd3b 	bl	8007c6c <__hi0bits>
 80081f6:	2220      	movs	r2, #32
 80081f8:	1a12      	subs	r2, r2, r0
 80081fa:	603a      	str	r2, [r7, #0]
 80081fc:	0003      	movs	r3, r0
 80081fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <__b2d+0x94>)
 8008200:	280a      	cmp	r0, #10
 8008202:	dc15      	bgt.n	8008230 <__b2d+0x54>
 8008204:	210b      	movs	r1, #11
 8008206:	0027      	movs	r7, r4
 8008208:	1a09      	subs	r1, r1, r0
 800820a:	40cf      	lsrs	r7, r1
 800820c:	433a      	orrs	r2, r7
 800820e:	468c      	mov	ip, r1
 8008210:	0011      	movs	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	42ae      	cmp	r6, r5
 8008216:	d202      	bcs.n	800821e <__b2d+0x42>
 8008218:	9a01      	ldr	r2, [sp, #4]
 800821a:	3a08      	subs	r2, #8
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	3315      	adds	r3, #21
 8008220:	409c      	lsls	r4, r3
 8008222:	4663      	mov	r3, ip
 8008224:	0027      	movs	r7, r4
 8008226:	40da      	lsrs	r2, r3
 8008228:	4317      	orrs	r7, r2
 800822a:	0038      	movs	r0, r7
 800822c:	b003      	add	sp, #12
 800822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008230:	2700      	movs	r7, #0
 8008232:	42ae      	cmp	r6, r5
 8008234:	d202      	bcs.n	800823c <__b2d+0x60>
 8008236:	9d01      	ldr	r5, [sp, #4]
 8008238:	3d08      	subs	r5, #8
 800823a:	682f      	ldr	r7, [r5, #0]
 800823c:	210b      	movs	r1, #11
 800823e:	4249      	negs	r1, r1
 8008240:	468c      	mov	ip, r1
 8008242:	449c      	add	ip, r3
 8008244:	2b0b      	cmp	r3, #11
 8008246:	d010      	beq.n	800826a <__b2d+0x8e>
 8008248:	4661      	mov	r1, ip
 800824a:	2320      	movs	r3, #32
 800824c:	408c      	lsls	r4, r1
 800824e:	1a5b      	subs	r3, r3, r1
 8008250:	0039      	movs	r1, r7
 8008252:	40d9      	lsrs	r1, r3
 8008254:	430c      	orrs	r4, r1
 8008256:	4322      	orrs	r2, r4
 8008258:	0011      	movs	r1, r2
 800825a:	2200      	movs	r2, #0
 800825c:	42b5      	cmp	r5, r6
 800825e:	d901      	bls.n	8008264 <__b2d+0x88>
 8008260:	3d04      	subs	r5, #4
 8008262:	682a      	ldr	r2, [r5, #0]
 8008264:	4664      	mov	r4, ip
 8008266:	40a7      	lsls	r7, r4
 8008268:	e7dd      	b.n	8008226 <__b2d+0x4a>
 800826a:	4322      	orrs	r2, r4
 800826c:	0011      	movs	r1, r2
 800826e:	e7dc      	b.n	800822a <__b2d+0x4e>
 8008270:	3ff00000 	.word	0x3ff00000

08008274 <__d2b>:
 8008274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008276:	2101      	movs	r1, #1
 8008278:	0016      	movs	r6, r2
 800827a:	001f      	movs	r7, r3
 800827c:	f7ff fbfe 	bl	8007a7c <_Balloc>
 8008280:	1e04      	subs	r4, r0, #0
 8008282:	d105      	bne.n	8008290 <__d2b+0x1c>
 8008284:	0022      	movs	r2, r4
 8008286:	4b25      	ldr	r3, [pc, #148]	@ (800831c <__d2b+0xa8>)
 8008288:	4825      	ldr	r0, [pc, #148]	@ (8008320 <__d2b+0xac>)
 800828a:	4926      	ldr	r1, [pc, #152]	@ (8008324 <__d2b+0xb0>)
 800828c:	f001 f9b6 	bl	80095fc <__assert_func>
 8008290:	033b      	lsls	r3, r7, #12
 8008292:	007d      	lsls	r5, r7, #1
 8008294:	0b1b      	lsrs	r3, r3, #12
 8008296:	0d6d      	lsrs	r5, r5, #21
 8008298:	d002      	beq.n	80082a0 <__d2b+0x2c>
 800829a:	2280      	movs	r2, #128	@ 0x80
 800829c:	0352      	lsls	r2, r2, #13
 800829e:	4313      	orrs	r3, r2
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d025      	beq.n	80082f2 <__d2b+0x7e>
 80082a6:	4668      	mov	r0, sp
 80082a8:	9600      	str	r6, [sp, #0]
 80082aa:	f7ff fd00 	bl	8007cae <__lo0bits>
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	9900      	ldr	r1, [sp, #0]
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d01b      	beq.n	80082ee <__d2b+0x7a>
 80082b6:	2220      	movs	r2, #32
 80082b8:	001e      	movs	r6, r3
 80082ba:	1a12      	subs	r2, r2, r0
 80082bc:	4096      	lsls	r6, r2
 80082be:	0032      	movs	r2, r6
 80082c0:	40c3      	lsrs	r3, r0
 80082c2:	430a      	orrs	r2, r1
 80082c4:	6162      	str	r2, [r4, #20]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	9e01      	ldr	r6, [sp, #4]
 80082ca:	61a6      	str	r6, [r4, #24]
 80082cc:	1e73      	subs	r3, r6, #1
 80082ce:	419e      	sbcs	r6, r3
 80082d0:	3601      	adds	r6, #1
 80082d2:	6126      	str	r6, [r4, #16]
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d014      	beq.n	8008302 <__d2b+0x8e>
 80082d8:	2635      	movs	r6, #53	@ 0x35
 80082da:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <__d2b+0xb4>)
 80082dc:	18ed      	adds	r5, r5, r3
 80082de:	9b08      	ldr	r3, [sp, #32]
 80082e0:	182d      	adds	r5, r5, r0
 80082e2:	601d      	str	r5, [r3, #0]
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	1a36      	subs	r6, r6, r0
 80082e8:	601e      	str	r6, [r3, #0]
 80082ea:	0020      	movs	r0, r4
 80082ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082ee:	6161      	str	r1, [r4, #20]
 80082f0:	e7ea      	b.n	80082c8 <__d2b+0x54>
 80082f2:	a801      	add	r0, sp, #4
 80082f4:	f7ff fcdb 	bl	8007cae <__lo0bits>
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	2601      	movs	r6, #1
 80082fc:	6163      	str	r3, [r4, #20]
 80082fe:	3020      	adds	r0, #32
 8008300:	e7e7      	b.n	80082d2 <__d2b+0x5e>
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <__d2b+0xb8>)
 8008304:	18c0      	adds	r0, r0, r3
 8008306:	9b08      	ldr	r3, [sp, #32]
 8008308:	6018      	str	r0, [r3, #0]
 800830a:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <__d2b+0xbc>)
 800830c:	18f3      	adds	r3, r6, r3
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	18e3      	adds	r3, r4, r3
 8008312:	6958      	ldr	r0, [r3, #20]
 8008314:	f7ff fcaa 	bl	8007c6c <__hi0bits>
 8008318:	0176      	lsls	r6, r6, #5
 800831a:	e7e3      	b.n	80082e4 <__d2b+0x70>
 800831c:	0800a595 	.word	0x0800a595
 8008320:	0800a5a6 	.word	0x0800a5a6
 8008324:	0000030f 	.word	0x0000030f
 8008328:	fffffbcd 	.word	0xfffffbcd
 800832c:	fffffbce 	.word	0xfffffbce
 8008330:	3fffffff 	.word	0x3fffffff

08008334 <__ratio>:
 8008334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	000f      	movs	r7, r1
 800833a:	a904      	add	r1, sp, #16
 800833c:	0006      	movs	r6, r0
 800833e:	f7ff ff4d 	bl	80081dc <__b2d>
 8008342:	9000      	str	r0, [sp, #0]
 8008344:	9101      	str	r1, [sp, #4]
 8008346:	9b00      	ldr	r3, [sp, #0]
 8008348:	9c01      	ldr	r4, [sp, #4]
 800834a:	0038      	movs	r0, r7
 800834c:	a905      	add	r1, sp, #20
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	9403      	str	r4, [sp, #12]
 8008352:	f7ff ff43 	bl	80081dc <__b2d>
 8008356:	000d      	movs	r5, r1
 8008358:	0002      	movs	r2, r0
 800835a:	000b      	movs	r3, r1
 800835c:	6930      	ldr	r0, [r6, #16]
 800835e:	6939      	ldr	r1, [r7, #16]
 8008360:	9e04      	ldr	r6, [sp, #16]
 8008362:	1a40      	subs	r0, r0, r1
 8008364:	9905      	ldr	r1, [sp, #20]
 8008366:	0140      	lsls	r0, r0, #5
 8008368:	1a71      	subs	r1, r6, r1
 800836a:	1841      	adds	r1, r0, r1
 800836c:	0508      	lsls	r0, r1, #20
 800836e:	2900      	cmp	r1, #0
 8008370:	dd08      	ble.n	8008384 <__ratio+0x50>
 8008372:	9901      	ldr	r1, [sp, #4]
 8008374:	1841      	adds	r1, r0, r1
 8008376:	9103      	str	r1, [sp, #12]
 8008378:	9802      	ldr	r0, [sp, #8]
 800837a:	9903      	ldr	r1, [sp, #12]
 800837c:	f7f8 ff00 	bl	8001180 <__aeabi_ddiv>
 8008380:	b007      	add	sp, #28
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008384:	1a2b      	subs	r3, r5, r0
 8008386:	e7f7      	b.n	8008378 <__ratio+0x44>

08008388 <__copybits>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	0014      	movs	r4, r2
 800838c:	0005      	movs	r5, r0
 800838e:	3901      	subs	r1, #1
 8008390:	6913      	ldr	r3, [r2, #16]
 8008392:	1149      	asrs	r1, r1, #5
 8008394:	3101      	adds	r1, #1
 8008396:	0089      	lsls	r1, r1, #2
 8008398:	3414      	adds	r4, #20
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	1841      	adds	r1, r0, r1
 800839e:	18e3      	adds	r3, r4, r3
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d80d      	bhi.n	80083c0 <__copybits+0x38>
 80083a4:	0014      	movs	r4, r2
 80083a6:	3411      	adds	r4, #17
 80083a8:	2500      	movs	r5, #0
 80083aa:	429c      	cmp	r4, r3
 80083ac:	d803      	bhi.n	80083b6 <__copybits+0x2e>
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	3b11      	subs	r3, #17
 80083b2:	089b      	lsrs	r3, r3, #2
 80083b4:	009d      	lsls	r5, r3, #2
 80083b6:	2300      	movs	r3, #0
 80083b8:	1940      	adds	r0, r0, r5
 80083ba:	4281      	cmp	r1, r0
 80083bc:	d803      	bhi.n	80083c6 <__copybits+0x3e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	cc40      	ldmia	r4!, {r6}
 80083c2:	c540      	stmia	r5!, {r6}
 80083c4:	e7ec      	b.n	80083a0 <__copybits+0x18>
 80083c6:	c008      	stmia	r0!, {r3}
 80083c8:	e7f7      	b.n	80083ba <__copybits+0x32>

080083ca <__any_on>:
 80083ca:	0002      	movs	r2, r0
 80083cc:	6900      	ldr	r0, [r0, #16]
 80083ce:	b510      	push	{r4, lr}
 80083d0:	3214      	adds	r2, #20
 80083d2:	114b      	asrs	r3, r1, #5
 80083d4:	4298      	cmp	r0, r3
 80083d6:	db13      	blt.n	8008400 <__any_on+0x36>
 80083d8:	dd0c      	ble.n	80083f4 <__any_on+0x2a>
 80083da:	241f      	movs	r4, #31
 80083dc:	0008      	movs	r0, r1
 80083de:	4020      	ands	r0, r4
 80083e0:	4221      	tst	r1, r4
 80083e2:	d007      	beq.n	80083f4 <__any_on+0x2a>
 80083e4:	0099      	lsls	r1, r3, #2
 80083e6:	588c      	ldr	r4, [r1, r2]
 80083e8:	0021      	movs	r1, r4
 80083ea:	40c1      	lsrs	r1, r0
 80083ec:	4081      	lsls	r1, r0
 80083ee:	2001      	movs	r0, #1
 80083f0:	428c      	cmp	r4, r1
 80083f2:	d104      	bne.n	80083fe <__any_on+0x34>
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18d3      	adds	r3, r2, r3
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d803      	bhi.n	8008404 <__any_on+0x3a>
 80083fc:	2000      	movs	r0, #0
 80083fe:	bd10      	pop	{r4, pc}
 8008400:	0003      	movs	r3, r0
 8008402:	e7f7      	b.n	80083f4 <__any_on+0x2a>
 8008404:	3b04      	subs	r3, #4
 8008406:	6819      	ldr	r1, [r3, #0]
 8008408:	2900      	cmp	r1, #0
 800840a:	d0f5      	beq.n	80083f8 <__any_on+0x2e>
 800840c:	2001      	movs	r0, #1
 800840e:	e7f6      	b.n	80083fe <__any_on+0x34>

08008410 <sulp>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	0016      	movs	r6, r2
 8008414:	000d      	movs	r5, r1
 8008416:	f7ff fec1 	bl	800819c <__ulp>
 800841a:	2e00      	cmp	r6, #0
 800841c:	d00d      	beq.n	800843a <sulp+0x2a>
 800841e:	236b      	movs	r3, #107	@ 0x6b
 8008420:	006a      	lsls	r2, r5, #1
 8008422:	0d52      	lsrs	r2, r2, #21
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd07      	ble.n	800843a <sulp+0x2a>
 800842a:	2400      	movs	r4, #0
 800842c:	4a03      	ldr	r2, [pc, #12]	@ (800843c <sulp+0x2c>)
 800842e:	051b      	lsls	r3, r3, #20
 8008430:	189d      	adds	r5, r3, r2
 8008432:	002b      	movs	r3, r5
 8008434:	0022      	movs	r2, r4
 8008436:	f7f9 fae7 	bl	8001a08 <__aeabi_dmul>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	3ff00000 	.word	0x3ff00000

08008440 <_strtod_l>:
 8008440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008442:	b0a3      	sub	sp, #140	@ 0x8c
 8008444:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008446:	2200      	movs	r2, #0
 8008448:	2600      	movs	r6, #0
 800844a:	2700      	movs	r7, #0
 800844c:	9005      	str	r0, [sp, #20]
 800844e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008450:	921e      	str	r2, [sp, #120]	@ 0x78
 8008452:	911d      	str	r1, [sp, #116]	@ 0x74
 8008454:	780a      	ldrb	r2, [r1, #0]
 8008456:	2a2b      	cmp	r2, #43	@ 0x2b
 8008458:	d053      	beq.n	8008502 <_strtod_l+0xc2>
 800845a:	d83f      	bhi.n	80084dc <_strtod_l+0x9c>
 800845c:	2a0d      	cmp	r2, #13
 800845e:	d839      	bhi.n	80084d4 <_strtod_l+0x94>
 8008460:	2a08      	cmp	r2, #8
 8008462:	d839      	bhi.n	80084d8 <_strtod_l+0x98>
 8008464:	2a00      	cmp	r2, #0
 8008466:	d042      	beq.n	80084ee <_strtod_l+0xae>
 8008468:	2200      	movs	r2, #0
 800846a:	9212      	str	r2, [sp, #72]	@ 0x48
 800846c:	2100      	movs	r1, #0
 800846e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008470:	910c      	str	r1, [sp, #48]	@ 0x30
 8008472:	782a      	ldrb	r2, [r5, #0]
 8008474:	2a30      	cmp	r2, #48	@ 0x30
 8008476:	d000      	beq.n	800847a <_strtod_l+0x3a>
 8008478:	e083      	b.n	8008582 <_strtod_l+0x142>
 800847a:	786a      	ldrb	r2, [r5, #1]
 800847c:	3120      	adds	r1, #32
 800847e:	438a      	bics	r2, r1
 8008480:	2a58      	cmp	r2, #88	@ 0x58
 8008482:	d000      	beq.n	8008486 <_strtod_l+0x46>
 8008484:	e073      	b.n	800856e <_strtod_l+0x12e>
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800848a:	4a95      	ldr	r2, [pc, #596]	@ (80086e0 <_strtod_l+0x2a0>)
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	ab1e      	add	r3, sp, #120	@ 0x78
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	9805      	ldr	r0, [sp, #20]
 8008494:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008496:	a91d      	add	r1, sp, #116	@ 0x74
 8008498:	f001 f964 	bl	8009764 <__gethex>
 800849c:	230f      	movs	r3, #15
 800849e:	0002      	movs	r2, r0
 80084a0:	401a      	ands	r2, r3
 80084a2:	0004      	movs	r4, r0
 80084a4:	9206      	str	r2, [sp, #24]
 80084a6:	4218      	tst	r0, r3
 80084a8:	d005      	beq.n	80084b6 <_strtod_l+0x76>
 80084aa:	2a06      	cmp	r2, #6
 80084ac:	d12b      	bne.n	8008506 <_strtod_l+0xc6>
 80084ae:	2300      	movs	r3, #0
 80084b0:	3501      	adds	r5, #1
 80084b2:	951d      	str	r5, [sp, #116]	@ 0x74
 80084b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80084b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <_strtod_l+0x82>
 80084bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d019      	beq.n	80084fc <_strtod_l+0xbc>
 80084c8:	2380      	movs	r3, #128	@ 0x80
 80084ca:	0030      	movs	r0, r6
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	18f9      	adds	r1, r7, r3
 80084d0:	b023      	add	sp, #140	@ 0x8c
 80084d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d4:	2a20      	cmp	r2, #32
 80084d6:	d1c7      	bne.n	8008468 <_strtod_l+0x28>
 80084d8:	3101      	adds	r1, #1
 80084da:	e7ba      	b.n	8008452 <_strtod_l+0x12>
 80084dc:	2a2d      	cmp	r2, #45	@ 0x2d
 80084de:	d1c3      	bne.n	8008468 <_strtod_l+0x28>
 80084e0:	3a2c      	subs	r2, #44	@ 0x2c
 80084e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80084e4:	1c4a      	adds	r2, r1, #1
 80084e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80084e8:	784a      	ldrb	r2, [r1, #1]
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	d1be      	bne.n	800846c <_strtod_l+0x2c>
 80084ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f0:	931d      	str	r3, [sp, #116]	@ 0x74
 80084f2:	2300      	movs	r3, #0
 80084f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80084f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1df      	bne.n	80084bc <_strtod_l+0x7c>
 80084fc:	0030      	movs	r0, r6
 80084fe:	0039      	movs	r1, r7
 8008500:	e7e6      	b.n	80084d0 <_strtod_l+0x90>
 8008502:	2200      	movs	r2, #0
 8008504:	e7ed      	b.n	80084e2 <_strtod_l+0xa2>
 8008506:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008508:	2a00      	cmp	r2, #0
 800850a:	d007      	beq.n	800851c <_strtod_l+0xdc>
 800850c:	2135      	movs	r1, #53	@ 0x35
 800850e:	a820      	add	r0, sp, #128	@ 0x80
 8008510:	f7ff ff3a 	bl	8008388 <__copybits>
 8008514:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008516:	9805      	ldr	r0, [sp, #20]
 8008518:	f7ff faf4 	bl	8007b04 <_Bfree>
 800851c:	9806      	ldr	r0, [sp, #24]
 800851e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008520:	3801      	subs	r0, #1
 8008522:	2804      	cmp	r0, #4
 8008524:	d806      	bhi.n	8008534 <_strtod_l+0xf4>
 8008526:	f7f7 fdf7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800852a:	0312      	.short	0x0312
 800852c:	1e1c      	.short	0x1e1c
 800852e:	12          	.byte	0x12
 800852f:	00          	.byte	0x00
 8008530:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008532:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008534:	05e4      	lsls	r4, r4, #23
 8008536:	d502      	bpl.n	800853e <_strtod_l+0xfe>
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	431f      	orrs	r7, r3
 800853e:	4b69      	ldr	r3, [pc, #420]	@ (80086e4 <_strtod_l+0x2a4>)
 8008540:	423b      	tst	r3, r7
 8008542:	d1b8      	bne.n	80084b6 <_strtod_l+0x76>
 8008544:	f7fe fad6 	bl	8006af4 <__errno>
 8008548:	2322      	movs	r3, #34	@ 0x22
 800854a:	6003      	str	r3, [r0, #0]
 800854c:	e7b3      	b.n	80084b6 <_strtod_l+0x76>
 800854e:	4966      	ldr	r1, [pc, #408]	@ (80086e8 <_strtod_l+0x2a8>)
 8008550:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008552:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008554:	400a      	ands	r2, r1
 8008556:	4965      	ldr	r1, [pc, #404]	@ (80086ec <_strtod_l+0x2ac>)
 8008558:	185b      	adds	r3, r3, r1
 800855a:	051b      	lsls	r3, r3, #20
 800855c:	431a      	orrs	r2, r3
 800855e:	0017      	movs	r7, r2
 8008560:	e7e8      	b.n	8008534 <_strtod_l+0xf4>
 8008562:	4f60      	ldr	r7, [pc, #384]	@ (80086e4 <_strtod_l+0x2a4>)
 8008564:	e7e6      	b.n	8008534 <_strtod_l+0xf4>
 8008566:	2601      	movs	r6, #1
 8008568:	4f61      	ldr	r7, [pc, #388]	@ (80086f0 <_strtod_l+0x2b0>)
 800856a:	4276      	negs	r6, r6
 800856c:	e7e2      	b.n	8008534 <_strtod_l+0xf4>
 800856e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	921d      	str	r2, [sp, #116]	@ 0x74
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b30      	cmp	r3, #48	@ 0x30
 8008578:	d0f9      	beq.n	800856e <_strtod_l+0x12e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d09b      	beq.n	80084b6 <_strtod_l+0x76>
 800857e:	2301      	movs	r3, #1
 8008580:	930c      	str	r3, [sp, #48]	@ 0x30
 8008582:	2500      	movs	r5, #0
 8008584:	220a      	movs	r2, #10
 8008586:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008588:	950d      	str	r5, [sp, #52]	@ 0x34
 800858a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800858c:	9508      	str	r5, [sp, #32]
 800858e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008590:	7804      	ldrb	r4, [r0, #0]
 8008592:	0023      	movs	r3, r4
 8008594:	3b30      	subs	r3, #48	@ 0x30
 8008596:	b2d9      	uxtb	r1, r3
 8008598:	2909      	cmp	r1, #9
 800859a:	d927      	bls.n	80085ec <_strtod_l+0x1ac>
 800859c:	2201      	movs	r2, #1
 800859e:	4955      	ldr	r1, [pc, #340]	@ (80086f4 <_strtod_l+0x2b4>)
 80085a0:	f000 fff8 	bl	8009594 <strncmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d031      	beq.n	800860c <_strtod_l+0x1cc>
 80085a8:	2000      	movs	r0, #0
 80085aa:	0023      	movs	r3, r4
 80085ac:	4684      	mov	ip, r0
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	900e      	str	r0, [sp, #56]	@ 0x38
 80085b2:	9206      	str	r2, [sp, #24]
 80085b4:	2220      	movs	r2, #32
 80085b6:	0019      	movs	r1, r3
 80085b8:	4391      	bics	r1, r2
 80085ba:	000a      	movs	r2, r1
 80085bc:	2100      	movs	r1, #0
 80085be:	9107      	str	r1, [sp, #28]
 80085c0:	2a45      	cmp	r2, #69	@ 0x45
 80085c2:	d000      	beq.n	80085c6 <_strtod_l+0x186>
 80085c4:	e0c0      	b.n	8008748 <_strtod_l+0x308>
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085ca:	4303      	orrs	r3, r0
 80085cc:	4313      	orrs	r3, r2
 80085ce:	428b      	cmp	r3, r1
 80085d0:	d08d      	beq.n	80084ee <_strtod_l+0xae>
 80085d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d6:	3301      	adds	r3, #1
 80085d8:	931d      	str	r3, [sp, #116]	@ 0x74
 80085da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b2b      	cmp	r3, #43	@ 0x2b
 80085e0:	d070      	beq.n	80086c4 <_strtod_l+0x284>
 80085e2:	000c      	movs	r4, r1
 80085e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80085e6:	d173      	bne.n	80086d0 <_strtod_l+0x290>
 80085e8:	2401      	movs	r4, #1
 80085ea:	e06c      	b.n	80086c6 <_strtod_l+0x286>
 80085ec:	9908      	ldr	r1, [sp, #32]
 80085ee:	2908      	cmp	r1, #8
 80085f0:	dc09      	bgt.n	8008606 <_strtod_l+0x1c6>
 80085f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80085f4:	4351      	muls	r1, r2
 80085f6:	185b      	adds	r3, r3, r1
 80085f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	3001      	adds	r0, #1
 80085fe:	3301      	adds	r3, #1
 8008600:	9308      	str	r3, [sp, #32]
 8008602:	901d      	str	r0, [sp, #116]	@ 0x74
 8008604:	e7c3      	b.n	800858e <_strtod_l+0x14e>
 8008606:	4355      	muls	r5, r2
 8008608:	195d      	adds	r5, r3, r5
 800860a:	e7f6      	b.n	80085fa <_strtod_l+0x1ba>
 800860c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	921d      	str	r2, [sp, #116]	@ 0x74
 8008612:	9a08      	ldr	r2, [sp, #32]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2a00      	cmp	r2, #0
 8008618:	d03a      	beq.n	8008690 <_strtod_l+0x250>
 800861a:	900e      	str	r0, [sp, #56]	@ 0x38
 800861c:	9206      	str	r2, [sp, #24]
 800861e:	001a      	movs	r2, r3
 8008620:	3a30      	subs	r2, #48	@ 0x30
 8008622:	2a09      	cmp	r2, #9
 8008624:	d912      	bls.n	800864c <_strtod_l+0x20c>
 8008626:	2201      	movs	r2, #1
 8008628:	4694      	mov	ip, r2
 800862a:	e7c3      	b.n	80085b4 <_strtod_l+0x174>
 800862c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800862e:	3001      	adds	r0, #1
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	921d      	str	r2, [sp, #116]	@ 0x74
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b30      	cmp	r3, #48	@ 0x30
 8008638:	d0f8      	beq.n	800862c <_strtod_l+0x1ec>
 800863a:	001a      	movs	r2, r3
 800863c:	3a31      	subs	r2, #49	@ 0x31
 800863e:	2a08      	cmp	r2, #8
 8008640:	d83b      	bhi.n	80086ba <_strtod_l+0x27a>
 8008642:	900e      	str	r0, [sp, #56]	@ 0x38
 8008644:	2000      	movs	r0, #0
 8008646:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008648:	9006      	str	r0, [sp, #24]
 800864a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800864c:	001a      	movs	r2, r3
 800864e:	1c41      	adds	r1, r0, #1
 8008650:	3a30      	subs	r2, #48	@ 0x30
 8008652:	2b30      	cmp	r3, #48	@ 0x30
 8008654:	d016      	beq.n	8008684 <_strtod_l+0x244>
 8008656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008658:	185b      	adds	r3, r3, r1
 800865a:	930e      	str	r3, [sp, #56]	@ 0x38
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	210a      	movs	r1, #10
 8008660:	469c      	mov	ip, r3
 8008662:	4484      	add	ip, r0
 8008664:	459c      	cmp	ip, r3
 8008666:	d115      	bne.n	8008694 <_strtod_l+0x254>
 8008668:	9906      	ldr	r1, [sp, #24]
 800866a:	9b06      	ldr	r3, [sp, #24]
 800866c:	3101      	adds	r1, #1
 800866e:	1809      	adds	r1, r1, r0
 8008670:	181b      	adds	r3, r3, r0
 8008672:	9106      	str	r1, [sp, #24]
 8008674:	2b08      	cmp	r3, #8
 8008676:	dc19      	bgt.n	80086ac <_strtod_l+0x26c>
 8008678:	230a      	movs	r3, #10
 800867a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800867c:	434b      	muls	r3, r1
 800867e:	2100      	movs	r1, #0
 8008680:	18d3      	adds	r3, r2, r3
 8008682:	930d      	str	r3, [sp, #52]	@ 0x34
 8008684:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008686:	0008      	movs	r0, r1
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	921d      	str	r2, [sp, #116]	@ 0x74
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	e7c6      	b.n	800861e <_strtod_l+0x1de>
 8008690:	9808      	ldr	r0, [sp, #32]
 8008692:	e7d0      	b.n	8008636 <_strtod_l+0x1f6>
 8008694:	1c5c      	adds	r4, r3, #1
 8008696:	2b08      	cmp	r3, #8
 8008698:	dc04      	bgt.n	80086a4 <_strtod_l+0x264>
 800869a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800869c:	434b      	muls	r3, r1
 800869e:	930d      	str	r3, [sp, #52]	@ 0x34
 80086a0:	0023      	movs	r3, r4
 80086a2:	e7df      	b.n	8008664 <_strtod_l+0x224>
 80086a4:	2c10      	cmp	r4, #16
 80086a6:	dcfb      	bgt.n	80086a0 <_strtod_l+0x260>
 80086a8:	434d      	muls	r5, r1
 80086aa:	e7f9      	b.n	80086a0 <_strtod_l+0x260>
 80086ac:	2100      	movs	r1, #0
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	dce8      	bgt.n	8008684 <_strtod_l+0x244>
 80086b2:	230a      	movs	r3, #10
 80086b4:	435d      	muls	r5, r3
 80086b6:	1955      	adds	r5, r2, r5
 80086b8:	e7e4      	b.n	8008684 <_strtod_l+0x244>
 80086ba:	2200      	movs	r2, #0
 80086bc:	920e      	str	r2, [sp, #56]	@ 0x38
 80086be:	9206      	str	r2, [sp, #24]
 80086c0:	3201      	adds	r2, #1
 80086c2:	e7b1      	b.n	8008628 <_strtod_l+0x1e8>
 80086c4:	2400      	movs	r4, #0
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	3302      	adds	r3, #2
 80086ca:	931d      	str	r3, [sp, #116]	@ 0x74
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	789b      	ldrb	r3, [r3, #2]
 80086d0:	001a      	movs	r2, r3
 80086d2:	3a30      	subs	r2, #48	@ 0x30
 80086d4:	2a09      	cmp	r2, #9
 80086d6:	d913      	bls.n	8008700 <_strtod_l+0x2c0>
 80086d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086da:	921d      	str	r2, [sp, #116]	@ 0x74
 80086dc:	2200      	movs	r2, #0
 80086de:	e032      	b.n	8008746 <_strtod_l+0x306>
 80086e0:	0800a718 	.word	0x0800a718
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	ffefffff 	.word	0xffefffff
 80086ec:	00000433 	.word	0x00000433
 80086f0:	7fffffff 	.word	0x7fffffff
 80086f4:	0800a700 	.word	0x0800a700
 80086f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	921d      	str	r2, [sp, #116]	@ 0x74
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b30      	cmp	r3, #48	@ 0x30
 8008702:	d0f9      	beq.n	80086f8 <_strtod_l+0x2b8>
 8008704:	2200      	movs	r2, #0
 8008706:	9207      	str	r2, [sp, #28]
 8008708:	001a      	movs	r2, r3
 800870a:	3a31      	subs	r2, #49	@ 0x31
 800870c:	2a08      	cmp	r2, #8
 800870e:	d81b      	bhi.n	8008748 <_strtod_l+0x308>
 8008710:	3b30      	subs	r3, #48	@ 0x30
 8008712:	9310      	str	r3, [sp, #64]	@ 0x40
 8008714:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008716:	9307      	str	r3, [sp, #28]
 8008718:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800871a:	1c59      	adds	r1, r3, #1
 800871c:	911d      	str	r1, [sp, #116]	@ 0x74
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	001a      	movs	r2, r3
 8008722:	3a30      	subs	r2, #48	@ 0x30
 8008724:	2a09      	cmp	r2, #9
 8008726:	d93a      	bls.n	800879e <_strtod_l+0x35e>
 8008728:	9a07      	ldr	r2, [sp, #28]
 800872a:	1a8a      	subs	r2, r1, r2
 800872c:	49b4      	ldr	r1, [pc, #720]	@ (8008a00 <_strtod_l+0x5c0>)
 800872e:	9107      	str	r1, [sp, #28]
 8008730:	2a08      	cmp	r2, #8
 8008732:	dc04      	bgt.n	800873e <_strtod_l+0x2fe>
 8008734:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008736:	9207      	str	r2, [sp, #28]
 8008738:	428a      	cmp	r2, r1
 800873a:	dd00      	ble.n	800873e <_strtod_l+0x2fe>
 800873c:	9107      	str	r1, [sp, #28]
 800873e:	2c00      	cmp	r4, #0
 8008740:	d002      	beq.n	8008748 <_strtod_l+0x308>
 8008742:	9a07      	ldr	r2, [sp, #28]
 8008744:	4252      	negs	r2, r2
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	9a06      	ldr	r2, [sp, #24]
 800874a:	2a00      	cmp	r2, #0
 800874c:	d14d      	bne.n	80087ea <_strtod_l+0x3aa>
 800874e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008750:	4310      	orrs	r0, r2
 8008752:	d000      	beq.n	8008756 <_strtod_l+0x316>
 8008754:	e6af      	b.n	80084b6 <_strtod_l+0x76>
 8008756:	4662      	mov	r2, ip
 8008758:	2a00      	cmp	r2, #0
 800875a:	d000      	beq.n	800875e <_strtod_l+0x31e>
 800875c:	e6c7      	b.n	80084ee <_strtod_l+0xae>
 800875e:	2b69      	cmp	r3, #105	@ 0x69
 8008760:	d027      	beq.n	80087b2 <_strtod_l+0x372>
 8008762:	dc23      	bgt.n	80087ac <_strtod_l+0x36c>
 8008764:	2b49      	cmp	r3, #73	@ 0x49
 8008766:	d024      	beq.n	80087b2 <_strtod_l+0x372>
 8008768:	2b4e      	cmp	r3, #78	@ 0x4e
 800876a:	d000      	beq.n	800876e <_strtod_l+0x32e>
 800876c:	e6bf      	b.n	80084ee <_strtod_l+0xae>
 800876e:	49a5      	ldr	r1, [pc, #660]	@ (8008a04 <_strtod_l+0x5c4>)
 8008770:	a81d      	add	r0, sp, #116	@ 0x74
 8008772:	f001 fa2d 	bl	8009bd0 <__match>
 8008776:	2800      	cmp	r0, #0
 8008778:	d100      	bne.n	800877c <_strtod_l+0x33c>
 800877a:	e6b8      	b.n	80084ee <_strtod_l+0xae>
 800877c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b28      	cmp	r3, #40	@ 0x28
 8008782:	d12c      	bne.n	80087de <_strtod_l+0x39e>
 8008784:	49a0      	ldr	r1, [pc, #640]	@ (8008a08 <_strtod_l+0x5c8>)
 8008786:	aa20      	add	r2, sp, #128	@ 0x80
 8008788:	a81d      	add	r0, sp, #116	@ 0x74
 800878a:	f001 fa35 	bl	8009bf8 <__hexnan>
 800878e:	2805      	cmp	r0, #5
 8008790:	d125      	bne.n	80087de <_strtod_l+0x39e>
 8008792:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008794:	4a9d      	ldr	r2, [pc, #628]	@ (8008a0c <_strtod_l+0x5cc>)
 8008796:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008798:	431a      	orrs	r2, r3
 800879a:	0017      	movs	r7, r2
 800879c:	e68b      	b.n	80084b6 <_strtod_l+0x76>
 800879e:	220a      	movs	r2, #10
 80087a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80087a2:	434a      	muls	r2, r1
 80087a4:	18d2      	adds	r2, r2, r3
 80087a6:	3a30      	subs	r2, #48	@ 0x30
 80087a8:	9210      	str	r2, [sp, #64]	@ 0x40
 80087aa:	e7b5      	b.n	8008718 <_strtod_l+0x2d8>
 80087ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80087ae:	d0de      	beq.n	800876e <_strtod_l+0x32e>
 80087b0:	e69d      	b.n	80084ee <_strtod_l+0xae>
 80087b2:	4997      	ldr	r1, [pc, #604]	@ (8008a10 <_strtod_l+0x5d0>)
 80087b4:	a81d      	add	r0, sp, #116	@ 0x74
 80087b6:	f001 fa0b 	bl	8009bd0 <__match>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d100      	bne.n	80087c0 <_strtod_l+0x380>
 80087be:	e696      	b.n	80084ee <_strtod_l+0xae>
 80087c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087c2:	4994      	ldr	r1, [pc, #592]	@ (8008a14 <_strtod_l+0x5d4>)
 80087c4:	3b01      	subs	r3, #1
 80087c6:	a81d      	add	r0, sp, #116	@ 0x74
 80087c8:	931d      	str	r3, [sp, #116]	@ 0x74
 80087ca:	f001 fa01 	bl	8009bd0 <__match>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d102      	bne.n	80087d8 <_strtod_l+0x398>
 80087d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087d4:	3301      	adds	r3, #1
 80087d6:	931d      	str	r3, [sp, #116]	@ 0x74
 80087d8:	2600      	movs	r6, #0
 80087da:	4f8c      	ldr	r7, [pc, #560]	@ (8008a0c <_strtod_l+0x5cc>)
 80087dc:	e66b      	b.n	80084b6 <_strtod_l+0x76>
 80087de:	488e      	ldr	r0, [pc, #568]	@ (8008a18 <_strtod_l+0x5d8>)
 80087e0:	f000 ff06 	bl	80095f0 <nan>
 80087e4:	0006      	movs	r6, r0
 80087e6:	000f      	movs	r7, r1
 80087e8:	e665      	b.n	80084b6 <_strtod_l+0x76>
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <_strtod_l+0x3bc>
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	9c06      	ldr	r4, [sp, #24]
 80087fe:	2c10      	cmp	r4, #16
 8008800:	dd00      	ble.n	8008804 <_strtod_l+0x3c4>
 8008802:	2410      	movs	r4, #16
 8008804:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008806:	f7f9 ffef 	bl	80027e8 <__aeabi_ui2d>
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	0006      	movs	r6, r0
 800880e:	000f      	movs	r7, r1
 8008810:	2b09      	cmp	r3, #9
 8008812:	dc13      	bgt.n	800883c <_strtod_l+0x3fc>
 8008814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008816:	2b00      	cmp	r3, #0
 8008818:	d100      	bne.n	800881c <_strtod_l+0x3dc>
 800881a:	e64c      	b.n	80084b6 <_strtod_l+0x76>
 800881c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800881e:	2b00      	cmp	r3, #0
 8008820:	dc00      	bgt.n	8008824 <_strtod_l+0x3e4>
 8008822:	e07e      	b.n	8008922 <_strtod_l+0x4e2>
 8008824:	2b16      	cmp	r3, #22
 8008826:	dc63      	bgt.n	80088f0 <_strtod_l+0x4b0>
 8008828:	497c      	ldr	r1, [pc, #496]	@ (8008a1c <_strtod_l+0x5dc>)
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	18c9      	adds	r1, r1, r3
 800882e:	0032      	movs	r2, r6
 8008830:	6808      	ldr	r0, [r1, #0]
 8008832:	6849      	ldr	r1, [r1, #4]
 8008834:	003b      	movs	r3, r7
 8008836:	f7f9 f8e7 	bl	8001a08 <__aeabi_dmul>
 800883a:	e7d3      	b.n	80087e4 <_strtod_l+0x3a4>
 800883c:	0022      	movs	r2, r4
 800883e:	4b77      	ldr	r3, [pc, #476]	@ (8008a1c <_strtod_l+0x5dc>)
 8008840:	3a09      	subs	r2, #9
 8008842:	00d2      	lsls	r2, r2, #3
 8008844:	189b      	adds	r3, r3, r2
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f7f9 f8dd 	bl	8001a08 <__aeabi_dmul>
 800884e:	0006      	movs	r6, r0
 8008850:	0028      	movs	r0, r5
 8008852:	000f      	movs	r7, r1
 8008854:	f7f9 ffc8 	bl	80027e8 <__aeabi_ui2d>
 8008858:	000b      	movs	r3, r1
 800885a:	0002      	movs	r2, r0
 800885c:	0039      	movs	r1, r7
 800885e:	0030      	movs	r0, r6
 8008860:	f7f8 f92a 	bl	8000ab8 <__aeabi_dadd>
 8008864:	9b06      	ldr	r3, [sp, #24]
 8008866:	0006      	movs	r6, r0
 8008868:	000f      	movs	r7, r1
 800886a:	2b0f      	cmp	r3, #15
 800886c:	ddd2      	ble.n	8008814 <_strtod_l+0x3d4>
 800886e:	9b06      	ldr	r3, [sp, #24]
 8008870:	1b1c      	subs	r4, r3, r4
 8008872:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008874:	18e4      	adds	r4, r4, r3
 8008876:	2c00      	cmp	r4, #0
 8008878:	dc00      	bgt.n	800887c <_strtod_l+0x43c>
 800887a:	e09b      	b.n	80089b4 <_strtod_l+0x574>
 800887c:	220f      	movs	r2, #15
 800887e:	0023      	movs	r3, r4
 8008880:	4013      	ands	r3, r2
 8008882:	4214      	tst	r4, r2
 8008884:	d00a      	beq.n	800889c <_strtod_l+0x45c>
 8008886:	4965      	ldr	r1, [pc, #404]	@ (8008a1c <_strtod_l+0x5dc>)
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	18c9      	adds	r1, r1, r3
 800888c:	0032      	movs	r2, r6
 800888e:	6808      	ldr	r0, [r1, #0]
 8008890:	6849      	ldr	r1, [r1, #4]
 8008892:	003b      	movs	r3, r7
 8008894:	f7f9 f8b8 	bl	8001a08 <__aeabi_dmul>
 8008898:	0006      	movs	r6, r0
 800889a:	000f      	movs	r7, r1
 800889c:	230f      	movs	r3, #15
 800889e:	439c      	bics	r4, r3
 80088a0:	d073      	beq.n	800898a <_strtod_l+0x54a>
 80088a2:	3326      	adds	r3, #38	@ 0x26
 80088a4:	33ff      	adds	r3, #255	@ 0xff
 80088a6:	429c      	cmp	r4, r3
 80088a8:	dd4b      	ble.n	8008942 <_strtod_l+0x502>
 80088aa:	2300      	movs	r3, #0
 80088ac:	9306      	str	r3, [sp, #24]
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80088b2:	9308      	str	r3, [sp, #32]
 80088b4:	2322      	movs	r3, #34	@ 0x22
 80088b6:	2600      	movs	r6, #0
 80088b8:	9a05      	ldr	r2, [sp, #20]
 80088ba:	4f54      	ldr	r7, [pc, #336]	@ (8008a0c <_strtod_l+0x5cc>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088c0:	42b3      	cmp	r3, r6
 80088c2:	d100      	bne.n	80088c6 <_strtod_l+0x486>
 80088c4:	e5f7      	b.n	80084b6 <_strtod_l+0x76>
 80088c6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80088c8:	9805      	ldr	r0, [sp, #20]
 80088ca:	f7ff f91b 	bl	8007b04 <_Bfree>
 80088ce:	9908      	ldr	r1, [sp, #32]
 80088d0:	9805      	ldr	r0, [sp, #20]
 80088d2:	f7ff f917 	bl	8007b04 <_Bfree>
 80088d6:	9907      	ldr	r1, [sp, #28]
 80088d8:	9805      	ldr	r0, [sp, #20]
 80088da:	f7ff f913 	bl	8007b04 <_Bfree>
 80088de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80088e0:	9805      	ldr	r0, [sp, #20]
 80088e2:	f7ff f90f 	bl	8007b04 <_Bfree>
 80088e6:	9906      	ldr	r1, [sp, #24]
 80088e8:	9805      	ldr	r0, [sp, #20]
 80088ea:	f7ff f90b 	bl	8007b04 <_Bfree>
 80088ee:	e5e2      	b.n	80084b6 <_strtod_l+0x76>
 80088f0:	2325      	movs	r3, #37	@ 0x25
 80088f2:	9a06      	ldr	r2, [sp, #24]
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088f8:	4293      	cmp	r3, r2
 80088fa:	dbb8      	blt.n	800886e <_strtod_l+0x42e>
 80088fc:	240f      	movs	r4, #15
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	4d46      	ldr	r5, [pc, #280]	@ (8008a1c <_strtod_l+0x5dc>)
 8008902:	1ae4      	subs	r4, r4, r3
 8008904:	00e1      	lsls	r1, r4, #3
 8008906:	1869      	adds	r1, r5, r1
 8008908:	0032      	movs	r2, r6
 800890a:	6808      	ldr	r0, [r1, #0]
 800890c:	6849      	ldr	r1, [r1, #4]
 800890e:	003b      	movs	r3, r7
 8008910:	f7f9 f87a 	bl	8001a08 <__aeabi_dmul>
 8008914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008916:	1b1c      	subs	r4, r3, r4
 8008918:	00e4      	lsls	r4, r4, #3
 800891a:	192d      	adds	r5, r5, r4
 800891c:	682a      	ldr	r2, [r5, #0]
 800891e:	686b      	ldr	r3, [r5, #4]
 8008920:	e789      	b.n	8008836 <_strtod_l+0x3f6>
 8008922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008924:	3316      	adds	r3, #22
 8008926:	dba2      	blt.n	800886e <_strtod_l+0x42e>
 8008928:	9907      	ldr	r1, [sp, #28]
 800892a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800892c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a1c <_strtod_l+0x5dc>)
 800892e:	1a52      	subs	r2, r2, r1
 8008930:	00d2      	lsls	r2, r2, #3
 8008932:	189b      	adds	r3, r3, r2
 8008934:	0030      	movs	r0, r6
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	0039      	movs	r1, r7
 800893c:	f7f8 fc20 	bl	8001180 <__aeabi_ddiv>
 8008940:	e750      	b.n	80087e4 <_strtod_l+0x3a4>
 8008942:	2300      	movs	r3, #0
 8008944:	0030      	movs	r0, r6
 8008946:	0039      	movs	r1, r7
 8008948:	4d35      	ldr	r5, [pc, #212]	@ (8008a20 <_strtod_l+0x5e0>)
 800894a:	1124      	asrs	r4, r4, #4
 800894c:	9309      	str	r3, [sp, #36]	@ 0x24
 800894e:	2c01      	cmp	r4, #1
 8008950:	dc1e      	bgt.n	8008990 <_strtod_l+0x550>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <_strtod_l+0x51a>
 8008956:	0006      	movs	r6, r0
 8008958:	000f      	movs	r7, r1
 800895a:	4b32      	ldr	r3, [pc, #200]	@ (8008a24 <_strtod_l+0x5e4>)
 800895c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800895e:	18ff      	adds	r7, r7, r3
 8008960:	4b2f      	ldr	r3, [pc, #188]	@ (8008a20 <_strtod_l+0x5e0>)
 8008962:	00d5      	lsls	r5, r2, #3
 8008964:	195d      	adds	r5, r3, r5
 8008966:	0032      	movs	r2, r6
 8008968:	6828      	ldr	r0, [r5, #0]
 800896a:	6869      	ldr	r1, [r5, #4]
 800896c:	003b      	movs	r3, r7
 800896e:	f7f9 f84b 	bl	8001a08 <__aeabi_dmul>
 8008972:	4b26      	ldr	r3, [pc, #152]	@ (8008a0c <_strtod_l+0x5cc>)
 8008974:	4a2c      	ldr	r2, [pc, #176]	@ (8008a28 <_strtod_l+0x5e8>)
 8008976:	0006      	movs	r6, r0
 8008978:	400b      	ands	r3, r1
 800897a:	4293      	cmp	r3, r2
 800897c:	d895      	bhi.n	80088aa <_strtod_l+0x46a>
 800897e:	4a2b      	ldr	r2, [pc, #172]	@ (8008a2c <_strtod_l+0x5ec>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d913      	bls.n	80089ac <_strtod_l+0x56c>
 8008984:	2601      	movs	r6, #1
 8008986:	4f2a      	ldr	r7, [pc, #168]	@ (8008a30 <_strtod_l+0x5f0>)
 8008988:	4276      	negs	r6, r6
 800898a:	2300      	movs	r3, #0
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	e086      	b.n	8008a9e <_strtod_l+0x65e>
 8008990:	2201      	movs	r2, #1
 8008992:	4214      	tst	r4, r2
 8008994:	d004      	beq.n	80089a0 <_strtod_l+0x560>
 8008996:	682a      	ldr	r2, [r5, #0]
 8008998:	686b      	ldr	r3, [r5, #4]
 800899a:	f7f9 f835 	bl	8001a08 <__aeabi_dmul>
 800899e:	2301      	movs	r3, #1
 80089a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089a2:	1064      	asrs	r4, r4, #1
 80089a4:	3201      	adds	r2, #1
 80089a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a8:	3508      	adds	r5, #8
 80089aa:	e7d0      	b.n	800894e <_strtod_l+0x50e>
 80089ac:	23d4      	movs	r3, #212	@ 0xd4
 80089ae:	049b      	lsls	r3, r3, #18
 80089b0:	18cf      	adds	r7, r1, r3
 80089b2:	e7ea      	b.n	800898a <_strtod_l+0x54a>
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d0e8      	beq.n	800898a <_strtod_l+0x54a>
 80089b8:	4264      	negs	r4, r4
 80089ba:	230f      	movs	r3, #15
 80089bc:	0022      	movs	r2, r4
 80089be:	401a      	ands	r2, r3
 80089c0:	421c      	tst	r4, r3
 80089c2:	d00a      	beq.n	80089da <_strtod_l+0x59a>
 80089c4:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <_strtod_l+0x5dc>)
 80089c6:	00d2      	lsls	r2, r2, #3
 80089c8:	189b      	adds	r3, r3, r2
 80089ca:	0030      	movs	r0, r6
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	0039      	movs	r1, r7
 80089d2:	f7f8 fbd5 	bl	8001180 <__aeabi_ddiv>
 80089d6:	0006      	movs	r6, r0
 80089d8:	000f      	movs	r7, r1
 80089da:	1124      	asrs	r4, r4, #4
 80089dc:	d0d5      	beq.n	800898a <_strtod_l+0x54a>
 80089de:	2c1f      	cmp	r4, #31
 80089e0:	dd28      	ble.n	8008a34 <_strtod_l+0x5f4>
 80089e2:	2300      	movs	r3, #0
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80089ea:	9308      	str	r3, [sp, #32]
 80089ec:	2322      	movs	r3, #34	@ 0x22
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	2600      	movs	r6, #0
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089f6:	2700      	movs	r7, #0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d000      	beq.n	80089fe <_strtod_l+0x5be>
 80089fc:	e763      	b.n	80088c6 <_strtod_l+0x486>
 80089fe:	e55a      	b.n	80084b6 <_strtod_l+0x76>
 8008a00:	00004e1f 	.word	0x00004e1f
 8008a04:	0800a4ed 	.word	0x0800a4ed
 8008a08:	0800a704 	.word	0x0800a704
 8008a0c:	7ff00000 	.word	0x7ff00000
 8008a10:	0800a4e5 	.word	0x0800a4e5
 8008a14:	0800a51c 	.word	0x0800a51c
 8008a18:	0800a8ad 	.word	0x0800a8ad
 8008a1c:	0800a638 	.word	0x0800a638
 8008a20:	0800a610 	.word	0x0800a610
 8008a24:	fcb00000 	.word	0xfcb00000
 8008a28:	7ca00000 	.word	0x7ca00000
 8008a2c:	7c900000 	.word	0x7c900000
 8008a30:	7fefffff 	.word	0x7fefffff
 8008a34:	2310      	movs	r3, #16
 8008a36:	0022      	movs	r2, r4
 8008a38:	401a      	ands	r2, r3
 8008a3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a3c:	421c      	tst	r4, r3
 8008a3e:	d001      	beq.n	8008a44 <_strtod_l+0x604>
 8008a40:	335a      	adds	r3, #90	@ 0x5a
 8008a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a44:	0030      	movs	r0, r6
 8008a46:	0039      	movs	r1, r7
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4dbf      	ldr	r5, [pc, #764]	@ (8008d48 <_strtod_l+0x908>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4214      	tst	r4, r2
 8008a50:	d004      	beq.n	8008a5c <_strtod_l+0x61c>
 8008a52:	682a      	ldr	r2, [r5, #0]
 8008a54:	686b      	ldr	r3, [r5, #4]
 8008a56:	f7f8 ffd7 	bl	8001a08 <__aeabi_dmul>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	1064      	asrs	r4, r4, #1
 8008a5e:	3508      	adds	r5, #8
 8008a60:	2c00      	cmp	r4, #0
 8008a62:	d1f3      	bne.n	8008a4c <_strtod_l+0x60c>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <_strtod_l+0x62c>
 8008a68:	0006      	movs	r6, r0
 8008a6a:	000f      	movs	r7, r1
 8008a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <_strtod_l+0x64e>
 8008a72:	236b      	movs	r3, #107	@ 0x6b
 8008a74:	007a      	lsls	r2, r7, #1
 8008a76:	0d52      	lsrs	r2, r2, #21
 8008a78:	0039      	movs	r1, r7
 8008a7a:	1a9b      	subs	r3, r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd06      	ble.n	8008a8e <_strtod_l+0x64e>
 8008a80:	2b1f      	cmp	r3, #31
 8008a82:	dd5a      	ble.n	8008b3a <_strtod_l+0x6fa>
 8008a84:	2600      	movs	r6, #0
 8008a86:	2b34      	cmp	r3, #52	@ 0x34
 8008a88:	dd50      	ble.n	8008b2c <_strtod_l+0x6ec>
 8008a8a:	27dc      	movs	r7, #220	@ 0xdc
 8008a8c:	04bf      	lsls	r7, r7, #18
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	0030      	movs	r0, r6
 8008a94:	0039      	movs	r1, r7
 8008a96:	f7f7 fcd9 	bl	800044c <__aeabi_dcmpeq>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1a1      	bne.n	80089e2 <_strtod_l+0x5a2>
 8008a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa0:	9a08      	ldr	r2, [sp, #32]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008aa6:	9b06      	ldr	r3, [sp, #24]
 8008aa8:	9805      	ldr	r0, [sp, #20]
 8008aaa:	f7ff f893 	bl	8007bd4 <__s2b>
 8008aae:	900d      	str	r0, [sp, #52]	@ 0x34
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d100      	bne.n	8008ab6 <_strtod_l+0x676>
 8008ab4:	e6f9      	b.n	80088aa <_strtod_l+0x46a>
 8008ab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ab8:	9907      	ldr	r1, [sp, #28]
 8008aba:	17da      	asrs	r2, r3, #31
 8008abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008abe:	1a5b      	subs	r3, r3, r1
 8008ac0:	401a      	ands	r2, r3
 8008ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ac4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008ac6:	43db      	mvns	r3, r3
 8008ac8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008aca:	17db      	asrs	r3, r3, #31
 8008acc:	401a      	ands	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	921a      	str	r2, [sp, #104]	@ 0x68
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	9307      	str	r3, [sp, #28]
 8008ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ad8:	9805      	ldr	r0, [sp, #20]
 8008ada:	6859      	ldr	r1, [r3, #4]
 8008adc:	f7fe ffce 	bl	8007a7c <_Balloc>
 8008ae0:	9008      	str	r0, [sp, #32]
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d100      	bne.n	8008ae8 <_strtod_l+0x6a8>
 8008ae6:	e6e5      	b.n	80088b4 <_strtod_l+0x474>
 8008ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aea:	300c      	adds	r0, #12
 8008aec:	0019      	movs	r1, r3
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	310c      	adds	r1, #12
 8008af2:	3202      	adds	r2, #2
 8008af4:	0092      	lsls	r2, r2, #2
 8008af6:	f000 fd71 	bl	80095dc <memcpy>
 8008afa:	ab20      	add	r3, sp, #128	@ 0x80
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	0032      	movs	r2, r6
 8008b04:	003b      	movs	r3, r7
 8008b06:	9805      	ldr	r0, [sp, #20]
 8008b08:	9610      	str	r6, [sp, #64]	@ 0x40
 8008b0a:	9711      	str	r7, [sp, #68]	@ 0x44
 8008b0c:	f7ff fbb2 	bl	8008274 <__d2b>
 8008b10:	901e      	str	r0, [sp, #120]	@ 0x78
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d100      	bne.n	8008b18 <_strtod_l+0x6d8>
 8008b16:	e6cd      	b.n	80088b4 <_strtod_l+0x474>
 8008b18:	2101      	movs	r1, #1
 8008b1a:	9805      	ldr	r0, [sp, #20]
 8008b1c:	f7ff f8f6 	bl	8007d0c <__i2b>
 8008b20:	9007      	str	r0, [sp, #28]
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d10e      	bne.n	8008b44 <_strtod_l+0x704>
 8008b26:	2300      	movs	r3, #0
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	e6c3      	b.n	80088b4 <_strtod_l+0x474>
 8008b2c:	234b      	movs	r3, #75	@ 0x4b
 8008b2e:	1a9a      	subs	r2, r3, r2
 8008b30:	3b4c      	subs	r3, #76	@ 0x4c
 8008b32:	4093      	lsls	r3, r2
 8008b34:	4019      	ands	r1, r3
 8008b36:	000f      	movs	r7, r1
 8008b38:	e7a9      	b.n	8008a8e <_strtod_l+0x64e>
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4252      	negs	r2, r2
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	4016      	ands	r6, r2
 8008b42:	e7a4      	b.n	8008a8e <_strtod_l+0x64e>
 8008b44:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008b46:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b48:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008b4a:	1ad4      	subs	r4, r2, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	db01      	blt.n	8008b54 <_strtod_l+0x714>
 8008b50:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008b52:	195d      	adds	r5, r3, r5
 8008b54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b58:	1a5b      	subs	r3, r3, r1
 8008b5a:	2136      	movs	r1, #54	@ 0x36
 8008b5c:	189b      	adds	r3, r3, r2
 8008b5e:	1a8a      	subs	r2, r1, r2
 8008b60:	497a      	ldr	r1, [pc, #488]	@ (8008d4c <_strtod_l+0x90c>)
 8008b62:	2001      	movs	r0, #1
 8008b64:	468c      	mov	ip, r1
 8008b66:	2100      	movs	r1, #0
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	9116      	str	r1, [sp, #88]	@ 0x58
 8008b6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b6e:	4563      	cmp	r3, ip
 8008b70:	da06      	bge.n	8008b80 <_strtod_l+0x740>
 8008b72:	4661      	mov	r1, ip
 8008b74:	1ac9      	subs	r1, r1, r3
 8008b76:	1a52      	subs	r2, r2, r1
 8008b78:	291f      	cmp	r1, #31
 8008b7a:	dc3f      	bgt.n	8008bfc <_strtod_l+0x7bc>
 8008b7c:	4088      	lsls	r0, r1
 8008b7e:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b80:	18ab      	adds	r3, r5, r2
 8008b82:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b84:	18a4      	adds	r4, r4, r2
 8008b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b8a:	191c      	adds	r4, r3, r4
 8008b8c:	002b      	movs	r3, r5
 8008b8e:	4295      	cmp	r5, r2
 8008b90:	dd00      	ble.n	8008b94 <_strtod_l+0x754>
 8008b92:	0013      	movs	r3, r2
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	dd00      	ble.n	8008b9a <_strtod_l+0x75a>
 8008b98:	0023      	movs	r3, r4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd04      	ble.n	8008ba8 <_strtod_l+0x768>
 8008b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ba0:	1ae4      	subs	r4, r4, r3
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ba6:	1aed      	subs	r5, r5, r3
 8008ba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd16      	ble.n	8008bdc <_strtod_l+0x79c>
 8008bae:	001a      	movs	r2, r3
 8008bb0:	9907      	ldr	r1, [sp, #28]
 8008bb2:	9805      	ldr	r0, [sp, #20]
 8008bb4:	f7ff f974 	bl	8007ea0 <__pow5mult>
 8008bb8:	9007      	str	r0, [sp, #28]
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0b3      	beq.n	8008b26 <_strtod_l+0x6e6>
 8008bbe:	0001      	movs	r1, r0
 8008bc0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008bc2:	9805      	ldr	r0, [sp, #20]
 8008bc4:	f7ff f8ba 	bl	8007d3c <__multiply>
 8008bc8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d100      	bne.n	8008bd0 <_strtod_l+0x790>
 8008bce:	e671      	b.n	80088b4 <_strtod_l+0x474>
 8008bd0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008bd2:	9805      	ldr	r0, [sp, #20]
 8008bd4:	f7fe ff96 	bl	8007b04 <_Bfree>
 8008bd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bda:	931e      	str	r3, [sp, #120]	@ 0x78
 8008bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc12      	bgt.n	8008c08 <_strtod_l+0x7c8>
 8008be2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd18      	ble.n	8008c1a <_strtod_l+0x7da>
 8008be8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008bea:	9908      	ldr	r1, [sp, #32]
 8008bec:	9805      	ldr	r0, [sp, #20]
 8008bee:	f7ff f957 	bl	8007ea0 <__pow5mult>
 8008bf2:	9008      	str	r0, [sp, #32]
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d110      	bne.n	8008c1a <_strtod_l+0x7da>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e65a      	b.n	80088b2 <_strtod_l+0x472>
 8008bfc:	4954      	ldr	r1, [pc, #336]	@ (8008d50 <_strtod_l+0x910>)
 8008bfe:	1acb      	subs	r3, r1, r3
 8008c00:	0001      	movs	r1, r0
 8008c02:	4099      	lsls	r1, r3
 8008c04:	9116      	str	r1, [sp, #88]	@ 0x58
 8008c06:	e7ba      	b.n	8008b7e <_strtod_l+0x73e>
 8008c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c0a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008c0c:	9805      	ldr	r0, [sp, #20]
 8008c0e:	f7ff f9a3 	bl	8007f58 <__lshift>
 8008c12:	901e      	str	r0, [sp, #120]	@ 0x78
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1e4      	bne.n	8008be2 <_strtod_l+0x7a2>
 8008c18:	e64c      	b.n	80088b4 <_strtod_l+0x474>
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	dd07      	ble.n	8008c2e <_strtod_l+0x7ee>
 8008c1e:	0022      	movs	r2, r4
 8008c20:	9908      	ldr	r1, [sp, #32]
 8008c22:	9805      	ldr	r0, [sp, #20]
 8008c24:	f7ff f998 	bl	8007f58 <__lshift>
 8008c28:	9008      	str	r0, [sp, #32]
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0e4      	beq.n	8008bf8 <_strtod_l+0x7b8>
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	dd08      	ble.n	8008c44 <_strtod_l+0x804>
 8008c32:	002a      	movs	r2, r5
 8008c34:	9907      	ldr	r1, [sp, #28]
 8008c36:	9805      	ldr	r0, [sp, #20]
 8008c38:	f7ff f98e 	bl	8007f58 <__lshift>
 8008c3c:	9007      	str	r0, [sp, #28]
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d100      	bne.n	8008c44 <_strtod_l+0x804>
 8008c42:	e637      	b.n	80088b4 <_strtod_l+0x474>
 8008c44:	9a08      	ldr	r2, [sp, #32]
 8008c46:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008c48:	9805      	ldr	r0, [sp, #20]
 8008c4a:	f7ff fa0d 	bl	8008068 <__mdiff>
 8008c4e:	9006      	str	r0, [sp, #24]
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d100      	bne.n	8008c56 <_strtod_l+0x816>
 8008c54:	e62e      	b.n	80088b4 <_strtod_l+0x474>
 8008c56:	68c3      	ldr	r3, [r0, #12]
 8008c58:	9907      	ldr	r1, [sp, #28]
 8008c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60c3      	str	r3, [r0, #12]
 8008c60:	f7ff f9e6 	bl	8008030 <__mcmp>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	da3b      	bge.n	8008ce0 <_strtod_l+0x8a0>
 8008c68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c6a:	4333      	orrs	r3, r6
 8008c6c:	d167      	bne.n	8008d3e <_strtod_l+0x8fe>
 8008c6e:	033b      	lsls	r3, r7, #12
 8008c70:	d165      	bne.n	8008d3e <_strtod_l+0x8fe>
 8008c72:	22d6      	movs	r2, #214	@ 0xd6
 8008c74:	4b37      	ldr	r3, [pc, #220]	@ (8008d54 <_strtod_l+0x914>)
 8008c76:	04d2      	lsls	r2, r2, #19
 8008c78:	403b      	ands	r3, r7
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d95f      	bls.n	8008d3e <_strtod_l+0x8fe>
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <_strtod_l+0x84e>
 8008c86:	9b06      	ldr	r3, [sp, #24]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	dd57      	ble.n	8008d3e <_strtod_l+0x8fe>
 8008c8e:	9906      	ldr	r1, [sp, #24]
 8008c90:	2201      	movs	r2, #1
 8008c92:	9805      	ldr	r0, [sp, #20]
 8008c94:	f7ff f960 	bl	8007f58 <__lshift>
 8008c98:	9907      	ldr	r1, [sp, #28]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f7ff f9c8 	bl	8008030 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dd4c      	ble.n	8008d3e <_strtod_l+0x8fe>
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d54 <_strtod_l+0x914>)
 8008ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ca8:	403b      	ands	r3, r7
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	d074      	beq.n	8008d98 <_strtod_l+0x958>
 8008cae:	22d6      	movs	r2, #214	@ 0xd6
 8008cb0:	04d2      	lsls	r2, r2, #19
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d870      	bhi.n	8008d98 <_strtod_l+0x958>
 8008cb6:	22dc      	movs	r2, #220	@ 0xdc
 8008cb8:	0492      	lsls	r2, r2, #18
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d800      	bhi.n	8008cc0 <_strtod_l+0x880>
 8008cbe:	e695      	b.n	80089ec <_strtod_l+0x5ac>
 8008cc0:	0030      	movs	r0, r6
 8008cc2:	0039      	movs	r1, r7
 8008cc4:	4b24      	ldr	r3, [pc, #144]	@ (8008d58 <_strtod_l+0x918>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f7f8 fe9e 	bl	8001a08 <__aeabi_dmul>
 8008ccc:	4b21      	ldr	r3, [pc, #132]	@ (8008d54 <_strtod_l+0x914>)
 8008cce:	0006      	movs	r6, r0
 8008cd0:	000f      	movs	r7, r1
 8008cd2:	420b      	tst	r3, r1
 8008cd4:	d000      	beq.n	8008cd8 <_strtod_l+0x898>
 8008cd6:	e5f6      	b.n	80088c6 <_strtod_l+0x486>
 8008cd8:	2322      	movs	r3, #34	@ 0x22
 8008cda:	9a05      	ldr	r2, [sp, #20]
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	e5f2      	b.n	80088c6 <_strtod_l+0x486>
 8008ce0:	970e      	str	r7, [sp, #56]	@ 0x38
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d175      	bne.n	8008dd2 <_strtod_l+0x992>
 8008ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ce8:	033b      	lsls	r3, r7, #12
 8008cea:	0b1b      	lsrs	r3, r3, #12
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	d039      	beq.n	8008d64 <_strtod_l+0x924>
 8008cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8008d5c <_strtod_l+0x91c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d138      	bne.n	8008d68 <_strtod_l+0x928>
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfa:	4249      	negs	r1, r1
 8008cfc:	0032      	movs	r2, r6
 8008cfe:	0008      	movs	r0, r1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <_strtod_l+0x8dc>
 8008d04:	24d4      	movs	r4, #212	@ 0xd4
 8008d06:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <_strtod_l+0x914>)
 8008d08:	0008      	movs	r0, r1
 8008d0a:	403b      	ands	r3, r7
 8008d0c:	04e4      	lsls	r4, r4, #19
 8008d0e:	42a3      	cmp	r3, r4
 8008d10:	d804      	bhi.n	8008d1c <_strtod_l+0x8dc>
 8008d12:	306c      	adds	r0, #108	@ 0x6c
 8008d14:	0d1b      	lsrs	r3, r3, #20
 8008d16:	1ac3      	subs	r3, r0, r3
 8008d18:	4099      	lsls	r1, r3
 8008d1a:	0008      	movs	r0, r1
 8008d1c:	4282      	cmp	r2, r0
 8008d1e:	d123      	bne.n	8008d68 <_strtod_l+0x928>
 8008d20:	4b0f      	ldr	r3, [pc, #60]	@ (8008d60 <_strtod_l+0x920>)
 8008d22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d24:	4299      	cmp	r1, r3
 8008d26:	d102      	bne.n	8008d2e <_strtod_l+0x8ee>
 8008d28:	3201      	adds	r2, #1
 8008d2a:	d100      	bne.n	8008d2e <_strtod_l+0x8ee>
 8008d2c:	e5c2      	b.n	80088b4 <_strtod_l+0x474>
 8008d2e:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <_strtod_l+0x914>)
 8008d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d32:	2600      	movs	r6, #0
 8008d34:	401a      	ands	r2, r3
 8008d36:	0013      	movs	r3, r2
 8008d38:	2280      	movs	r2, #128	@ 0x80
 8008d3a:	0352      	lsls	r2, r2, #13
 8008d3c:	189f      	adds	r7, r3, r2
 8008d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1bd      	bne.n	8008cc0 <_strtod_l+0x880>
 8008d44:	e5bf      	b.n	80088c6 <_strtod_l+0x486>
 8008d46:	46c0      	nop			@ (mov r8, r8)
 8008d48:	0800a730 	.word	0x0800a730
 8008d4c:	fffffc02 	.word	0xfffffc02
 8008d50:	fffffbe2 	.word	0xfffffbe2
 8008d54:	7ff00000 	.word	0x7ff00000
 8008d58:	39500000 	.word	0x39500000
 8008d5c:	000fffff 	.word	0x000fffff
 8008d60:	7fefffff 	.word	0x7fefffff
 8008d64:	4333      	orrs	r3, r6
 8008d66:	d09d      	beq.n	8008ca4 <_strtod_l+0x864>
 8008d68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d01c      	beq.n	8008da8 <_strtod_l+0x968>
 8008d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d70:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008d72:	4213      	tst	r3, r2
 8008d74:	d0e3      	beq.n	8008d3e <_strtod_l+0x8fe>
 8008d76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d78:	0030      	movs	r0, r6
 8008d7a:	0039      	movs	r1, r7
 8008d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d016      	beq.n	8008db0 <_strtod_l+0x970>
 8008d82:	f7ff fb45 	bl	8008410 <sulp>
 8008d86:	0002      	movs	r2, r0
 8008d88:	000b      	movs	r3, r1
 8008d8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008d8c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008d8e:	f7f7 fe93 	bl	8000ab8 <__aeabi_dadd>
 8008d92:	0006      	movs	r6, r0
 8008d94:	000f      	movs	r7, r1
 8008d96:	e7d2      	b.n	8008d3e <_strtod_l+0x8fe>
 8008d98:	2601      	movs	r6, #1
 8008d9a:	4a92      	ldr	r2, [pc, #584]	@ (8008fe4 <_strtod_l+0xba4>)
 8008d9c:	4276      	negs	r6, r6
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	4a91      	ldr	r2, [pc, #580]	@ (8008fe8 <_strtod_l+0xba8>)
 8008da2:	431a      	orrs	r2, r3
 8008da4:	0017      	movs	r7, r2
 8008da6:	e7ca      	b.n	8008d3e <_strtod_l+0x8fe>
 8008da8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008daa:	4233      	tst	r3, r6
 8008dac:	d0c7      	beq.n	8008d3e <_strtod_l+0x8fe>
 8008dae:	e7e2      	b.n	8008d76 <_strtod_l+0x936>
 8008db0:	f7ff fb2e 	bl	8008410 <sulp>
 8008db4:	0002      	movs	r2, r0
 8008db6:	000b      	movs	r3, r1
 8008db8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008dba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008dbc:	f7f9 f8ec 	bl	8001f98 <__aeabi_dsub>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	0006      	movs	r6, r0
 8008dc6:	000f      	movs	r7, r1
 8008dc8:	f7f7 fb40 	bl	800044c <__aeabi_dcmpeq>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d0b6      	beq.n	8008d3e <_strtod_l+0x8fe>
 8008dd0:	e60c      	b.n	80089ec <_strtod_l+0x5ac>
 8008dd2:	9907      	ldr	r1, [sp, #28]
 8008dd4:	9806      	ldr	r0, [sp, #24]
 8008dd6:	f7ff faad 	bl	8008334 <__ratio>
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	2200      	movs	r2, #0
 8008dde:	05db      	lsls	r3, r3, #23
 8008de0:	0004      	movs	r4, r0
 8008de2:	000d      	movs	r5, r1
 8008de4:	f7f7 fb42 	bl	800046c <__aeabi_dcmple>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d06c      	beq.n	8008ec6 <_strtod_l+0xa86>
 8008dec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d177      	bne.n	8008ee2 <_strtod_l+0xaa2>
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	d157      	bne.n	8008ea6 <_strtod_l+0xa66>
 8008df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008df8:	031b      	lsls	r3, r3, #12
 8008dfa:	d15a      	bne.n	8008eb2 <_strtod_l+0xa72>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	0020      	movs	r0, r4
 8008e00:	0029      	movs	r1, r5
 8008e02:	4b7a      	ldr	r3, [pc, #488]	@ (8008fec <_strtod_l+0xbac>)
 8008e04:	f7f7 fb28 	bl	8000458 <__aeabi_dcmplt>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d159      	bne.n	8008ec0 <_strtod_l+0xa80>
 8008e0c:	0020      	movs	r0, r4
 8008e0e:	0029      	movs	r1, r5
 8008e10:	2200      	movs	r2, #0
 8008e12:	4b77      	ldr	r3, [pc, #476]	@ (8008ff0 <_strtod_l+0xbb0>)
 8008e14:	f7f8 fdf8 	bl	8001a08 <__aeabi_dmul>
 8008e18:	0004      	movs	r4, r0
 8008e1a:	000d      	movs	r5, r1
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	061b      	lsls	r3, r3, #24
 8008e20:	18eb      	adds	r3, r5, r3
 8008e22:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e2a:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e2e:	4a71      	ldr	r2, [pc, #452]	@ (8008ff4 <_strtod_l+0xbb4>)
 8008e30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e32:	4013      	ands	r3, r2
 8008e34:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e38:	4b6f      	ldr	r3, [pc, #444]	@ (8008ff8 <_strtod_l+0xbb8>)
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d000      	beq.n	8008e40 <_strtod_l+0xa00>
 8008e3e:	e087      	b.n	8008f50 <_strtod_l+0xb10>
 8008e40:	4a6e      	ldr	r2, [pc, #440]	@ (8008ffc <_strtod_l+0xbbc>)
 8008e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e44:	4694      	mov	ip, r2
 8008e46:	4463      	add	r3, ip
 8008e48:	001f      	movs	r7, r3
 8008e4a:	0030      	movs	r0, r6
 8008e4c:	0019      	movs	r1, r3
 8008e4e:	f7ff f9a5 	bl	800819c <__ulp>
 8008e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e56:	f7f8 fdd7 	bl	8001a08 <__aeabi_dmul>
 8008e5a:	0032      	movs	r2, r6
 8008e5c:	003b      	movs	r3, r7
 8008e5e:	f7f7 fe2b 	bl	8000ab8 <__aeabi_dadd>
 8008e62:	4a64      	ldr	r2, [pc, #400]	@ (8008ff4 <_strtod_l+0xbb4>)
 8008e64:	4b66      	ldr	r3, [pc, #408]	@ (8009000 <_strtod_l+0xbc0>)
 8008e66:	0006      	movs	r6, r0
 8008e68:	400a      	ands	r2, r1
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d940      	bls.n	8008ef0 <_strtod_l+0xab0>
 8008e6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e70:	4a64      	ldr	r2, [pc, #400]	@ (8009004 <_strtod_l+0xbc4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d103      	bne.n	8008e7e <_strtod_l+0xa3e>
 8008e76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e78:	3301      	adds	r3, #1
 8008e7a:	d100      	bne.n	8008e7e <_strtod_l+0xa3e>
 8008e7c:	e51a      	b.n	80088b4 <_strtod_l+0x474>
 8008e7e:	2601      	movs	r6, #1
 8008e80:	4f60      	ldr	r7, [pc, #384]	@ (8009004 <_strtod_l+0xbc4>)
 8008e82:	4276      	negs	r6, r6
 8008e84:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008e86:	9805      	ldr	r0, [sp, #20]
 8008e88:	f7fe fe3c 	bl	8007b04 <_Bfree>
 8008e8c:	9908      	ldr	r1, [sp, #32]
 8008e8e:	9805      	ldr	r0, [sp, #20]
 8008e90:	f7fe fe38 	bl	8007b04 <_Bfree>
 8008e94:	9907      	ldr	r1, [sp, #28]
 8008e96:	9805      	ldr	r0, [sp, #20]
 8008e98:	f7fe fe34 	bl	8007b04 <_Bfree>
 8008e9c:	9906      	ldr	r1, [sp, #24]
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	f7fe fe30 	bl	8007b04 <_Bfree>
 8008ea4:	e617      	b.n	8008ad6 <_strtod_l+0x696>
 8008ea6:	2e01      	cmp	r6, #1
 8008ea8:	d103      	bne.n	8008eb2 <_strtod_l+0xa72>
 8008eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d100      	bne.n	8008eb2 <_strtod_l+0xa72>
 8008eb0:	e59c      	b.n	80089ec <_strtod_l+0x5ac>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4c54      	ldr	r4, [pc, #336]	@ (8009008 <_strtod_l+0xbc8>)
 8008eb6:	4d4d      	ldr	r5, [pc, #308]	@ (8008fec <_strtod_l+0xbac>)
 8008eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ebc:	2400      	movs	r4, #0
 8008ebe:	e7b2      	b.n	8008e26 <_strtod_l+0x9e6>
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	4d4b      	ldr	r5, [pc, #300]	@ (8008ff0 <_strtod_l+0xbb0>)
 8008ec4:	e7aa      	b.n	8008e1c <_strtod_l+0x9dc>
 8008ec6:	0020      	movs	r0, r4
 8008ec8:	0029      	movs	r1, r5
 8008eca:	4b49      	ldr	r3, [pc, #292]	@ (8008ff0 <_strtod_l+0xbb0>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f7f8 fd9b 	bl	8001a08 <__aeabi_dmul>
 8008ed2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ed4:	0004      	movs	r4, r0
 8008ed6:	000d      	movs	r5, r1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d09f      	beq.n	8008e1c <_strtod_l+0x9dc>
 8008edc:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ede:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008ee0:	e7a1      	b.n	8008e26 <_strtod_l+0x9e6>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4c41      	ldr	r4, [pc, #260]	@ (8008fec <_strtod_l+0xbac>)
 8008ee6:	0025      	movs	r5, r4
 8008ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008eec:	001c      	movs	r4, r3
 8008eee:	e79a      	b.n	8008e26 <_strtod_l+0x9e6>
 8008ef0:	23d4      	movs	r3, #212	@ 0xd4
 8008ef2:	049b      	lsls	r3, r3, #18
 8008ef4:	18cf      	adds	r7, r1, r3
 8008ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef8:	9710      	str	r7, [sp, #64]	@ 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1c2      	bne.n	8008e84 <_strtod_l+0xa44>
 8008efe:	4b3d      	ldr	r3, [pc, #244]	@ (8008ff4 <_strtod_l+0xbb4>)
 8008f00:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f02:	403b      	ands	r3, r7
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d1bd      	bne.n	8008e84 <_strtod_l+0xa44>
 8008f08:	0020      	movs	r0, r4
 8008f0a:	0029      	movs	r1, r5
 8008f0c:	f7f7 fb38 	bl	8000580 <__aeabi_d2lz>
 8008f10:	f7f7 fb70 	bl	80005f4 <__aeabi_l2d>
 8008f14:	0002      	movs	r2, r0
 8008f16:	000b      	movs	r3, r1
 8008f18:	0020      	movs	r0, r4
 8008f1a:	0029      	movs	r1, r5
 8008f1c:	f7f9 f83c 	bl	8001f98 <__aeabi_dsub>
 8008f20:	033c      	lsls	r4, r7, #12
 8008f22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f24:	0b24      	lsrs	r4, r4, #12
 8008f26:	4334      	orrs	r4, r6
 8008f28:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f2a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008f2c:	4a37      	ldr	r2, [pc, #220]	@ (800900c <_strtod_l+0xbcc>)
 8008f2e:	431c      	orrs	r4, r3
 8008f30:	d052      	beq.n	8008fd8 <_strtod_l+0xb98>
 8008f32:	4b37      	ldr	r3, [pc, #220]	@ (8009010 <_strtod_l+0xbd0>)
 8008f34:	f7f7 fa90 	bl	8000458 <__aeabi_dcmplt>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d000      	beq.n	8008f3e <_strtod_l+0xafe>
 8008f3c:	e4c3      	b.n	80088c6 <_strtod_l+0x486>
 8008f3e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008f40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f42:	4a34      	ldr	r2, [pc, #208]	@ (8009014 <_strtod_l+0xbd4>)
 8008f44:	4b2a      	ldr	r3, [pc, #168]	@ (8008ff0 <_strtod_l+0xbb0>)
 8008f46:	f7f7 fa9b 	bl	8000480 <__aeabi_dcmpgt>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d09a      	beq.n	8008e84 <_strtod_l+0xa44>
 8008f4e:	e4ba      	b.n	80088c6 <_strtod_l+0x486>
 8008f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02a      	beq.n	8008fac <_strtod_l+0xb6c>
 8008f56:	23d4      	movs	r3, #212	@ 0xd4
 8008f58:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f5a:	04db      	lsls	r3, r3, #19
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d825      	bhi.n	8008fac <_strtod_l+0xb6c>
 8008f60:	0020      	movs	r0, r4
 8008f62:	0029      	movs	r1, r5
 8008f64:	4a2c      	ldr	r2, [pc, #176]	@ (8009018 <_strtod_l+0xbd8>)
 8008f66:	4b2d      	ldr	r3, [pc, #180]	@ (800901c <_strtod_l+0xbdc>)
 8008f68:	f7f7 fa80 	bl	800046c <__aeabi_dcmple>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d016      	beq.n	8008f9e <_strtod_l+0xb5e>
 8008f70:	0020      	movs	r0, r4
 8008f72:	0029      	movs	r1, r5
 8008f74:	f7f7 fae6 	bl	8000544 <__aeabi_d2uiz>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d100      	bne.n	8008f7e <_strtod_l+0xb3e>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f7f9 fc33 	bl	80027e8 <__aeabi_ui2d>
 8008f82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f84:	0004      	movs	r4, r0
 8008f86:	000d      	movs	r5, r1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d122      	bne.n	8008fd2 <_strtod_l+0xb92>
 8008f8c:	2380      	movs	r3, #128	@ 0x80
 8008f8e:	061b      	lsls	r3, r3, #24
 8008f90:	18cb      	adds	r3, r1, r3
 8008f92:	9018      	str	r0, [sp, #96]	@ 0x60
 8008f94:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f96:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008f98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9a:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f9e:	22d6      	movs	r2, #214	@ 0xd6
 8008fa0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008fa2:	04d2      	lsls	r2, r2, #19
 8008fa4:	189b      	adds	r3, r3, r2
 8008fa6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	9315      	str	r3, [sp, #84]	@ 0x54
 8008fac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008fae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008fb0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008fb2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8008fb4:	f7ff f8f2 	bl	800819c <__ulp>
 8008fb8:	0002      	movs	r2, r0
 8008fba:	000b      	movs	r3, r1
 8008fbc:	0030      	movs	r0, r6
 8008fbe:	0039      	movs	r1, r7
 8008fc0:	f7f8 fd22 	bl	8001a08 <__aeabi_dmul>
 8008fc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008fc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fc8:	f7f7 fd76 	bl	8000ab8 <__aeabi_dadd>
 8008fcc:	0006      	movs	r6, r0
 8008fce:	000f      	movs	r7, r1
 8008fd0:	e791      	b.n	8008ef6 <_strtod_l+0xab6>
 8008fd2:	9418      	str	r4, [sp, #96]	@ 0x60
 8008fd4:	9519      	str	r5, [sp, #100]	@ 0x64
 8008fd6:	e7de      	b.n	8008f96 <_strtod_l+0xb56>
 8008fd8:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <_strtod_l+0xbe0>)
 8008fda:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008fdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008fde:	f7f7 fa3b 	bl	8000458 <__aeabi_dcmplt>
 8008fe2:	e7b2      	b.n	8008f4a <_strtod_l+0xb0a>
 8008fe4:	fff00000 	.word	0xfff00000
 8008fe8:	000fffff 	.word	0x000fffff
 8008fec:	3ff00000 	.word	0x3ff00000
 8008ff0:	3fe00000 	.word	0x3fe00000
 8008ff4:	7ff00000 	.word	0x7ff00000
 8008ff8:	7fe00000 	.word	0x7fe00000
 8008ffc:	fcb00000 	.word	0xfcb00000
 8009000:	7c9fffff 	.word	0x7c9fffff
 8009004:	7fefffff 	.word	0x7fefffff
 8009008:	bff00000 	.word	0xbff00000
 800900c:	94a03595 	.word	0x94a03595
 8009010:	3fdfffff 	.word	0x3fdfffff
 8009014:	35afe535 	.word	0x35afe535
 8009018:	ffc00000 	.word	0xffc00000
 800901c:	41dfffff 	.word	0x41dfffff
 8009020:	3fcfffff 	.word	0x3fcfffff

08009024 <_strtod_r>:
 8009024:	b510      	push	{r4, lr}
 8009026:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <_strtod_r+0xc>)
 8009028:	f7ff fa0a 	bl	8008440 <_strtod_l>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	20000068 	.word	0x20000068

08009034 <_strtol_l.constprop.0>:
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	b085      	sub	sp, #20
 8009038:	0017      	movs	r7, r2
 800903a:	001e      	movs	r6, r3
 800903c:	9003      	str	r0, [sp, #12]
 800903e:	9101      	str	r1, [sp, #4]
 8009040:	2b24      	cmp	r3, #36	@ 0x24
 8009042:	d844      	bhi.n	80090ce <_strtol_l.constprop.0+0x9a>
 8009044:	000c      	movs	r4, r1
 8009046:	2b01      	cmp	r3, #1
 8009048:	d041      	beq.n	80090ce <_strtol_l.constprop.0+0x9a>
 800904a:	4b3d      	ldr	r3, [pc, #244]	@ (8009140 <_strtol_l.constprop.0+0x10c>)
 800904c:	2208      	movs	r2, #8
 800904e:	469c      	mov	ip, r3
 8009050:	0023      	movs	r3, r4
 8009052:	4661      	mov	r1, ip
 8009054:	781d      	ldrb	r5, [r3, #0]
 8009056:	3401      	adds	r4, #1
 8009058:	5d48      	ldrb	r0, [r1, r5]
 800905a:	0001      	movs	r1, r0
 800905c:	4011      	ands	r1, r2
 800905e:	4210      	tst	r0, r2
 8009060:	d1f6      	bne.n	8009050 <_strtol_l.constprop.0+0x1c>
 8009062:	2d2d      	cmp	r5, #45	@ 0x2d
 8009064:	d13a      	bne.n	80090dc <_strtol_l.constprop.0+0xa8>
 8009066:	7825      	ldrb	r5, [r4, #0]
 8009068:	1c9c      	adds	r4, r3, #2
 800906a:	2301      	movs	r3, #1
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	2210      	movs	r2, #16
 8009070:	0033      	movs	r3, r6
 8009072:	4393      	bics	r3, r2
 8009074:	d109      	bne.n	800908a <_strtol_l.constprop.0+0x56>
 8009076:	2d30      	cmp	r5, #48	@ 0x30
 8009078:	d136      	bne.n	80090e8 <_strtol_l.constprop.0+0xb4>
 800907a:	2120      	movs	r1, #32
 800907c:	7823      	ldrb	r3, [r4, #0]
 800907e:	438b      	bics	r3, r1
 8009080:	2b58      	cmp	r3, #88	@ 0x58
 8009082:	d131      	bne.n	80090e8 <_strtol_l.constprop.0+0xb4>
 8009084:	0016      	movs	r6, r2
 8009086:	7865      	ldrb	r5, [r4, #1]
 8009088:	3402      	adds	r4, #2
 800908a:	4a2e      	ldr	r2, [pc, #184]	@ (8009144 <_strtol_l.constprop.0+0x110>)
 800908c:	9b00      	ldr	r3, [sp, #0]
 800908e:	4694      	mov	ip, r2
 8009090:	4463      	add	r3, ip
 8009092:	0031      	movs	r1, r6
 8009094:	0018      	movs	r0, r3
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	f7f7 f8d8 	bl	800024c <__aeabi_uidivmod>
 800909c:	2200      	movs	r2, #0
 800909e:	4684      	mov	ip, r0
 80090a0:	0010      	movs	r0, r2
 80090a2:	002b      	movs	r3, r5
 80090a4:	3b30      	subs	r3, #48	@ 0x30
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d825      	bhi.n	80090f6 <_strtol_l.constprop.0+0xc2>
 80090aa:	001d      	movs	r5, r3
 80090ac:	42ae      	cmp	r6, r5
 80090ae:	dd31      	ble.n	8009114 <_strtol_l.constprop.0+0xe0>
 80090b0:	1c53      	adds	r3, r2, #1
 80090b2:	d009      	beq.n	80090c8 <_strtol_l.constprop.0+0x94>
 80090b4:	2201      	movs	r2, #1
 80090b6:	4252      	negs	r2, r2
 80090b8:	4584      	cmp	ip, r0
 80090ba:	d305      	bcc.n	80090c8 <_strtol_l.constprop.0+0x94>
 80090bc:	d101      	bne.n	80090c2 <_strtol_l.constprop.0+0x8e>
 80090be:	42a9      	cmp	r1, r5
 80090c0:	db25      	blt.n	800910e <_strtol_l.constprop.0+0xda>
 80090c2:	2201      	movs	r2, #1
 80090c4:	4370      	muls	r0, r6
 80090c6:	1828      	adds	r0, r5, r0
 80090c8:	7825      	ldrb	r5, [r4, #0]
 80090ca:	3401      	adds	r4, #1
 80090cc:	e7e9      	b.n	80090a2 <_strtol_l.constprop.0+0x6e>
 80090ce:	f7fd fd11 	bl	8006af4 <__errno>
 80090d2:	2316      	movs	r3, #22
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	2000      	movs	r0, #0
 80090d8:	b005      	add	sp, #20
 80090da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090dc:	9100      	str	r1, [sp, #0]
 80090de:	2d2b      	cmp	r5, #43	@ 0x2b
 80090e0:	d1c5      	bne.n	800906e <_strtol_l.constprop.0+0x3a>
 80090e2:	7825      	ldrb	r5, [r4, #0]
 80090e4:	1c9c      	adds	r4, r3, #2
 80090e6:	e7c2      	b.n	800906e <_strtol_l.constprop.0+0x3a>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	d1ce      	bne.n	800908a <_strtol_l.constprop.0+0x56>
 80090ec:	3608      	adds	r6, #8
 80090ee:	2d30      	cmp	r5, #48	@ 0x30
 80090f0:	d0cb      	beq.n	800908a <_strtol_l.constprop.0+0x56>
 80090f2:	3602      	adds	r6, #2
 80090f4:	e7c9      	b.n	800908a <_strtol_l.constprop.0+0x56>
 80090f6:	002b      	movs	r3, r5
 80090f8:	3b41      	subs	r3, #65	@ 0x41
 80090fa:	2b19      	cmp	r3, #25
 80090fc:	d801      	bhi.n	8009102 <_strtol_l.constprop.0+0xce>
 80090fe:	3d37      	subs	r5, #55	@ 0x37
 8009100:	e7d4      	b.n	80090ac <_strtol_l.constprop.0+0x78>
 8009102:	002b      	movs	r3, r5
 8009104:	3b61      	subs	r3, #97	@ 0x61
 8009106:	2b19      	cmp	r3, #25
 8009108:	d804      	bhi.n	8009114 <_strtol_l.constprop.0+0xe0>
 800910a:	3d57      	subs	r5, #87	@ 0x57
 800910c:	e7ce      	b.n	80090ac <_strtol_l.constprop.0+0x78>
 800910e:	2201      	movs	r2, #1
 8009110:	4252      	negs	r2, r2
 8009112:	e7d9      	b.n	80090c8 <_strtol_l.constprop.0+0x94>
 8009114:	1c53      	adds	r3, r2, #1
 8009116:	d108      	bne.n	800912a <_strtol_l.constprop.0+0xf6>
 8009118:	2322      	movs	r3, #34	@ 0x22
 800911a:	9a03      	ldr	r2, [sp, #12]
 800911c:	9802      	ldr	r0, [sp, #8]
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	2f00      	cmp	r7, #0
 8009122:	d0d9      	beq.n	80090d8 <_strtol_l.constprop.0+0xa4>
 8009124:	1e63      	subs	r3, r4, #1
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	e007      	b.n	800913a <_strtol_l.constprop.0+0x106>
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d000      	beq.n	8009132 <_strtol_l.constprop.0+0xfe>
 8009130:	4240      	negs	r0, r0
 8009132:	2f00      	cmp	r7, #0
 8009134:	d0d0      	beq.n	80090d8 <_strtol_l.constprop.0+0xa4>
 8009136:	2a00      	cmp	r2, #0
 8009138:	d1f4      	bne.n	8009124 <_strtol_l.constprop.0+0xf0>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	e7cb      	b.n	80090d8 <_strtol_l.constprop.0+0xa4>
 8009140:	0800a759 	.word	0x0800a759
 8009144:	7fffffff 	.word	0x7fffffff

08009148 <_strtol_r>:
 8009148:	b510      	push	{r4, lr}
 800914a:	f7ff ff73 	bl	8009034 <_strtol_l.constprop.0>
 800914e:	bd10      	pop	{r4, pc}

08009150 <__ssputs_r>:
 8009150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009152:	688e      	ldr	r6, [r1, #8]
 8009154:	b085      	sub	sp, #20
 8009156:	001f      	movs	r7, r3
 8009158:	000c      	movs	r4, r1
 800915a:	680b      	ldr	r3, [r1, #0]
 800915c:	9002      	str	r0, [sp, #8]
 800915e:	9203      	str	r2, [sp, #12]
 8009160:	42be      	cmp	r6, r7
 8009162:	d830      	bhi.n	80091c6 <__ssputs_r+0x76>
 8009164:	210c      	movs	r1, #12
 8009166:	5e62      	ldrsh	r2, [r4, r1]
 8009168:	2190      	movs	r1, #144	@ 0x90
 800916a:	00c9      	lsls	r1, r1, #3
 800916c:	420a      	tst	r2, r1
 800916e:	d028      	beq.n	80091c2 <__ssputs_r+0x72>
 8009170:	2003      	movs	r0, #3
 8009172:	6921      	ldr	r1, [r4, #16]
 8009174:	1a5b      	subs	r3, r3, r1
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	6963      	ldr	r3, [r4, #20]
 800917a:	4343      	muls	r3, r0
 800917c:	9801      	ldr	r0, [sp, #4]
 800917e:	0fdd      	lsrs	r5, r3, #31
 8009180:	18ed      	adds	r5, r5, r3
 8009182:	1c7b      	adds	r3, r7, #1
 8009184:	181b      	adds	r3, r3, r0
 8009186:	106d      	asrs	r5, r5, #1
 8009188:	42ab      	cmp	r3, r5
 800918a:	d900      	bls.n	800918e <__ssputs_r+0x3e>
 800918c:	001d      	movs	r5, r3
 800918e:	0552      	lsls	r2, r2, #21
 8009190:	d528      	bpl.n	80091e4 <__ssputs_r+0x94>
 8009192:	0029      	movs	r1, r5
 8009194:	9802      	ldr	r0, [sp, #8]
 8009196:	f7fe fbe1 	bl	800795c <_malloc_r>
 800919a:	1e06      	subs	r6, r0, #0
 800919c:	d02c      	beq.n	80091f8 <__ssputs_r+0xa8>
 800919e:	9a01      	ldr	r2, [sp, #4]
 80091a0:	6921      	ldr	r1, [r4, #16]
 80091a2:	f000 fa1b 	bl	80095dc <memcpy>
 80091a6:	89a2      	ldrh	r2, [r4, #12]
 80091a8:	4b18      	ldr	r3, [pc, #96]	@ (800920c <__ssputs_r+0xbc>)
 80091aa:	401a      	ands	r2, r3
 80091ac:	2380      	movs	r3, #128	@ 0x80
 80091ae:	4313      	orrs	r3, r2
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	6126      	str	r6, [r4, #16]
 80091b6:	18f6      	adds	r6, r6, r3
 80091b8:	6026      	str	r6, [r4, #0]
 80091ba:	003e      	movs	r6, r7
 80091bc:	6165      	str	r5, [r4, #20]
 80091be:	1aed      	subs	r5, r5, r3
 80091c0:	60a5      	str	r5, [r4, #8]
 80091c2:	42be      	cmp	r6, r7
 80091c4:	d900      	bls.n	80091c8 <__ssputs_r+0x78>
 80091c6:	003e      	movs	r6, r7
 80091c8:	0032      	movs	r2, r6
 80091ca:	9903      	ldr	r1, [sp, #12]
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	f000 f9ce 	bl	800956e <memmove>
 80091d2:	2000      	movs	r0, #0
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	1b9b      	subs	r3, r3, r6
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	199b      	adds	r3, r3, r6
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	b005      	add	sp, #20
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	002a      	movs	r2, r5
 80091e6:	9802      	ldr	r0, [sp, #8]
 80091e8:	f000 fdc0 	bl	8009d6c <_realloc_r>
 80091ec:	1e06      	subs	r6, r0, #0
 80091ee:	d1e0      	bne.n	80091b2 <__ssputs_r+0x62>
 80091f0:	6921      	ldr	r1, [r4, #16]
 80091f2:	9802      	ldr	r0, [sp, #8]
 80091f4:	f7fe fb3c 	bl	8007870 <_free_r>
 80091f8:	230c      	movs	r3, #12
 80091fa:	2001      	movs	r0, #1
 80091fc:	9a02      	ldr	r2, [sp, #8]
 80091fe:	4240      	negs	r0, r0
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	89a2      	ldrh	r2, [r4, #12]
 8009204:	3334      	adds	r3, #52	@ 0x34
 8009206:	4313      	orrs	r3, r2
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	e7e9      	b.n	80091e0 <__ssputs_r+0x90>
 800920c:	fffffb7f 	.word	0xfffffb7f

08009210 <_svfiprintf_r>:
 8009210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009212:	b0a1      	sub	sp, #132	@ 0x84
 8009214:	9003      	str	r0, [sp, #12]
 8009216:	001d      	movs	r5, r3
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	000f      	movs	r7, r1
 800921c:	0016      	movs	r6, r2
 800921e:	061b      	lsls	r3, r3, #24
 8009220:	d511      	bpl.n	8009246 <_svfiprintf_r+0x36>
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10e      	bne.n	8009246 <_svfiprintf_r+0x36>
 8009228:	2140      	movs	r1, #64	@ 0x40
 800922a:	f7fe fb97 	bl	800795c <_malloc_r>
 800922e:	6038      	str	r0, [r7, #0]
 8009230:	6138      	str	r0, [r7, #16]
 8009232:	2800      	cmp	r0, #0
 8009234:	d105      	bne.n	8009242 <_svfiprintf_r+0x32>
 8009236:	230c      	movs	r3, #12
 8009238:	9a03      	ldr	r2, [sp, #12]
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	2001      	movs	r0, #1
 800923e:	4240      	negs	r0, r0
 8009240:	e0cf      	b.n	80093e2 <_svfiprintf_r+0x1d2>
 8009242:	2340      	movs	r3, #64	@ 0x40
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	2300      	movs	r3, #0
 8009248:	ac08      	add	r4, sp, #32
 800924a:	6163      	str	r3, [r4, #20]
 800924c:	3320      	adds	r3, #32
 800924e:	7663      	strb	r3, [r4, #25]
 8009250:	3310      	adds	r3, #16
 8009252:	76a3      	strb	r3, [r4, #26]
 8009254:	9507      	str	r5, [sp, #28]
 8009256:	0035      	movs	r5, r6
 8009258:	782b      	ldrb	r3, [r5, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <_svfiprintf_r+0x52>
 800925e:	2b25      	cmp	r3, #37	@ 0x25
 8009260:	d148      	bne.n	80092f4 <_svfiprintf_r+0xe4>
 8009262:	1bab      	subs	r3, r5, r6
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	42b5      	cmp	r5, r6
 8009268:	d00b      	beq.n	8009282 <_svfiprintf_r+0x72>
 800926a:	0032      	movs	r2, r6
 800926c:	0039      	movs	r1, r7
 800926e:	9803      	ldr	r0, [sp, #12]
 8009270:	f7ff ff6e 	bl	8009150 <__ssputs_r>
 8009274:	3001      	adds	r0, #1
 8009276:	d100      	bne.n	800927a <_svfiprintf_r+0x6a>
 8009278:	e0ae      	b.n	80093d8 <_svfiprintf_r+0x1c8>
 800927a:	6963      	ldr	r3, [r4, #20]
 800927c:	9a05      	ldr	r2, [sp, #20]
 800927e:	189b      	adds	r3, r3, r2
 8009280:	6163      	str	r3, [r4, #20]
 8009282:	782b      	ldrb	r3, [r5, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d100      	bne.n	800928a <_svfiprintf_r+0x7a>
 8009288:	e0a6      	b.n	80093d8 <_svfiprintf_r+0x1c8>
 800928a:	2201      	movs	r2, #1
 800928c:	2300      	movs	r3, #0
 800928e:	4252      	negs	r2, r2
 8009290:	6062      	str	r2, [r4, #4]
 8009292:	a904      	add	r1, sp, #16
 8009294:	3254      	adds	r2, #84	@ 0x54
 8009296:	1852      	adds	r2, r2, r1
 8009298:	1c6e      	adds	r6, r5, #1
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	60e3      	str	r3, [r4, #12]
 800929e:	60a3      	str	r3, [r4, #8]
 80092a0:	7013      	strb	r3, [r2, #0]
 80092a2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80092a4:	4b54      	ldr	r3, [pc, #336]	@ (80093f8 <_svfiprintf_r+0x1e8>)
 80092a6:	2205      	movs	r2, #5
 80092a8:	0018      	movs	r0, r3
 80092aa:	7831      	ldrb	r1, [r6, #0]
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	f7fd fc4e 	bl	8006b4e <memchr>
 80092b2:	1c75      	adds	r5, r6, #1
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d11f      	bne.n	80092f8 <_svfiprintf_r+0xe8>
 80092b8:	6822      	ldr	r2, [r4, #0]
 80092ba:	06d3      	lsls	r3, r2, #27
 80092bc:	d504      	bpl.n	80092c8 <_svfiprintf_r+0xb8>
 80092be:	2353      	movs	r3, #83	@ 0x53
 80092c0:	a904      	add	r1, sp, #16
 80092c2:	185b      	adds	r3, r3, r1
 80092c4:	2120      	movs	r1, #32
 80092c6:	7019      	strb	r1, [r3, #0]
 80092c8:	0713      	lsls	r3, r2, #28
 80092ca:	d504      	bpl.n	80092d6 <_svfiprintf_r+0xc6>
 80092cc:	2353      	movs	r3, #83	@ 0x53
 80092ce:	a904      	add	r1, sp, #16
 80092d0:	185b      	adds	r3, r3, r1
 80092d2:	212b      	movs	r1, #43	@ 0x2b
 80092d4:	7019      	strb	r1, [r3, #0]
 80092d6:	7833      	ldrb	r3, [r6, #0]
 80092d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092da:	d016      	beq.n	800930a <_svfiprintf_r+0xfa>
 80092dc:	0035      	movs	r5, r6
 80092de:	2100      	movs	r1, #0
 80092e0:	200a      	movs	r0, #10
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	782a      	ldrb	r2, [r5, #0]
 80092e6:	1c6e      	adds	r6, r5, #1
 80092e8:	3a30      	subs	r2, #48	@ 0x30
 80092ea:	2a09      	cmp	r2, #9
 80092ec:	d950      	bls.n	8009390 <_svfiprintf_r+0x180>
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d111      	bne.n	8009316 <_svfiprintf_r+0x106>
 80092f2:	e017      	b.n	8009324 <_svfiprintf_r+0x114>
 80092f4:	3501      	adds	r5, #1
 80092f6:	e7af      	b.n	8009258 <_svfiprintf_r+0x48>
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	1ac0      	subs	r0, r0, r3
 80092fe:	2301      	movs	r3, #1
 8009300:	4083      	lsls	r3, r0
 8009302:	4313      	orrs	r3, r2
 8009304:	002e      	movs	r6, r5
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	e7cc      	b.n	80092a4 <_svfiprintf_r+0x94>
 800930a:	9b07      	ldr	r3, [sp, #28]
 800930c:	1d19      	adds	r1, r3, #4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	9107      	str	r1, [sp, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	db01      	blt.n	800931a <_svfiprintf_r+0x10a>
 8009316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009318:	e004      	b.n	8009324 <_svfiprintf_r+0x114>
 800931a:	425b      	negs	r3, r3
 800931c:	60e3      	str	r3, [r4, #12]
 800931e:	2302      	movs	r3, #2
 8009320:	4313      	orrs	r3, r2
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	782b      	ldrb	r3, [r5, #0]
 8009326:	2b2e      	cmp	r3, #46	@ 0x2e
 8009328:	d10c      	bne.n	8009344 <_svfiprintf_r+0x134>
 800932a:	786b      	ldrb	r3, [r5, #1]
 800932c:	2b2a      	cmp	r3, #42	@ 0x2a
 800932e:	d134      	bne.n	800939a <_svfiprintf_r+0x18a>
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	3502      	adds	r5, #2
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9207      	str	r2, [sp, #28]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da01      	bge.n	8009342 <_svfiprintf_r+0x132>
 800933e:	2301      	movs	r3, #1
 8009340:	425b      	negs	r3, r3
 8009342:	9309      	str	r3, [sp, #36]	@ 0x24
 8009344:	4e2d      	ldr	r6, [pc, #180]	@ (80093fc <_svfiprintf_r+0x1ec>)
 8009346:	2203      	movs	r2, #3
 8009348:	0030      	movs	r0, r6
 800934a:	7829      	ldrb	r1, [r5, #0]
 800934c:	f7fd fbff 	bl	8006b4e <memchr>
 8009350:	2800      	cmp	r0, #0
 8009352:	d006      	beq.n	8009362 <_svfiprintf_r+0x152>
 8009354:	2340      	movs	r3, #64	@ 0x40
 8009356:	1b80      	subs	r0, r0, r6
 8009358:	4083      	lsls	r3, r0
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	3501      	adds	r5, #1
 800935e:	4313      	orrs	r3, r2
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	7829      	ldrb	r1, [r5, #0]
 8009364:	2206      	movs	r2, #6
 8009366:	4826      	ldr	r0, [pc, #152]	@ (8009400 <_svfiprintf_r+0x1f0>)
 8009368:	1c6e      	adds	r6, r5, #1
 800936a:	7621      	strb	r1, [r4, #24]
 800936c:	f7fd fbef 	bl	8006b4e <memchr>
 8009370:	2800      	cmp	r0, #0
 8009372:	d038      	beq.n	80093e6 <_svfiprintf_r+0x1d6>
 8009374:	4b23      	ldr	r3, [pc, #140]	@ (8009404 <_svfiprintf_r+0x1f4>)
 8009376:	2b00      	cmp	r3, #0
 8009378:	d122      	bne.n	80093c0 <_svfiprintf_r+0x1b0>
 800937a:	2207      	movs	r2, #7
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	3307      	adds	r3, #7
 8009380:	4393      	bics	r3, r2
 8009382:	3308      	adds	r3, #8
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	6963      	ldr	r3, [r4, #20]
 8009388:	9a04      	ldr	r2, [sp, #16]
 800938a:	189b      	adds	r3, r3, r2
 800938c:	6163      	str	r3, [r4, #20]
 800938e:	e762      	b.n	8009256 <_svfiprintf_r+0x46>
 8009390:	4343      	muls	r3, r0
 8009392:	0035      	movs	r5, r6
 8009394:	2101      	movs	r1, #1
 8009396:	189b      	adds	r3, r3, r2
 8009398:	e7a4      	b.n	80092e4 <_svfiprintf_r+0xd4>
 800939a:	2300      	movs	r3, #0
 800939c:	200a      	movs	r0, #10
 800939e:	0019      	movs	r1, r3
 80093a0:	3501      	adds	r5, #1
 80093a2:	6063      	str	r3, [r4, #4]
 80093a4:	782a      	ldrb	r2, [r5, #0]
 80093a6:	1c6e      	adds	r6, r5, #1
 80093a8:	3a30      	subs	r2, #48	@ 0x30
 80093aa:	2a09      	cmp	r2, #9
 80093ac:	d903      	bls.n	80093b6 <_svfiprintf_r+0x1a6>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0c8      	beq.n	8009344 <_svfiprintf_r+0x134>
 80093b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80093b4:	e7c6      	b.n	8009344 <_svfiprintf_r+0x134>
 80093b6:	4341      	muls	r1, r0
 80093b8:	0035      	movs	r5, r6
 80093ba:	2301      	movs	r3, #1
 80093bc:	1889      	adds	r1, r1, r2
 80093be:	e7f1      	b.n	80093a4 <_svfiprintf_r+0x194>
 80093c0:	aa07      	add	r2, sp, #28
 80093c2:	9200      	str	r2, [sp, #0]
 80093c4:	0021      	movs	r1, r4
 80093c6:	003a      	movs	r2, r7
 80093c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009408 <_svfiprintf_r+0x1f8>)
 80093ca:	9803      	ldr	r0, [sp, #12]
 80093cc:	f7fc fc3e 	bl	8005c4c <_printf_float>
 80093d0:	9004      	str	r0, [sp, #16]
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	3301      	adds	r3, #1
 80093d6:	d1d6      	bne.n	8009386 <_svfiprintf_r+0x176>
 80093d8:	89bb      	ldrh	r3, [r7, #12]
 80093da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80093dc:	065b      	lsls	r3, r3, #25
 80093de:	d500      	bpl.n	80093e2 <_svfiprintf_r+0x1d2>
 80093e0:	e72c      	b.n	800923c <_svfiprintf_r+0x2c>
 80093e2:	b021      	add	sp, #132	@ 0x84
 80093e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e6:	aa07      	add	r2, sp, #28
 80093e8:	9200      	str	r2, [sp, #0]
 80093ea:	0021      	movs	r1, r4
 80093ec:	003a      	movs	r2, r7
 80093ee:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <_svfiprintf_r+0x1f8>)
 80093f0:	9803      	ldr	r0, [sp, #12]
 80093f2:	f7fc fed9 	bl	80061a8 <_printf_i>
 80093f6:	e7eb      	b.n	80093d0 <_svfiprintf_r+0x1c0>
 80093f8:	0800a859 	.word	0x0800a859
 80093fc:	0800a85f 	.word	0x0800a85f
 8009400:	0800a863 	.word	0x0800a863
 8009404:	08005c4d 	.word	0x08005c4d
 8009408:	08009151 	.word	0x08009151

0800940c <__sflush_r>:
 800940c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940e:	220c      	movs	r2, #12
 8009410:	5e8b      	ldrsh	r3, [r1, r2]
 8009412:	0005      	movs	r5, r0
 8009414:	000c      	movs	r4, r1
 8009416:	071a      	lsls	r2, r3, #28
 8009418:	d456      	bmi.n	80094c8 <__sflush_r+0xbc>
 800941a:	684a      	ldr	r2, [r1, #4]
 800941c:	2a00      	cmp	r2, #0
 800941e:	dc02      	bgt.n	8009426 <__sflush_r+0x1a>
 8009420:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009422:	2a00      	cmp	r2, #0
 8009424:	dd4e      	ble.n	80094c4 <__sflush_r+0xb8>
 8009426:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009428:	2f00      	cmp	r7, #0
 800942a:	d04b      	beq.n	80094c4 <__sflush_r+0xb8>
 800942c:	2200      	movs	r2, #0
 800942e:	2080      	movs	r0, #128	@ 0x80
 8009430:	682e      	ldr	r6, [r5, #0]
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	001a      	movs	r2, r3
 8009436:	0140      	lsls	r0, r0, #5
 8009438:	6a21      	ldr	r1, [r4, #32]
 800943a:	4002      	ands	r2, r0
 800943c:	4203      	tst	r3, r0
 800943e:	d033      	beq.n	80094a8 <__sflush_r+0x9c>
 8009440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	075b      	lsls	r3, r3, #29
 8009446:	d506      	bpl.n	8009456 <__sflush_r+0x4a>
 8009448:	6863      	ldr	r3, [r4, #4]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <__sflush_r+0x4a>
 8009452:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	2300      	movs	r3, #0
 8009458:	0028      	movs	r0, r5
 800945a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800945c:	6a21      	ldr	r1, [r4, #32]
 800945e:	47b8      	blx	r7
 8009460:	89a2      	ldrh	r2, [r4, #12]
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d106      	bne.n	8009474 <__sflush_r+0x68>
 8009466:	6829      	ldr	r1, [r5, #0]
 8009468:	291d      	cmp	r1, #29
 800946a:	d846      	bhi.n	80094fa <__sflush_r+0xee>
 800946c:	4b29      	ldr	r3, [pc, #164]	@ (8009514 <__sflush_r+0x108>)
 800946e:	410b      	asrs	r3, r1
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d442      	bmi.n	80094fa <__sflush_r+0xee>
 8009474:	2300      	movs	r3, #0
 8009476:	6063      	str	r3, [r4, #4]
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	04d2      	lsls	r2, r2, #19
 800947e:	d505      	bpl.n	800948c <__sflush_r+0x80>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <__sflush_r+0x7e>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d100      	bne.n	800948c <__sflush_r+0x80>
 800948a:	6560      	str	r0, [r4, #84]	@ 0x54
 800948c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800948e:	602e      	str	r6, [r5, #0]
 8009490:	2900      	cmp	r1, #0
 8009492:	d017      	beq.n	80094c4 <__sflush_r+0xb8>
 8009494:	0023      	movs	r3, r4
 8009496:	3344      	adds	r3, #68	@ 0x44
 8009498:	4299      	cmp	r1, r3
 800949a:	d002      	beq.n	80094a2 <__sflush_r+0x96>
 800949c:	0028      	movs	r0, r5
 800949e:	f7fe f9e7 	bl	8007870 <_free_r>
 80094a2:	2300      	movs	r3, #0
 80094a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094a6:	e00d      	b.n	80094c4 <__sflush_r+0xb8>
 80094a8:	2301      	movs	r3, #1
 80094aa:	0028      	movs	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	0002      	movs	r2, r0
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d1c6      	bne.n	8009442 <__sflush_r+0x36>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0c3      	beq.n	8009442 <__sflush_r+0x36>
 80094ba:	2b1d      	cmp	r3, #29
 80094bc:	d001      	beq.n	80094c2 <__sflush_r+0xb6>
 80094be:	2b16      	cmp	r3, #22
 80094c0:	d11a      	bne.n	80094f8 <__sflush_r+0xec>
 80094c2:	602e      	str	r6, [r5, #0]
 80094c4:	2000      	movs	r0, #0
 80094c6:	e01e      	b.n	8009506 <__sflush_r+0xfa>
 80094c8:	690e      	ldr	r6, [r1, #16]
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	d0fa      	beq.n	80094c4 <__sflush_r+0xb8>
 80094ce:	680f      	ldr	r7, [r1, #0]
 80094d0:	600e      	str	r6, [r1, #0]
 80094d2:	1bba      	subs	r2, r7, r6
 80094d4:	9201      	str	r2, [sp, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	079b      	lsls	r3, r3, #30
 80094da:	d100      	bne.n	80094de <__sflush_r+0xd2>
 80094dc:	694a      	ldr	r2, [r1, #20]
 80094de:	60a2      	str	r2, [r4, #8]
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	ddee      	ble.n	80094c4 <__sflush_r+0xb8>
 80094e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80094e8:	0032      	movs	r2, r6
 80094ea:	001f      	movs	r7, r3
 80094ec:	0028      	movs	r0, r5
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	47b8      	blx	r7
 80094f4:	2800      	cmp	r0, #0
 80094f6:	dc07      	bgt.n	8009508 <__sflush_r+0xfc>
 80094f8:	89a2      	ldrh	r2, [r4, #12]
 80094fa:	2340      	movs	r3, #64	@ 0x40
 80094fc:	2001      	movs	r0, #1
 80094fe:	4313      	orrs	r3, r2
 8009500:	b21b      	sxth	r3, r3
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	4240      	negs	r0, r0
 8009506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	1836      	adds	r6, r6, r0
 800950c:	1a1b      	subs	r3, r3, r0
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	e7e6      	b.n	80094e0 <__sflush_r+0xd4>
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	dfbffffe 	.word	0xdfbffffe

08009518 <_fflush_r>:
 8009518:	690b      	ldr	r3, [r1, #16]
 800951a:	b570      	push	{r4, r5, r6, lr}
 800951c:	0005      	movs	r5, r0
 800951e:	000c      	movs	r4, r1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <_fflush_r+0x12>
 8009524:	2500      	movs	r5, #0
 8009526:	0028      	movs	r0, r5
 8009528:	bd70      	pop	{r4, r5, r6, pc}
 800952a:	2800      	cmp	r0, #0
 800952c:	d004      	beq.n	8009538 <_fflush_r+0x20>
 800952e:	6a03      	ldr	r3, [r0, #32]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <_fflush_r+0x20>
 8009534:	f7fd f9e4 	bl	8006900 <__sinit>
 8009538:	220c      	movs	r2, #12
 800953a:	5ea3      	ldrsh	r3, [r4, r2]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0f1      	beq.n	8009524 <_fflush_r+0xc>
 8009540:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009542:	07d2      	lsls	r2, r2, #31
 8009544:	d404      	bmi.n	8009550 <_fflush_r+0x38>
 8009546:	059b      	lsls	r3, r3, #22
 8009548:	d402      	bmi.n	8009550 <_fflush_r+0x38>
 800954a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800954c:	f7fd fafd 	bl	8006b4a <__retarget_lock_acquire_recursive>
 8009550:	0028      	movs	r0, r5
 8009552:	0021      	movs	r1, r4
 8009554:	f7ff ff5a 	bl	800940c <__sflush_r>
 8009558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800955a:	0005      	movs	r5, r0
 800955c:	07db      	lsls	r3, r3, #31
 800955e:	d4e2      	bmi.n	8009526 <_fflush_r+0xe>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	059b      	lsls	r3, r3, #22
 8009564:	d4df      	bmi.n	8009526 <_fflush_r+0xe>
 8009566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009568:	f7fd faf0 	bl	8006b4c <__retarget_lock_release_recursive>
 800956c:	e7db      	b.n	8009526 <_fflush_r+0xe>

0800956e <memmove>:
 800956e:	b510      	push	{r4, lr}
 8009570:	4288      	cmp	r0, r1
 8009572:	d806      	bhi.n	8009582 <memmove+0x14>
 8009574:	2300      	movs	r3, #0
 8009576:	429a      	cmp	r2, r3
 8009578:	d008      	beq.n	800958c <memmove+0x1e>
 800957a:	5ccc      	ldrb	r4, [r1, r3]
 800957c:	54c4      	strb	r4, [r0, r3]
 800957e:	3301      	adds	r3, #1
 8009580:	e7f9      	b.n	8009576 <memmove+0x8>
 8009582:	188b      	adds	r3, r1, r2
 8009584:	4298      	cmp	r0, r3
 8009586:	d2f5      	bcs.n	8009574 <memmove+0x6>
 8009588:	3a01      	subs	r2, #1
 800958a:	d200      	bcs.n	800958e <memmove+0x20>
 800958c:	bd10      	pop	{r4, pc}
 800958e:	5c8b      	ldrb	r3, [r1, r2]
 8009590:	5483      	strb	r3, [r0, r2]
 8009592:	e7f9      	b.n	8009588 <memmove+0x1a>

08009594 <strncmp>:
 8009594:	b530      	push	{r4, r5, lr}
 8009596:	0005      	movs	r5, r0
 8009598:	1e10      	subs	r0, r2, #0
 800959a:	d00b      	beq.n	80095b4 <strncmp+0x20>
 800959c:	2400      	movs	r4, #0
 800959e:	3a01      	subs	r2, #1
 80095a0:	5d2b      	ldrb	r3, [r5, r4]
 80095a2:	5d08      	ldrb	r0, [r1, r4]
 80095a4:	4283      	cmp	r3, r0
 80095a6:	d104      	bne.n	80095b2 <strncmp+0x1e>
 80095a8:	42a2      	cmp	r2, r4
 80095aa:	d002      	beq.n	80095b2 <strncmp+0x1e>
 80095ac:	3401      	adds	r4, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f6      	bne.n	80095a0 <strncmp+0xc>
 80095b2:	1a18      	subs	r0, r3, r0
 80095b4:	bd30      	pop	{r4, r5, pc}
	...

080095b8 <_sbrk_r>:
 80095b8:	2300      	movs	r3, #0
 80095ba:	b570      	push	{r4, r5, r6, lr}
 80095bc:	4d06      	ldr	r5, [pc, #24]	@ (80095d8 <_sbrk_r+0x20>)
 80095be:	0004      	movs	r4, r0
 80095c0:	0008      	movs	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f9 fe72 	bl	80032ac <_sbrk>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d103      	bne.n	80095d4 <_sbrk_r+0x1c>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d000      	beq.n	80095d4 <_sbrk_r+0x1c>
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
 80095d6:	46c0      	nop			@ (mov r8, r8)
 80095d8:	2000049c 	.word	0x2000049c

080095dc <memcpy>:
 80095dc:	2300      	movs	r3, #0
 80095de:	b510      	push	{r4, lr}
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d100      	bne.n	80095e6 <memcpy+0xa>
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	5ccc      	ldrb	r4, [r1, r3]
 80095e8:	54c4      	strb	r4, [r0, r3]
 80095ea:	3301      	adds	r3, #1
 80095ec:	e7f8      	b.n	80095e0 <memcpy+0x4>
	...

080095f0 <nan>:
 80095f0:	2000      	movs	r0, #0
 80095f2:	4901      	ldr	r1, [pc, #4]	@ (80095f8 <nan+0x8>)
 80095f4:	4770      	bx	lr
 80095f6:	46c0      	nop			@ (mov r8, r8)
 80095f8:	7ff80000 	.word	0x7ff80000

080095fc <__assert_func>:
 80095fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095fe:	0014      	movs	r4, r2
 8009600:	001a      	movs	r2, r3
 8009602:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <__assert_func+0x2c>)
 8009604:	0005      	movs	r5, r0
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	000e      	movs	r6, r1
 800960a:	68d8      	ldr	r0, [r3, #12]
 800960c:	4b07      	ldr	r3, [pc, #28]	@ (800962c <__assert_func+0x30>)
 800960e:	2c00      	cmp	r4, #0
 8009610:	d101      	bne.n	8009616 <__assert_func+0x1a>
 8009612:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <__assert_func+0x34>)
 8009614:	001c      	movs	r4, r3
 8009616:	4907      	ldr	r1, [pc, #28]	@ (8009634 <__assert_func+0x38>)
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	9402      	str	r4, [sp, #8]
 800961c:	002b      	movs	r3, r5
 800961e:	9600      	str	r6, [sp, #0]
 8009620:	f000 fbe0 	bl	8009de4 <fiprintf>
 8009624:	f000 fbee 	bl	8009e04 <abort>
 8009628:	20000018 	.word	0x20000018
 800962c:	0800a872 	.word	0x0800a872
 8009630:	0800a8ad 	.word	0x0800a8ad
 8009634:	0800a87f 	.word	0x0800a87f

08009638 <_calloc_r>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	0c0b      	lsrs	r3, r1, #16
 800963c:	0c15      	lsrs	r5, r2, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	d11e      	bne.n	8009680 <_calloc_r+0x48>
 8009642:	2d00      	cmp	r5, #0
 8009644:	d10c      	bne.n	8009660 <_calloc_r+0x28>
 8009646:	b289      	uxth	r1, r1
 8009648:	b294      	uxth	r4, r2
 800964a:	434c      	muls	r4, r1
 800964c:	0021      	movs	r1, r4
 800964e:	f7fe f985 	bl	800795c <_malloc_r>
 8009652:	1e05      	subs	r5, r0, #0
 8009654:	d01a      	beq.n	800968c <_calloc_r+0x54>
 8009656:	0022      	movs	r2, r4
 8009658:	2100      	movs	r1, #0
 800965a:	f7fd f9f1 	bl	8006a40 <memset>
 800965e:	e016      	b.n	800968e <_calloc_r+0x56>
 8009660:	1c2b      	adds	r3, r5, #0
 8009662:	1c0c      	adds	r4, r1, #0
 8009664:	b289      	uxth	r1, r1
 8009666:	b292      	uxth	r2, r2
 8009668:	434a      	muls	r2, r1
 800966a:	b29b      	uxth	r3, r3
 800966c:	b2a1      	uxth	r1, r4
 800966e:	4359      	muls	r1, r3
 8009670:	0c14      	lsrs	r4, r2, #16
 8009672:	190c      	adds	r4, r1, r4
 8009674:	0c23      	lsrs	r3, r4, #16
 8009676:	d107      	bne.n	8009688 <_calloc_r+0x50>
 8009678:	0424      	lsls	r4, r4, #16
 800967a:	b292      	uxth	r2, r2
 800967c:	4314      	orrs	r4, r2
 800967e:	e7e5      	b.n	800964c <_calloc_r+0x14>
 8009680:	2d00      	cmp	r5, #0
 8009682:	d101      	bne.n	8009688 <_calloc_r+0x50>
 8009684:	1c14      	adds	r4, r2, #0
 8009686:	e7ed      	b.n	8009664 <_calloc_r+0x2c>
 8009688:	230c      	movs	r3, #12
 800968a:	6003      	str	r3, [r0, #0]
 800968c:	2500      	movs	r5, #0
 800968e:	0028      	movs	r0, r5
 8009690:	bd70      	pop	{r4, r5, r6, pc}

08009692 <rshift>:
 8009692:	0002      	movs	r2, r0
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	6904      	ldr	r4, [r0, #16]
 8009698:	b085      	sub	sp, #20
 800969a:	3214      	adds	r2, #20
 800969c:	114b      	asrs	r3, r1, #5
 800969e:	0016      	movs	r6, r2
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	429c      	cmp	r4, r3
 80096a4:	dd31      	ble.n	800970a <rshift+0x78>
 80096a6:	261f      	movs	r6, #31
 80096a8:	000f      	movs	r7, r1
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	00a5      	lsls	r5, r4, #2
 80096ae:	18d3      	adds	r3, r2, r3
 80096b0:	4037      	ands	r7, r6
 80096b2:	1955      	adds	r5, r2, r5
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	9701      	str	r7, [sp, #4]
 80096b8:	4231      	tst	r1, r6
 80096ba:	d10d      	bne.n	80096d8 <rshift+0x46>
 80096bc:	0016      	movs	r6, r2
 80096be:	0019      	movs	r1, r3
 80096c0:	428d      	cmp	r5, r1
 80096c2:	d836      	bhi.n	8009732 <rshift+0xa0>
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	2600      	movs	r6, #0
 80096c8:	3b03      	subs	r3, #3
 80096ca:	429d      	cmp	r5, r3
 80096cc:	d302      	bcc.n	80096d4 <rshift+0x42>
 80096ce:	9b02      	ldr	r3, [sp, #8]
 80096d0:	1ae4      	subs	r4, r4, r3
 80096d2:	00a6      	lsls	r6, r4, #2
 80096d4:	1996      	adds	r6, r2, r6
 80096d6:	e018      	b.n	800970a <rshift+0x78>
 80096d8:	2120      	movs	r1, #32
 80096da:	9e01      	ldr	r6, [sp, #4]
 80096dc:	9f01      	ldr	r7, [sp, #4]
 80096de:	1b89      	subs	r1, r1, r6
 80096e0:	9e00      	ldr	r6, [sp, #0]
 80096e2:	9103      	str	r1, [sp, #12]
 80096e4:	ce02      	ldmia	r6!, {r1}
 80096e6:	4694      	mov	ip, r2
 80096e8:	40f9      	lsrs	r1, r7
 80096ea:	42b5      	cmp	r5, r6
 80096ec:	d816      	bhi.n	800971c <rshift+0x8a>
 80096ee:	9b00      	ldr	r3, [sp, #0]
 80096f0:	2600      	movs	r6, #0
 80096f2:	3301      	adds	r3, #1
 80096f4:	429d      	cmp	r5, r3
 80096f6:	d303      	bcc.n	8009700 <rshift+0x6e>
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	1ae4      	subs	r4, r4, r3
 80096fc:	00a6      	lsls	r6, r4, #2
 80096fe:	3e04      	subs	r6, #4
 8009700:	1996      	adds	r6, r2, r6
 8009702:	6031      	str	r1, [r6, #0]
 8009704:	2900      	cmp	r1, #0
 8009706:	d000      	beq.n	800970a <rshift+0x78>
 8009708:	3604      	adds	r6, #4
 800970a:	1ab1      	subs	r1, r6, r2
 800970c:	1089      	asrs	r1, r1, #2
 800970e:	6101      	str	r1, [r0, #16]
 8009710:	4296      	cmp	r6, r2
 8009712:	d101      	bne.n	8009718 <rshift+0x86>
 8009714:	2300      	movs	r3, #0
 8009716:	6143      	str	r3, [r0, #20]
 8009718:	b005      	add	sp, #20
 800971a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971c:	6837      	ldr	r7, [r6, #0]
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	409f      	lsls	r7, r3
 8009722:	430f      	orrs	r7, r1
 8009724:	4661      	mov	r1, ip
 8009726:	c180      	stmia	r1!, {r7}
 8009728:	468c      	mov	ip, r1
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	ce02      	ldmia	r6!, {r1}
 800972e:	40d9      	lsrs	r1, r3
 8009730:	e7db      	b.n	80096ea <rshift+0x58>
 8009732:	c980      	ldmia	r1!, {r7}
 8009734:	c680      	stmia	r6!, {r7}
 8009736:	e7c3      	b.n	80096c0 <rshift+0x2e>

08009738 <__hexdig_fun>:
 8009738:	0002      	movs	r2, r0
 800973a:	3a30      	subs	r2, #48	@ 0x30
 800973c:	0003      	movs	r3, r0
 800973e:	2a09      	cmp	r2, #9
 8009740:	d802      	bhi.n	8009748 <__hexdig_fun+0x10>
 8009742:	3b20      	subs	r3, #32
 8009744:	b2d8      	uxtb	r0, r3
 8009746:	4770      	bx	lr
 8009748:	0002      	movs	r2, r0
 800974a:	3a61      	subs	r2, #97	@ 0x61
 800974c:	2a05      	cmp	r2, #5
 800974e:	d801      	bhi.n	8009754 <__hexdig_fun+0x1c>
 8009750:	3b47      	subs	r3, #71	@ 0x47
 8009752:	e7f7      	b.n	8009744 <__hexdig_fun+0xc>
 8009754:	001a      	movs	r2, r3
 8009756:	3a41      	subs	r2, #65	@ 0x41
 8009758:	2000      	movs	r0, #0
 800975a:	2a05      	cmp	r2, #5
 800975c:	d8f3      	bhi.n	8009746 <__hexdig_fun+0xe>
 800975e:	3b27      	subs	r3, #39	@ 0x27
 8009760:	e7f0      	b.n	8009744 <__hexdig_fun+0xc>
	...

08009764 <__gethex>:
 8009764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009766:	b089      	sub	sp, #36	@ 0x24
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	680b      	ldr	r3, [r1, #0]
 800976c:	9201      	str	r2, [sp, #4]
 800976e:	9003      	str	r0, [sp, #12]
 8009770:	9106      	str	r1, [sp, #24]
 8009772:	1c9a      	adds	r2, r3, #2
 8009774:	0011      	movs	r1, r2
 8009776:	3201      	adds	r2, #1
 8009778:	1e50      	subs	r0, r2, #1
 800977a:	7800      	ldrb	r0, [r0, #0]
 800977c:	2830      	cmp	r0, #48	@ 0x30
 800977e:	d0f9      	beq.n	8009774 <__gethex+0x10>
 8009780:	1acb      	subs	r3, r1, r3
 8009782:	3b02      	subs	r3, #2
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	9100      	str	r1, [sp, #0]
 8009788:	f7ff ffd6 	bl	8009738 <__hexdig_fun>
 800978c:	2300      	movs	r3, #0
 800978e:	001d      	movs	r5, r3
 8009790:	9302      	str	r3, [sp, #8]
 8009792:	4298      	cmp	r0, r3
 8009794:	d11e      	bne.n	80097d4 <__gethex+0x70>
 8009796:	2201      	movs	r2, #1
 8009798:	49a6      	ldr	r1, [pc, #664]	@ (8009a34 <__gethex+0x2d0>)
 800979a:	9800      	ldr	r0, [sp, #0]
 800979c:	f7ff fefa 	bl	8009594 <strncmp>
 80097a0:	0007      	movs	r7, r0
 80097a2:	42a8      	cmp	r0, r5
 80097a4:	d000      	beq.n	80097a8 <__gethex+0x44>
 80097a6:	e06a      	b.n	800987e <__gethex+0x11a>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	7858      	ldrb	r0, [r3, #1]
 80097ac:	1c5c      	adds	r4, r3, #1
 80097ae:	f7ff ffc3 	bl	8009738 <__hexdig_fun>
 80097b2:	2301      	movs	r3, #1
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	42a8      	cmp	r0, r5
 80097b8:	d02f      	beq.n	800981a <__gethex+0xb6>
 80097ba:	9400      	str	r4, [sp, #0]
 80097bc:	9b00      	ldr	r3, [sp, #0]
 80097be:	7818      	ldrb	r0, [r3, #0]
 80097c0:	2830      	cmp	r0, #48	@ 0x30
 80097c2:	d009      	beq.n	80097d8 <__gethex+0x74>
 80097c4:	f7ff ffb8 	bl	8009738 <__hexdig_fun>
 80097c8:	4242      	negs	r2, r0
 80097ca:	4142      	adcs	r2, r0
 80097cc:	2301      	movs	r3, #1
 80097ce:	0025      	movs	r5, r4
 80097d0:	9202      	str	r2, [sp, #8]
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	9c00      	ldr	r4, [sp, #0]
 80097d6:	e004      	b.n	80097e2 <__gethex+0x7e>
 80097d8:	9b00      	ldr	r3, [sp, #0]
 80097da:	3301      	adds	r3, #1
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	e7ed      	b.n	80097bc <__gethex+0x58>
 80097e0:	3401      	adds	r4, #1
 80097e2:	7820      	ldrb	r0, [r4, #0]
 80097e4:	f7ff ffa8 	bl	8009738 <__hexdig_fun>
 80097e8:	1e07      	subs	r7, r0, #0
 80097ea:	d1f9      	bne.n	80097e0 <__gethex+0x7c>
 80097ec:	2201      	movs	r2, #1
 80097ee:	0020      	movs	r0, r4
 80097f0:	4990      	ldr	r1, [pc, #576]	@ (8009a34 <__gethex+0x2d0>)
 80097f2:	f7ff fecf 	bl	8009594 <strncmp>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d10d      	bne.n	8009816 <__gethex+0xb2>
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	d106      	bne.n	800980c <__gethex+0xa8>
 80097fe:	3401      	adds	r4, #1
 8009800:	0025      	movs	r5, r4
 8009802:	7820      	ldrb	r0, [r4, #0]
 8009804:	f7ff ff98 	bl	8009738 <__hexdig_fun>
 8009808:	2800      	cmp	r0, #0
 800980a:	d102      	bne.n	8009812 <__gethex+0xae>
 800980c:	1b2d      	subs	r5, r5, r4
 800980e:	00af      	lsls	r7, r5, #2
 8009810:	e003      	b.n	800981a <__gethex+0xb6>
 8009812:	3401      	adds	r4, #1
 8009814:	e7f5      	b.n	8009802 <__gethex+0x9e>
 8009816:	2d00      	cmp	r5, #0
 8009818:	d1f8      	bne.n	800980c <__gethex+0xa8>
 800981a:	2220      	movs	r2, #32
 800981c:	7823      	ldrb	r3, [r4, #0]
 800981e:	0026      	movs	r6, r4
 8009820:	4393      	bics	r3, r2
 8009822:	2b50      	cmp	r3, #80	@ 0x50
 8009824:	d11d      	bne.n	8009862 <__gethex+0xfe>
 8009826:	7863      	ldrb	r3, [r4, #1]
 8009828:	2b2b      	cmp	r3, #43	@ 0x2b
 800982a:	d02d      	beq.n	8009888 <__gethex+0x124>
 800982c:	2b2d      	cmp	r3, #45	@ 0x2d
 800982e:	d02f      	beq.n	8009890 <__gethex+0x12c>
 8009830:	2300      	movs	r3, #0
 8009832:	1c66      	adds	r6, r4, #1
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	7830      	ldrb	r0, [r6, #0]
 8009838:	f7ff ff7e 	bl	8009738 <__hexdig_fun>
 800983c:	1e43      	subs	r3, r0, #1
 800983e:	b2db      	uxtb	r3, r3
 8009840:	0005      	movs	r5, r0
 8009842:	2b18      	cmp	r3, #24
 8009844:	d82a      	bhi.n	800989c <__gethex+0x138>
 8009846:	7870      	ldrb	r0, [r6, #1]
 8009848:	f7ff ff76 	bl	8009738 <__hexdig_fun>
 800984c:	1e43      	subs	r3, r0, #1
 800984e:	b2db      	uxtb	r3, r3
 8009850:	3601      	adds	r6, #1
 8009852:	3d10      	subs	r5, #16
 8009854:	2b18      	cmp	r3, #24
 8009856:	d91d      	bls.n	8009894 <__gethex+0x130>
 8009858:	9b04      	ldr	r3, [sp, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d000      	beq.n	8009860 <__gethex+0xfc>
 800985e:	426d      	negs	r5, r5
 8009860:	197f      	adds	r7, r7, r5
 8009862:	9b06      	ldr	r3, [sp, #24]
 8009864:	601e      	str	r6, [r3, #0]
 8009866:	9b02      	ldr	r3, [sp, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d019      	beq.n	80098a0 <__gethex+0x13c>
 800986c:	9b05      	ldr	r3, [sp, #20]
 800986e:	2606      	movs	r6, #6
 8009870:	425a      	negs	r2, r3
 8009872:	4153      	adcs	r3, r2
 8009874:	425b      	negs	r3, r3
 8009876:	401e      	ands	r6, r3
 8009878:	0030      	movs	r0, r6
 800987a:	b009      	add	sp, #36	@ 0x24
 800987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987e:	2301      	movs	r3, #1
 8009880:	2700      	movs	r7, #0
 8009882:	9c00      	ldr	r4, [sp, #0]
 8009884:	9302      	str	r3, [sp, #8]
 8009886:	e7c8      	b.n	800981a <__gethex+0xb6>
 8009888:	2300      	movs	r3, #0
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	1ca6      	adds	r6, r4, #2
 800988e:	e7d2      	b.n	8009836 <__gethex+0xd2>
 8009890:	2301      	movs	r3, #1
 8009892:	e7fa      	b.n	800988a <__gethex+0x126>
 8009894:	230a      	movs	r3, #10
 8009896:	435d      	muls	r5, r3
 8009898:	182d      	adds	r5, r5, r0
 800989a:	e7d4      	b.n	8009846 <__gethex+0xe2>
 800989c:	0026      	movs	r6, r4
 800989e:	e7e0      	b.n	8009862 <__gethex+0xfe>
 80098a0:	9b00      	ldr	r3, [sp, #0]
 80098a2:	9902      	ldr	r1, [sp, #8]
 80098a4:	1ae3      	subs	r3, r4, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b07      	cmp	r3, #7
 80098aa:	dc0a      	bgt.n	80098c2 <__gethex+0x15e>
 80098ac:	9803      	ldr	r0, [sp, #12]
 80098ae:	f7fe f8e5 	bl	8007a7c <_Balloc>
 80098b2:	1e05      	subs	r5, r0, #0
 80098b4:	d108      	bne.n	80098c8 <__gethex+0x164>
 80098b6:	002a      	movs	r2, r5
 80098b8:	21e4      	movs	r1, #228	@ 0xe4
 80098ba:	4b5f      	ldr	r3, [pc, #380]	@ (8009a38 <__gethex+0x2d4>)
 80098bc:	485f      	ldr	r0, [pc, #380]	@ (8009a3c <__gethex+0x2d8>)
 80098be:	f7ff fe9d 	bl	80095fc <__assert_func>
 80098c2:	3101      	adds	r1, #1
 80098c4:	105b      	asrs	r3, r3, #1
 80098c6:	e7ef      	b.n	80098a8 <__gethex+0x144>
 80098c8:	0003      	movs	r3, r0
 80098ca:	3314      	adds	r3, #20
 80098cc:	9302      	str	r3, [sp, #8]
 80098ce:	9305      	str	r3, [sp, #20]
 80098d0:	2300      	movs	r3, #0
 80098d2:	001e      	movs	r6, r3
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	9b00      	ldr	r3, [sp, #0]
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d338      	bcc.n	800994e <__gethex+0x1ea>
 80098dc:	9c05      	ldr	r4, [sp, #20]
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	c440      	stmia	r4!, {r6}
 80098e2:	1ae4      	subs	r4, r4, r3
 80098e4:	10a4      	asrs	r4, r4, #2
 80098e6:	0030      	movs	r0, r6
 80098e8:	612c      	str	r4, [r5, #16]
 80098ea:	f7fe f9bf 	bl	8007c6c <__hi0bits>
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	0164      	lsls	r4, r4, #5
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	1a26      	subs	r6, r4, r0
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	429e      	cmp	r6, r3
 80098fa:	dd52      	ble.n	80099a2 <__gethex+0x23e>
 80098fc:	1af6      	subs	r6, r6, r3
 80098fe:	0031      	movs	r1, r6
 8009900:	0028      	movs	r0, r5
 8009902:	f7fe fd62 	bl	80083ca <__any_on>
 8009906:	1e04      	subs	r4, r0, #0
 8009908:	d00f      	beq.n	800992a <__gethex+0x1c6>
 800990a:	2401      	movs	r4, #1
 800990c:	231f      	movs	r3, #31
 800990e:	0020      	movs	r0, r4
 8009910:	1e72      	subs	r2, r6, #1
 8009912:	4013      	ands	r3, r2
 8009914:	4098      	lsls	r0, r3
 8009916:	0003      	movs	r3, r0
 8009918:	1151      	asrs	r1, r2, #5
 800991a:	9802      	ldr	r0, [sp, #8]
 800991c:	0089      	lsls	r1, r1, #2
 800991e:	5809      	ldr	r1, [r1, r0]
 8009920:	4219      	tst	r1, r3
 8009922:	d002      	beq.n	800992a <__gethex+0x1c6>
 8009924:	42a2      	cmp	r2, r4
 8009926:	dc34      	bgt.n	8009992 <__gethex+0x22e>
 8009928:	2402      	movs	r4, #2
 800992a:	0031      	movs	r1, r6
 800992c:	0028      	movs	r0, r5
 800992e:	f7ff feb0 	bl	8009692 <rshift>
 8009932:	19bf      	adds	r7, r7, r6
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	42bb      	cmp	r3, r7
 800993a:	da42      	bge.n	80099c2 <__gethex+0x25e>
 800993c:	0029      	movs	r1, r5
 800993e:	9803      	ldr	r0, [sp, #12]
 8009940:	f7fe f8e0 	bl	8007b04 <_Bfree>
 8009944:	2300      	movs	r3, #0
 8009946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009948:	26a3      	movs	r6, #163	@ 0xa3
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	e794      	b.n	8009878 <__gethex+0x114>
 800994e:	3c01      	subs	r4, #1
 8009950:	7823      	ldrb	r3, [r4, #0]
 8009952:	2b2e      	cmp	r3, #46	@ 0x2e
 8009954:	d012      	beq.n	800997c <__gethex+0x218>
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	2b20      	cmp	r3, #32
 800995a:	d104      	bne.n	8009966 <__gethex+0x202>
 800995c:	9b05      	ldr	r3, [sp, #20]
 800995e:	c340      	stmia	r3!, {r6}
 8009960:	2600      	movs	r6, #0
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	9604      	str	r6, [sp, #16]
 8009966:	7820      	ldrb	r0, [r4, #0]
 8009968:	f7ff fee6 	bl	8009738 <__hexdig_fun>
 800996c:	230f      	movs	r3, #15
 800996e:	4018      	ands	r0, r3
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	4098      	lsls	r0, r3
 8009974:	3304      	adds	r3, #4
 8009976:	4306      	orrs	r6, r0
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	e7ac      	b.n	80098d6 <__gethex+0x172>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	42a3      	cmp	r3, r4
 8009980:	d8e9      	bhi.n	8009956 <__gethex+0x1f2>
 8009982:	2201      	movs	r2, #1
 8009984:	0020      	movs	r0, r4
 8009986:	492b      	ldr	r1, [pc, #172]	@ (8009a34 <__gethex+0x2d0>)
 8009988:	f7ff fe04 	bl	8009594 <strncmp>
 800998c:	2800      	cmp	r0, #0
 800998e:	d1e2      	bne.n	8009956 <__gethex+0x1f2>
 8009990:	e7a1      	b.n	80098d6 <__gethex+0x172>
 8009992:	0028      	movs	r0, r5
 8009994:	1eb1      	subs	r1, r6, #2
 8009996:	f7fe fd18 	bl	80083ca <__any_on>
 800999a:	2800      	cmp	r0, #0
 800999c:	d0c4      	beq.n	8009928 <__gethex+0x1c4>
 800999e:	2403      	movs	r4, #3
 80099a0:	e7c3      	b.n	800992a <__gethex+0x1c6>
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	2400      	movs	r4, #0
 80099a6:	429e      	cmp	r6, r3
 80099a8:	dac4      	bge.n	8009934 <__gethex+0x1d0>
 80099aa:	1b9e      	subs	r6, r3, r6
 80099ac:	0029      	movs	r1, r5
 80099ae:	0032      	movs	r2, r6
 80099b0:	9803      	ldr	r0, [sp, #12]
 80099b2:	f7fe fad1 	bl	8007f58 <__lshift>
 80099b6:	0003      	movs	r3, r0
 80099b8:	3314      	adds	r3, #20
 80099ba:	0005      	movs	r5, r0
 80099bc:	1bbf      	subs	r7, r7, r6
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	e7b8      	b.n	8009934 <__gethex+0x1d0>
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	685e      	ldr	r6, [r3, #4]
 80099c6:	42be      	cmp	r6, r7
 80099c8:	dd6f      	ble.n	8009aaa <__gethex+0x346>
 80099ca:	9b00      	ldr	r3, [sp, #0]
 80099cc:	1bf6      	subs	r6, r6, r7
 80099ce:	42b3      	cmp	r3, r6
 80099d0:	dc36      	bgt.n	8009a40 <__gethex+0x2dc>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d024      	beq.n	8009a24 <__gethex+0x2c0>
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d026      	beq.n	8009a2c <__gethex+0x2c8>
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d117      	bne.n	8009a12 <__gethex+0x2ae>
 80099e2:	9b00      	ldr	r3, [sp, #0]
 80099e4:	42b3      	cmp	r3, r6
 80099e6:	d114      	bne.n	8009a12 <__gethex+0x2ae>
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10b      	bne.n	8009a04 <__gethex+0x2a0>
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	9a07      	ldr	r2, [sp, #28]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2662      	movs	r6, #98	@ 0x62
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	2301      	movs	r3, #1
 80099f8:	9a02      	ldr	r2, [sp, #8]
 80099fa:	612b      	str	r3, [r5, #16]
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a00:	601d      	str	r5, [r3, #0]
 8009a02:	e739      	b.n	8009878 <__gethex+0x114>
 8009a04:	9900      	ldr	r1, [sp, #0]
 8009a06:	0028      	movs	r0, r5
 8009a08:	3901      	subs	r1, #1
 8009a0a:	f7fe fcde 	bl	80083ca <__any_on>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d1ec      	bne.n	80099ec <__gethex+0x288>
 8009a12:	0029      	movs	r1, r5
 8009a14:	9803      	ldr	r0, [sp, #12]
 8009a16:	f7fe f875 	bl	8007b04 <_Bfree>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a1e:	2650      	movs	r6, #80	@ 0x50
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	e729      	b.n	8009878 <__gethex+0x114>
 8009a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f3      	bne.n	8009a12 <__gethex+0x2ae>
 8009a2a:	e7df      	b.n	80099ec <__gethex+0x288>
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1dc      	bne.n	80099ec <__gethex+0x288>
 8009a32:	e7ee      	b.n	8009a12 <__gethex+0x2ae>
 8009a34:	0800a700 	.word	0x0800a700
 8009a38:	0800a595 	.word	0x0800a595
 8009a3c:	0800a8ae 	.word	0x0800a8ae
 8009a40:	1e77      	subs	r7, r6, #1
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	d12f      	bne.n	8009aa6 <__gethex+0x342>
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	d004      	beq.n	8009a54 <__gethex+0x2f0>
 8009a4a:	0039      	movs	r1, r7
 8009a4c:	0028      	movs	r0, r5
 8009a4e:	f7fe fcbc 	bl	80083ca <__any_on>
 8009a52:	0004      	movs	r4, r0
 8009a54:	231f      	movs	r3, #31
 8009a56:	117a      	asrs	r2, r7, #5
 8009a58:	401f      	ands	r7, r3
 8009a5a:	3b1e      	subs	r3, #30
 8009a5c:	40bb      	lsls	r3, r7
 8009a5e:	9902      	ldr	r1, [sp, #8]
 8009a60:	0092      	lsls	r2, r2, #2
 8009a62:	5852      	ldr	r2, [r2, r1]
 8009a64:	421a      	tst	r2, r3
 8009a66:	d001      	beq.n	8009a6c <__gethex+0x308>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	431c      	orrs	r4, r3
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	0031      	movs	r1, r6
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	2602      	movs	r6, #2
 8009a74:	0028      	movs	r0, r5
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	f7ff fe0b 	bl	8009692 <rshift>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	685f      	ldr	r7, [r3, #4]
 8009a80:	2c00      	cmp	r4, #0
 8009a82:	d03f      	beq.n	8009b04 <__gethex+0x3a0>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d010      	beq.n	8009aae <__gethex+0x34a>
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d012      	beq.n	8009ab6 <__gethex+0x352>
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <__gethex+0x33e>
 8009a94:	07a2      	lsls	r2, r4, #30
 8009a96:	d504      	bpl.n	8009aa2 <__gethex+0x33e>
 8009a98:	9a02      	ldr	r2, [sp, #8]
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	4314      	orrs	r4, r2
 8009a9e:	421c      	tst	r4, r3
 8009aa0:	d10c      	bne.n	8009abc <__gethex+0x358>
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	e02d      	b.n	8009b02 <__gethex+0x39e>
 8009aa6:	2401      	movs	r4, #1
 8009aa8:	e7d4      	b.n	8009a54 <__gethex+0x2f0>
 8009aaa:	2601      	movs	r6, #1
 8009aac:	e7e8      	b.n	8009a80 <__gethex+0x31c>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ab6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f2      	beq.n	8009aa2 <__gethex+0x33e>
 8009abc:	692b      	ldr	r3, [r5, #16]
 8009abe:	2000      	movs	r0, #0
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	002b      	movs	r3, r5
 8009ac8:	9a04      	ldr	r2, [sp, #16]
 8009aca:	3314      	adds	r3, #20
 8009acc:	1899      	adds	r1, r3, r2
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	1c54      	adds	r4, r2, #1
 8009ad2:	d01c      	beq.n	8009b0e <__gethex+0x3aa>
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	002b      	movs	r3, r5
 8009ada:	3314      	adds	r3, #20
 8009adc:	2e02      	cmp	r6, #2
 8009ade:	d13f      	bne.n	8009b60 <__gethex+0x3fc>
 8009ae0:	9a01      	ldr	r2, [sp, #4]
 8009ae2:	9900      	ldr	r1, [sp, #0]
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	3a01      	subs	r2, #1
 8009ae8:	428a      	cmp	r2, r1
 8009aea:	d109      	bne.n	8009b00 <__gethex+0x39c>
 8009aec:	000a      	movs	r2, r1
 8009aee:	201f      	movs	r0, #31
 8009af0:	4010      	ands	r0, r2
 8009af2:	2201      	movs	r2, #1
 8009af4:	4082      	lsls	r2, r0
 8009af6:	1149      	asrs	r1, r1, #5
 8009af8:	0089      	lsls	r1, r1, #2
 8009afa:	58cb      	ldr	r3, [r1, r3]
 8009afc:	4213      	tst	r3, r2
 8009afe:	d13d      	bne.n	8009b7c <__gethex+0x418>
 8009b00:	2320      	movs	r3, #32
 8009b02:	431e      	orrs	r6, r3
 8009b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b06:	601d      	str	r5, [r3, #0]
 8009b08:	9b07      	ldr	r3, [sp, #28]
 8009b0a:	601f      	str	r7, [r3, #0]
 8009b0c:	e6b4      	b.n	8009878 <__gethex+0x114>
 8009b0e:	c301      	stmia	r3!, {r0}
 8009b10:	4299      	cmp	r1, r3
 8009b12:	d8dc      	bhi.n	8009ace <__gethex+0x36a>
 8009b14:	68ab      	ldr	r3, [r5, #8]
 8009b16:	9a02      	ldr	r2, [sp, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	db18      	blt.n	8009b4e <__gethex+0x3ea>
 8009b1c:	6869      	ldr	r1, [r5, #4]
 8009b1e:	9803      	ldr	r0, [sp, #12]
 8009b20:	3101      	adds	r1, #1
 8009b22:	f7fd ffab 	bl	8007a7c <_Balloc>
 8009b26:	1e04      	subs	r4, r0, #0
 8009b28:	d104      	bne.n	8009b34 <__gethex+0x3d0>
 8009b2a:	0022      	movs	r2, r4
 8009b2c:	2184      	movs	r1, #132	@ 0x84
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba4 <__gethex+0x440>)
 8009b30:	481d      	ldr	r0, [pc, #116]	@ (8009ba8 <__gethex+0x444>)
 8009b32:	e6c4      	b.n	80098be <__gethex+0x15a>
 8009b34:	0029      	movs	r1, r5
 8009b36:	692a      	ldr	r2, [r5, #16]
 8009b38:	310c      	adds	r1, #12
 8009b3a:	3202      	adds	r2, #2
 8009b3c:	0092      	lsls	r2, r2, #2
 8009b3e:	300c      	adds	r0, #12
 8009b40:	f7ff fd4c 	bl	80095dc <memcpy>
 8009b44:	0029      	movs	r1, r5
 8009b46:	9803      	ldr	r0, [sp, #12]
 8009b48:	f7fd ffdc 	bl	8007b04 <_Bfree>
 8009b4c:	0025      	movs	r5, r4
 8009b4e:	692b      	ldr	r3, [r5, #16]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	612a      	str	r2, [r5, #16]
 8009b54:	2201      	movs	r2, #1
 8009b56:	3304      	adds	r3, #4
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	18eb      	adds	r3, r5, r3
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	e7bb      	b.n	8009ad8 <__gethex+0x374>
 8009b60:	692a      	ldr	r2, [r5, #16]
 8009b62:	9902      	ldr	r1, [sp, #8]
 8009b64:	428a      	cmp	r2, r1
 8009b66:	dd0b      	ble.n	8009b80 <__gethex+0x41c>
 8009b68:	2101      	movs	r1, #1
 8009b6a:	0028      	movs	r0, r5
 8009b6c:	f7ff fd91 	bl	8009692 <rshift>
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	3701      	adds	r7, #1
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	42bb      	cmp	r3, r7
 8009b78:	da00      	bge.n	8009b7c <__gethex+0x418>
 8009b7a:	e6df      	b.n	800993c <__gethex+0x1d8>
 8009b7c:	2601      	movs	r6, #1
 8009b7e:	e7bf      	b.n	8009b00 <__gethex+0x39c>
 8009b80:	221f      	movs	r2, #31
 8009b82:	9c00      	ldr	r4, [sp, #0]
 8009b84:	9900      	ldr	r1, [sp, #0]
 8009b86:	4014      	ands	r4, r2
 8009b88:	4211      	tst	r1, r2
 8009b8a:	d0f7      	beq.n	8009b7c <__gethex+0x418>
 8009b8c:	9a04      	ldr	r2, [sp, #16]
 8009b8e:	189b      	adds	r3, r3, r2
 8009b90:	3b04      	subs	r3, #4
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	f7fe f86a 	bl	8007c6c <__hi0bits>
 8009b98:	2320      	movs	r3, #32
 8009b9a:	1b1b      	subs	r3, r3, r4
 8009b9c:	4298      	cmp	r0, r3
 8009b9e:	dbe3      	blt.n	8009b68 <__gethex+0x404>
 8009ba0:	e7ec      	b.n	8009b7c <__gethex+0x418>
 8009ba2:	46c0      	nop			@ (mov r8, r8)
 8009ba4:	0800a595 	.word	0x0800a595
 8009ba8:	0800a8ae 	.word	0x0800a8ae

08009bac <L_shift>:
 8009bac:	2308      	movs	r3, #8
 8009bae:	b570      	push	{r4, r5, r6, lr}
 8009bb0:	2520      	movs	r5, #32
 8009bb2:	1a9a      	subs	r2, r3, r2
 8009bb4:	0092      	lsls	r2, r2, #2
 8009bb6:	1aad      	subs	r5, r5, r2
 8009bb8:	6843      	ldr	r3, [r0, #4]
 8009bba:	6804      	ldr	r4, [r0, #0]
 8009bbc:	001e      	movs	r6, r3
 8009bbe:	40ae      	lsls	r6, r5
 8009bc0:	40d3      	lsrs	r3, r2
 8009bc2:	4334      	orrs	r4, r6
 8009bc4:	6004      	str	r4, [r0, #0]
 8009bc6:	6043      	str	r3, [r0, #4]
 8009bc8:	3004      	adds	r0, #4
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	d3f4      	bcc.n	8009bb8 <L_shift+0xc>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <__match>:
 8009bd0:	b530      	push	{r4, r5, lr}
 8009bd2:	6803      	ldr	r3, [r0, #0]
 8009bd4:	780c      	ldrb	r4, [r1, #0]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	d102      	bne.n	8009be2 <__match+0x12>
 8009bdc:	6003      	str	r3, [r0, #0]
 8009bde:	2001      	movs	r0, #1
 8009be0:	bd30      	pop	{r4, r5, pc}
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	0015      	movs	r5, r2
 8009be6:	3d41      	subs	r5, #65	@ 0x41
 8009be8:	2d19      	cmp	r5, #25
 8009bea:	d800      	bhi.n	8009bee <__match+0x1e>
 8009bec:	3220      	adds	r2, #32
 8009bee:	3101      	adds	r1, #1
 8009bf0:	42a2      	cmp	r2, r4
 8009bf2:	d0ef      	beq.n	8009bd4 <__match+0x4>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7f3      	b.n	8009be0 <__match+0x10>

08009bf8 <__hexnan>:
 8009bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfa:	680b      	ldr	r3, [r1, #0]
 8009bfc:	b08b      	sub	sp, #44	@ 0x2c
 8009bfe:	9201      	str	r2, [sp, #4]
 8009c00:	9901      	ldr	r1, [sp, #4]
 8009c02:	115a      	asrs	r2, r3, #5
 8009c04:	0092      	lsls	r2, r2, #2
 8009c06:	188a      	adds	r2, r1, r2
 8009c08:	9202      	str	r2, [sp, #8]
 8009c0a:	0019      	movs	r1, r3
 8009c0c:	221f      	movs	r2, #31
 8009c0e:	4011      	ands	r1, r2
 8009c10:	9008      	str	r0, [sp, #32]
 8009c12:	9106      	str	r1, [sp, #24]
 8009c14:	4213      	tst	r3, r2
 8009c16:	d002      	beq.n	8009c1e <__hexnan+0x26>
 8009c18:	9b02      	ldr	r3, [sp, #8]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	9302      	str	r3, [sp, #8]
 8009c1e:	9b02      	ldr	r3, [sp, #8]
 8009c20:	2500      	movs	r5, #0
 8009c22:	1f1f      	subs	r7, r3, #4
 8009c24:	003e      	movs	r6, r7
 8009c26:	003c      	movs	r4, r7
 8009c28:	9b08      	ldr	r3, [sp, #32]
 8009c2a:	603d      	str	r5, [r7, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9507      	str	r5, [sp, #28]
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	9503      	str	r5, [sp, #12]
 8009c34:	9b05      	ldr	r3, [sp, #20]
 8009c36:	3301      	adds	r3, #1
 8009c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3a:	9b05      	ldr	r3, [sp, #20]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d028      	beq.n	8009c96 <__hexnan+0x9e>
 8009c44:	9804      	ldr	r0, [sp, #16]
 8009c46:	f7ff fd77 	bl	8009738 <__hexdig_fun>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d155      	bne.n	8009cfa <__hexnan+0x102>
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d819      	bhi.n	8009c88 <__hexnan+0x90>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	9a07      	ldr	r2, [sp, #28]
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	dd12      	ble.n	8009c82 <__hexnan+0x8a>
 8009c5c:	42b4      	cmp	r4, r6
 8009c5e:	d206      	bcs.n	8009c6e <__hexnan+0x76>
 8009c60:	2d07      	cmp	r5, #7
 8009c62:	dc04      	bgt.n	8009c6e <__hexnan+0x76>
 8009c64:	002a      	movs	r2, r5
 8009c66:	0031      	movs	r1, r6
 8009c68:	0020      	movs	r0, r4
 8009c6a:	f7ff ff9f 	bl	8009bac <L_shift>
 8009c6e:	9b01      	ldr	r3, [sp, #4]
 8009c70:	2508      	movs	r5, #8
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d905      	bls.n	8009c82 <__hexnan+0x8a>
 8009c76:	1f26      	subs	r6, r4, #4
 8009c78:	2500      	movs	r5, #0
 8009c7a:	0034      	movs	r4, r6
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	6035      	str	r5, [r6, #0]
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c84:	9305      	str	r3, [sp, #20]
 8009c86:	e7d5      	b.n	8009c34 <__hexnan+0x3c>
 8009c88:	9b04      	ldr	r3, [sp, #16]
 8009c8a:	2b29      	cmp	r3, #41	@ 0x29
 8009c8c:	d15a      	bne.n	8009d44 <__hexnan+0x14c>
 8009c8e:	9b05      	ldr	r3, [sp, #20]
 8009c90:	9a08      	ldr	r2, [sp, #32]
 8009c92:	3302      	adds	r3, #2
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d053      	beq.n	8009d44 <__hexnan+0x14c>
 8009c9c:	42b4      	cmp	r4, r6
 8009c9e:	d206      	bcs.n	8009cae <__hexnan+0xb6>
 8009ca0:	2d07      	cmp	r5, #7
 8009ca2:	dc04      	bgt.n	8009cae <__hexnan+0xb6>
 8009ca4:	002a      	movs	r2, r5
 8009ca6:	0031      	movs	r1, r6
 8009ca8:	0020      	movs	r0, r4
 8009caa:	f7ff ff7f 	bl	8009bac <L_shift>
 8009cae:	9b01      	ldr	r3, [sp, #4]
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d936      	bls.n	8009d22 <__hexnan+0x12a>
 8009cb4:	001a      	movs	r2, r3
 8009cb6:	0023      	movs	r3, r4
 8009cb8:	cb02      	ldmia	r3!, {r1}
 8009cba:	c202      	stmia	r2!, {r1}
 8009cbc:	429f      	cmp	r7, r3
 8009cbe:	d2fb      	bcs.n	8009cb8 <__hexnan+0xc0>
 8009cc0:	9b02      	ldr	r3, [sp, #8]
 8009cc2:	1c61      	adds	r1, r4, #1
 8009cc4:	1eda      	subs	r2, r3, #3
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	d805      	bhi.n	8009cd8 <__hexnan+0xe0>
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	3b04      	subs	r3, #4
 8009cd0:	1b1b      	subs	r3, r3, r4
 8009cd2:	089b      	lsrs	r3, r3, #2
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	9a01      	ldr	r2, [sp, #4]
 8009cda:	18d3      	adds	r3, r2, r3
 8009cdc:	2200      	movs	r2, #0
 8009cde:	c304      	stmia	r3!, {r2}
 8009ce0:	429f      	cmp	r7, r3
 8009ce2:	d2fc      	bcs.n	8009cde <__hexnan+0xe6>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d104      	bne.n	8009cf4 <__hexnan+0xfc>
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	429f      	cmp	r7, r3
 8009cee:	d127      	bne.n	8009d40 <__hexnan+0x148>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	2005      	movs	r0, #5
 8009cf6:	b00b      	add	sp, #44	@ 0x2c
 8009cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	3301      	adds	r3, #1
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	2d08      	cmp	r5, #8
 8009d04:	dd06      	ble.n	8009d14 <__hexnan+0x11c>
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	d9ba      	bls.n	8009c82 <__hexnan+0x8a>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	2501      	movs	r5, #1
 8009d10:	3c04      	subs	r4, #4
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	220f      	movs	r2, #15
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	4010      	ands	r0, r2
 8009d1a:	011b      	lsls	r3, r3, #4
 8009d1c:	4303      	orrs	r3, r0
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	e7af      	b.n	8009c82 <__hexnan+0x8a>
 8009d22:	9b06      	ldr	r3, [sp, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0dd      	beq.n	8009ce4 <__hexnan+0xec>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	9a06      	ldr	r2, [sp, #24]
 8009d2c:	9902      	ldr	r1, [sp, #8]
 8009d2e:	1a9b      	subs	r3, r3, r2
 8009d30:	2201      	movs	r2, #1
 8009d32:	4252      	negs	r2, r2
 8009d34:	40da      	lsrs	r2, r3
 8009d36:	3904      	subs	r1, #4
 8009d38:	680b      	ldr	r3, [r1, #0]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	600b      	str	r3, [r1, #0]
 8009d3e:	e7d1      	b.n	8009ce4 <__hexnan+0xec>
 8009d40:	3f04      	subs	r7, #4
 8009d42:	e7cf      	b.n	8009ce4 <__hexnan+0xec>
 8009d44:	2004      	movs	r0, #4
 8009d46:	e7d6      	b.n	8009cf6 <__hexnan+0xfe>

08009d48 <__ascii_mbtowc>:
 8009d48:	b082      	sub	sp, #8
 8009d4a:	2900      	cmp	r1, #0
 8009d4c:	d100      	bne.n	8009d50 <__ascii_mbtowc+0x8>
 8009d4e:	a901      	add	r1, sp, #4
 8009d50:	1e10      	subs	r0, r2, #0
 8009d52:	d006      	beq.n	8009d62 <__ascii_mbtowc+0x1a>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d006      	beq.n	8009d66 <__ascii_mbtowc+0x1e>
 8009d58:	7813      	ldrb	r3, [r2, #0]
 8009d5a:	600b      	str	r3, [r1, #0]
 8009d5c:	7810      	ldrb	r0, [r2, #0]
 8009d5e:	1e43      	subs	r3, r0, #1
 8009d60:	4198      	sbcs	r0, r3
 8009d62:	b002      	add	sp, #8
 8009d64:	4770      	bx	lr
 8009d66:	2002      	movs	r0, #2
 8009d68:	4240      	negs	r0, r0
 8009d6a:	e7fa      	b.n	8009d62 <__ascii_mbtowc+0x1a>

08009d6c <_realloc_r>:
 8009d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d6e:	0006      	movs	r6, r0
 8009d70:	000c      	movs	r4, r1
 8009d72:	0015      	movs	r5, r2
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d105      	bne.n	8009d84 <_realloc_r+0x18>
 8009d78:	0011      	movs	r1, r2
 8009d7a:	f7fd fdef 	bl	800795c <_malloc_r>
 8009d7e:	0004      	movs	r4, r0
 8009d80:	0020      	movs	r0, r4
 8009d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d103      	bne.n	8009d90 <_realloc_r+0x24>
 8009d88:	f7fd fd72 	bl	8007870 <_free_r>
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	e7f7      	b.n	8009d80 <_realloc_r+0x14>
 8009d90:	f000 f83f 	bl	8009e12 <_malloc_usable_size_r>
 8009d94:	0007      	movs	r7, r0
 8009d96:	4285      	cmp	r5, r0
 8009d98:	d802      	bhi.n	8009da0 <_realloc_r+0x34>
 8009d9a:	0843      	lsrs	r3, r0, #1
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	d3ef      	bcc.n	8009d80 <_realloc_r+0x14>
 8009da0:	0029      	movs	r1, r5
 8009da2:	0030      	movs	r0, r6
 8009da4:	f7fd fdda 	bl	800795c <_malloc_r>
 8009da8:	9001      	str	r0, [sp, #4]
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0ee      	beq.n	8009d8c <_realloc_r+0x20>
 8009dae:	002a      	movs	r2, r5
 8009db0:	42bd      	cmp	r5, r7
 8009db2:	d900      	bls.n	8009db6 <_realloc_r+0x4a>
 8009db4:	003a      	movs	r2, r7
 8009db6:	0021      	movs	r1, r4
 8009db8:	9801      	ldr	r0, [sp, #4]
 8009dba:	f7ff fc0f 	bl	80095dc <memcpy>
 8009dbe:	0021      	movs	r1, r4
 8009dc0:	0030      	movs	r0, r6
 8009dc2:	f7fd fd55 	bl	8007870 <_free_r>
 8009dc6:	9c01      	ldr	r4, [sp, #4]
 8009dc8:	e7da      	b.n	8009d80 <_realloc_r+0x14>

08009dca <__ascii_wctomb>:
 8009dca:	0003      	movs	r3, r0
 8009dcc:	1e08      	subs	r0, r1, #0
 8009dce:	d005      	beq.n	8009ddc <__ascii_wctomb+0x12>
 8009dd0:	2aff      	cmp	r2, #255	@ 0xff
 8009dd2:	d904      	bls.n	8009dde <__ascii_wctomb+0x14>
 8009dd4:	228a      	movs	r2, #138	@ 0x8a
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	4240      	negs	r0, r0
 8009ddc:	4770      	bx	lr
 8009dde:	2001      	movs	r0, #1
 8009de0:	700a      	strb	r2, [r1, #0]
 8009de2:	e7fb      	b.n	8009ddc <__ascii_wctomb+0x12>

08009de4 <fiprintf>:
 8009de4:	b40e      	push	{r1, r2, r3}
 8009de6:	b517      	push	{r0, r1, r2, r4, lr}
 8009de8:	4c05      	ldr	r4, [pc, #20]	@ (8009e00 <fiprintf+0x1c>)
 8009dea:	ab05      	add	r3, sp, #20
 8009dec:	cb04      	ldmia	r3!, {r2}
 8009dee:	0001      	movs	r1, r0
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	f000 f83c 	bl	8009e70 <_vfiprintf_r>
 8009df8:	bc1e      	pop	{r1, r2, r3, r4}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	b003      	add	sp, #12
 8009dfe:	4718      	bx	r3
 8009e00:	20000018 	.word	0x20000018

08009e04 <abort>:
 8009e04:	2006      	movs	r0, #6
 8009e06:	b510      	push	{r4, lr}
 8009e08:	f000 fa18 	bl	800a23c <raise>
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f7f9 f9da 	bl	80031c6 <_exit>

08009e12 <_malloc_usable_size_r>:
 8009e12:	1f0b      	subs	r3, r1, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	1f18      	subs	r0, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da01      	bge.n	8009e20 <_malloc_usable_size_r+0xe>
 8009e1c:	580b      	ldr	r3, [r1, r0]
 8009e1e:	18c0      	adds	r0, r0, r3
 8009e20:	4770      	bx	lr

08009e22 <__sfputc_r>:
 8009e22:	6893      	ldr	r3, [r2, #8]
 8009e24:	b510      	push	{r4, lr}
 8009e26:	3b01      	subs	r3, #1
 8009e28:	6093      	str	r3, [r2, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da04      	bge.n	8009e38 <__sfputc_r+0x16>
 8009e2e:	6994      	ldr	r4, [r2, #24]
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	db07      	blt.n	8009e44 <__sfputc_r+0x22>
 8009e34:	290a      	cmp	r1, #10
 8009e36:	d005      	beq.n	8009e44 <__sfputc_r+0x22>
 8009e38:	6813      	ldr	r3, [r2, #0]
 8009e3a:	1c58      	adds	r0, r3, #1
 8009e3c:	6010      	str	r0, [r2, #0]
 8009e3e:	7019      	strb	r1, [r3, #0]
 8009e40:	0008      	movs	r0, r1
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	f000 f930 	bl	800a0a8 <__swbuf_r>
 8009e48:	0001      	movs	r1, r0
 8009e4a:	e7f9      	b.n	8009e40 <__sfputc_r+0x1e>

08009e4c <__sfputs_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	0006      	movs	r6, r0
 8009e50:	000f      	movs	r7, r1
 8009e52:	0014      	movs	r4, r2
 8009e54:	18d5      	adds	r5, r2, r3
 8009e56:	42ac      	cmp	r4, r5
 8009e58:	d101      	bne.n	8009e5e <__sfputs_r+0x12>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e007      	b.n	8009e6e <__sfputs_r+0x22>
 8009e5e:	7821      	ldrb	r1, [r4, #0]
 8009e60:	003a      	movs	r2, r7
 8009e62:	0030      	movs	r0, r6
 8009e64:	f7ff ffdd 	bl	8009e22 <__sfputc_r>
 8009e68:	3401      	adds	r4, #1
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d1f3      	bne.n	8009e56 <__sfputs_r+0xa>
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e70 <_vfiprintf_r>:
 8009e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e72:	b0a1      	sub	sp, #132	@ 0x84
 8009e74:	000f      	movs	r7, r1
 8009e76:	0015      	movs	r5, r2
 8009e78:	001e      	movs	r6, r3
 8009e7a:	9003      	str	r0, [sp, #12]
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d004      	beq.n	8009e8a <_vfiprintf_r+0x1a>
 8009e80:	6a03      	ldr	r3, [r0, #32]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <_vfiprintf_r+0x1a>
 8009e86:	f7fc fd3b 	bl	8006900 <__sinit>
 8009e8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e8c:	07db      	lsls	r3, r3, #31
 8009e8e:	d405      	bmi.n	8009e9c <_vfiprintf_r+0x2c>
 8009e90:	89bb      	ldrh	r3, [r7, #12]
 8009e92:	059b      	lsls	r3, r3, #22
 8009e94:	d402      	bmi.n	8009e9c <_vfiprintf_r+0x2c>
 8009e96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009e98:	f7fc fe57 	bl	8006b4a <__retarget_lock_acquire_recursive>
 8009e9c:	89bb      	ldrh	r3, [r7, #12]
 8009e9e:	071b      	lsls	r3, r3, #28
 8009ea0:	d502      	bpl.n	8009ea8 <_vfiprintf_r+0x38>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d113      	bne.n	8009ed0 <_vfiprintf_r+0x60>
 8009ea8:	0039      	movs	r1, r7
 8009eaa:	9803      	ldr	r0, [sp, #12]
 8009eac:	f000 f93e 	bl	800a12c <__swsetup_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d00d      	beq.n	8009ed0 <_vfiprintf_r+0x60>
 8009eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eb6:	07db      	lsls	r3, r3, #31
 8009eb8:	d503      	bpl.n	8009ec2 <_vfiprintf_r+0x52>
 8009eba:	2001      	movs	r0, #1
 8009ebc:	4240      	negs	r0, r0
 8009ebe:	b021      	add	sp, #132	@ 0x84
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	89bb      	ldrh	r3, [r7, #12]
 8009ec4:	059b      	lsls	r3, r3, #22
 8009ec6:	d4f8      	bmi.n	8009eba <_vfiprintf_r+0x4a>
 8009ec8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009eca:	f7fc fe3f 	bl	8006b4c <__retarget_lock_release_recursive>
 8009ece:	e7f4      	b.n	8009eba <_vfiprintf_r+0x4a>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	ac08      	add	r4, sp, #32
 8009ed4:	6163      	str	r3, [r4, #20]
 8009ed6:	3320      	adds	r3, #32
 8009ed8:	7663      	strb	r3, [r4, #25]
 8009eda:	3310      	adds	r3, #16
 8009edc:	76a3      	strb	r3, [r4, #26]
 8009ede:	9607      	str	r6, [sp, #28]
 8009ee0:	002e      	movs	r6, r5
 8009ee2:	7833      	ldrb	r3, [r6, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <_vfiprintf_r+0x7c>
 8009ee8:	2b25      	cmp	r3, #37	@ 0x25
 8009eea:	d148      	bne.n	8009f7e <_vfiprintf_r+0x10e>
 8009eec:	1b73      	subs	r3, r6, r5
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	42ae      	cmp	r6, r5
 8009ef2:	d00b      	beq.n	8009f0c <_vfiprintf_r+0x9c>
 8009ef4:	002a      	movs	r2, r5
 8009ef6:	0039      	movs	r1, r7
 8009ef8:	9803      	ldr	r0, [sp, #12]
 8009efa:	f7ff ffa7 	bl	8009e4c <__sfputs_r>
 8009efe:	3001      	adds	r0, #1
 8009f00:	d100      	bne.n	8009f04 <_vfiprintf_r+0x94>
 8009f02:	e0ae      	b.n	800a062 <_vfiprintf_r+0x1f2>
 8009f04:	6963      	ldr	r3, [r4, #20]
 8009f06:	9a05      	ldr	r2, [sp, #20]
 8009f08:	189b      	adds	r3, r3, r2
 8009f0a:	6163      	str	r3, [r4, #20]
 8009f0c:	7833      	ldrb	r3, [r6, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d100      	bne.n	8009f14 <_vfiprintf_r+0xa4>
 8009f12:	e0a6      	b.n	800a062 <_vfiprintf_r+0x1f2>
 8009f14:	2201      	movs	r2, #1
 8009f16:	2300      	movs	r3, #0
 8009f18:	4252      	negs	r2, r2
 8009f1a:	6062      	str	r2, [r4, #4]
 8009f1c:	a904      	add	r1, sp, #16
 8009f1e:	3254      	adds	r2, #84	@ 0x54
 8009f20:	1852      	adds	r2, r2, r1
 8009f22:	1c75      	adds	r5, r6, #1
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	60e3      	str	r3, [r4, #12]
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	7013      	strb	r3, [r2, #0]
 8009f2c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009f2e:	4b59      	ldr	r3, [pc, #356]	@ (800a094 <_vfiprintf_r+0x224>)
 8009f30:	2205      	movs	r2, #5
 8009f32:	0018      	movs	r0, r3
 8009f34:	7829      	ldrb	r1, [r5, #0]
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	f7fc fe09 	bl	8006b4e <memchr>
 8009f3c:	1c6e      	adds	r6, r5, #1
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d11f      	bne.n	8009f82 <_vfiprintf_r+0x112>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	06d3      	lsls	r3, r2, #27
 8009f46:	d504      	bpl.n	8009f52 <_vfiprintf_r+0xe2>
 8009f48:	2353      	movs	r3, #83	@ 0x53
 8009f4a:	a904      	add	r1, sp, #16
 8009f4c:	185b      	adds	r3, r3, r1
 8009f4e:	2120      	movs	r1, #32
 8009f50:	7019      	strb	r1, [r3, #0]
 8009f52:	0713      	lsls	r3, r2, #28
 8009f54:	d504      	bpl.n	8009f60 <_vfiprintf_r+0xf0>
 8009f56:	2353      	movs	r3, #83	@ 0x53
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	185b      	adds	r3, r3, r1
 8009f5c:	212b      	movs	r1, #43	@ 0x2b
 8009f5e:	7019      	strb	r1, [r3, #0]
 8009f60:	782b      	ldrb	r3, [r5, #0]
 8009f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f64:	d016      	beq.n	8009f94 <_vfiprintf_r+0x124>
 8009f66:	002e      	movs	r6, r5
 8009f68:	2100      	movs	r1, #0
 8009f6a:	200a      	movs	r0, #10
 8009f6c:	68e3      	ldr	r3, [r4, #12]
 8009f6e:	7832      	ldrb	r2, [r6, #0]
 8009f70:	1c75      	adds	r5, r6, #1
 8009f72:	3a30      	subs	r2, #48	@ 0x30
 8009f74:	2a09      	cmp	r2, #9
 8009f76:	d950      	bls.n	800a01a <_vfiprintf_r+0x1aa>
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	d111      	bne.n	8009fa0 <_vfiprintf_r+0x130>
 8009f7c:	e017      	b.n	8009fae <_vfiprintf_r+0x13e>
 8009f7e:	3601      	adds	r6, #1
 8009f80:	e7af      	b.n	8009ee2 <_vfiprintf_r+0x72>
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	1ac0      	subs	r0, r0, r3
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4083      	lsls	r3, r0
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	0035      	movs	r5, r6
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	e7cc      	b.n	8009f2e <_vfiprintf_r+0xbe>
 8009f94:	9b07      	ldr	r3, [sp, #28]
 8009f96:	1d19      	adds	r1, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	9107      	str	r1, [sp, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	db01      	blt.n	8009fa4 <_vfiprintf_r+0x134>
 8009fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa2:	e004      	b.n	8009fae <_vfiprintf_r+0x13e>
 8009fa4:	425b      	negs	r3, r3
 8009fa6:	60e3      	str	r3, [r4, #12]
 8009fa8:	2302      	movs	r3, #2
 8009faa:	4313      	orrs	r3, r2
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	7833      	ldrb	r3, [r6, #0]
 8009fb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fb2:	d10c      	bne.n	8009fce <_vfiprintf_r+0x15e>
 8009fb4:	7873      	ldrb	r3, [r6, #1]
 8009fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fb8:	d134      	bne.n	800a024 <_vfiprintf_r+0x1b4>
 8009fba:	9b07      	ldr	r3, [sp, #28]
 8009fbc:	3602      	adds	r6, #2
 8009fbe:	1d1a      	adds	r2, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	9207      	str	r2, [sp, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da01      	bge.n	8009fcc <_vfiprintf_r+0x15c>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	425b      	negs	r3, r3
 8009fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fce:	4d32      	ldr	r5, [pc, #200]	@ (800a098 <_vfiprintf_r+0x228>)
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	0028      	movs	r0, r5
 8009fd4:	7831      	ldrb	r1, [r6, #0]
 8009fd6:	f7fc fdba 	bl	8006b4e <memchr>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d006      	beq.n	8009fec <_vfiprintf_r+0x17c>
 8009fde:	2340      	movs	r3, #64	@ 0x40
 8009fe0:	1b40      	subs	r0, r0, r5
 8009fe2:	4083      	lsls	r3, r0
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	7831      	ldrb	r1, [r6, #0]
 8009fee:	2206      	movs	r2, #6
 8009ff0:	482a      	ldr	r0, [pc, #168]	@ (800a09c <_vfiprintf_r+0x22c>)
 8009ff2:	1c75      	adds	r5, r6, #1
 8009ff4:	7621      	strb	r1, [r4, #24]
 8009ff6:	f7fc fdaa 	bl	8006b4e <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d040      	beq.n	800a080 <_vfiprintf_r+0x210>
 8009ffe:	4b28      	ldr	r3, [pc, #160]	@ (800a0a0 <_vfiprintf_r+0x230>)
 800a000:	2b00      	cmp	r3, #0
 800a002:	d122      	bne.n	800a04a <_vfiprintf_r+0x1da>
 800a004:	2207      	movs	r2, #7
 800a006:	9b07      	ldr	r3, [sp, #28]
 800a008:	3307      	adds	r3, #7
 800a00a:	4393      	bics	r3, r2
 800a00c:	3308      	adds	r3, #8
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	6963      	ldr	r3, [r4, #20]
 800a012:	9a04      	ldr	r2, [sp, #16]
 800a014:	189b      	adds	r3, r3, r2
 800a016:	6163      	str	r3, [r4, #20]
 800a018:	e762      	b.n	8009ee0 <_vfiprintf_r+0x70>
 800a01a:	4343      	muls	r3, r0
 800a01c:	002e      	movs	r6, r5
 800a01e:	2101      	movs	r1, #1
 800a020:	189b      	adds	r3, r3, r2
 800a022:	e7a4      	b.n	8009f6e <_vfiprintf_r+0xfe>
 800a024:	2300      	movs	r3, #0
 800a026:	200a      	movs	r0, #10
 800a028:	0019      	movs	r1, r3
 800a02a:	3601      	adds	r6, #1
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	7832      	ldrb	r2, [r6, #0]
 800a030:	1c75      	adds	r5, r6, #1
 800a032:	3a30      	subs	r2, #48	@ 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_vfiprintf_r+0x1d0>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c8      	beq.n	8009fce <_vfiprintf_r+0x15e>
 800a03c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a03e:	e7c6      	b.n	8009fce <_vfiprintf_r+0x15e>
 800a040:	4341      	muls	r1, r0
 800a042:	002e      	movs	r6, r5
 800a044:	2301      	movs	r3, #1
 800a046:	1889      	adds	r1, r1, r2
 800a048:	e7f1      	b.n	800a02e <_vfiprintf_r+0x1be>
 800a04a:	aa07      	add	r2, sp, #28
 800a04c:	9200      	str	r2, [sp, #0]
 800a04e:	0021      	movs	r1, r4
 800a050:	003a      	movs	r2, r7
 800a052:	4b14      	ldr	r3, [pc, #80]	@ (800a0a4 <_vfiprintf_r+0x234>)
 800a054:	9803      	ldr	r0, [sp, #12]
 800a056:	f7fb fdf9 	bl	8005c4c <_printf_float>
 800a05a:	9004      	str	r0, [sp, #16]
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	3301      	adds	r3, #1
 800a060:	d1d6      	bne.n	800a010 <_vfiprintf_r+0x1a0>
 800a062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a064:	07db      	lsls	r3, r3, #31
 800a066:	d405      	bmi.n	800a074 <_vfiprintf_r+0x204>
 800a068:	89bb      	ldrh	r3, [r7, #12]
 800a06a:	059b      	lsls	r3, r3, #22
 800a06c:	d402      	bmi.n	800a074 <_vfiprintf_r+0x204>
 800a06e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a070:	f7fc fd6c 	bl	8006b4c <__retarget_lock_release_recursive>
 800a074:	89bb      	ldrh	r3, [r7, #12]
 800a076:	065b      	lsls	r3, r3, #25
 800a078:	d500      	bpl.n	800a07c <_vfiprintf_r+0x20c>
 800a07a:	e71e      	b.n	8009eba <_vfiprintf_r+0x4a>
 800a07c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a07e:	e71e      	b.n	8009ebe <_vfiprintf_r+0x4e>
 800a080:	aa07      	add	r2, sp, #28
 800a082:	9200      	str	r2, [sp, #0]
 800a084:	0021      	movs	r1, r4
 800a086:	003a      	movs	r2, r7
 800a088:	4b06      	ldr	r3, [pc, #24]	@ (800a0a4 <_vfiprintf_r+0x234>)
 800a08a:	9803      	ldr	r0, [sp, #12]
 800a08c:	f7fc f88c 	bl	80061a8 <_printf_i>
 800a090:	e7e3      	b.n	800a05a <_vfiprintf_r+0x1ea>
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	0800a859 	.word	0x0800a859
 800a098:	0800a85f 	.word	0x0800a85f
 800a09c:	0800a863 	.word	0x0800a863
 800a0a0:	08005c4d 	.word	0x08005c4d
 800a0a4:	08009e4d 	.word	0x08009e4d

0800a0a8 <__swbuf_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	0006      	movs	r6, r0
 800a0ac:	000d      	movs	r5, r1
 800a0ae:	0014      	movs	r4, r2
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d004      	beq.n	800a0be <__swbuf_r+0x16>
 800a0b4:	6a03      	ldr	r3, [r0, #32]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <__swbuf_r+0x16>
 800a0ba:	f7fc fc21 	bl	8006900 <__sinit>
 800a0be:	69a3      	ldr	r3, [r4, #24]
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	071b      	lsls	r3, r3, #28
 800a0c6:	d502      	bpl.n	800a0ce <__swbuf_r+0x26>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d109      	bne.n	800a0e2 <__swbuf_r+0x3a>
 800a0ce:	0021      	movs	r1, r4
 800a0d0:	0030      	movs	r0, r6
 800a0d2:	f000 f82b 	bl	800a12c <__swsetup_r>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d003      	beq.n	800a0e2 <__swbuf_r+0x3a>
 800a0da:	2501      	movs	r5, #1
 800a0dc:	426d      	negs	r5, r5
 800a0de:	0028      	movs	r0, r5
 800a0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	b2ef      	uxtb	r7, r5
 800a0e8:	1ac0      	subs	r0, r0, r3
 800a0ea:	6963      	ldr	r3, [r4, #20]
 800a0ec:	b2ed      	uxtb	r5, r5
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	dc05      	bgt.n	800a0fe <__swbuf_r+0x56>
 800a0f2:	0021      	movs	r1, r4
 800a0f4:	0030      	movs	r0, r6
 800a0f6:	f7ff fa0f 	bl	8009518 <_fflush_r>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d1ed      	bne.n	800a0da <__swbuf_r+0x32>
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	3001      	adds	r0, #1
 800a102:	3b01      	subs	r3, #1
 800a104:	60a3      	str	r3, [r4, #8]
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	701f      	strb	r7, [r3, #0]
 800a10e:	6963      	ldr	r3, [r4, #20]
 800a110:	4283      	cmp	r3, r0
 800a112:	d004      	beq.n	800a11e <__swbuf_r+0x76>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	07db      	lsls	r3, r3, #31
 800a118:	d5e1      	bpl.n	800a0de <__swbuf_r+0x36>
 800a11a:	2d0a      	cmp	r5, #10
 800a11c:	d1df      	bne.n	800a0de <__swbuf_r+0x36>
 800a11e:	0021      	movs	r1, r4
 800a120:	0030      	movs	r0, r6
 800a122:	f7ff f9f9 	bl	8009518 <_fflush_r>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0d9      	beq.n	800a0de <__swbuf_r+0x36>
 800a12a:	e7d6      	b.n	800a0da <__swbuf_r+0x32>

0800a12c <__swsetup_r>:
 800a12c:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e4 <__swsetup_r+0xb8>)
 800a12e:	b570      	push	{r4, r5, r6, lr}
 800a130:	0005      	movs	r5, r0
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	000c      	movs	r4, r1
 800a136:	2800      	cmp	r0, #0
 800a138:	d004      	beq.n	800a144 <__swsetup_r+0x18>
 800a13a:	6a03      	ldr	r3, [r0, #32]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <__swsetup_r+0x18>
 800a140:	f7fc fbde 	bl	8006900 <__sinit>
 800a144:	230c      	movs	r3, #12
 800a146:	5ee2      	ldrsh	r2, [r4, r3]
 800a148:	0713      	lsls	r3, r2, #28
 800a14a:	d423      	bmi.n	800a194 <__swsetup_r+0x68>
 800a14c:	06d3      	lsls	r3, r2, #27
 800a14e:	d407      	bmi.n	800a160 <__swsetup_r+0x34>
 800a150:	2309      	movs	r3, #9
 800a152:	602b      	str	r3, [r5, #0]
 800a154:	2340      	movs	r3, #64	@ 0x40
 800a156:	2001      	movs	r0, #1
 800a158:	4313      	orrs	r3, r2
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	4240      	negs	r0, r0
 800a15e:	e03a      	b.n	800a1d6 <__swsetup_r+0xaa>
 800a160:	0752      	lsls	r2, r2, #29
 800a162:	d513      	bpl.n	800a18c <__swsetup_r+0x60>
 800a164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a166:	2900      	cmp	r1, #0
 800a168:	d008      	beq.n	800a17c <__swsetup_r+0x50>
 800a16a:	0023      	movs	r3, r4
 800a16c:	3344      	adds	r3, #68	@ 0x44
 800a16e:	4299      	cmp	r1, r3
 800a170:	d002      	beq.n	800a178 <__swsetup_r+0x4c>
 800a172:	0028      	movs	r0, r5
 800a174:	f7fd fb7c 	bl	8007870 <_free_r>
 800a178:	2300      	movs	r3, #0
 800a17a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a17c:	2224      	movs	r2, #36	@ 0x24
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	4393      	bics	r3, r2
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	2300      	movs	r3, #0
 800a186:	6063      	str	r3, [r4, #4]
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	2308      	movs	r3, #8
 800a18e:	89a2      	ldrh	r2, [r4, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10b      	bne.n	800a1b2 <__swsetup_r+0x86>
 800a19a:	21a0      	movs	r1, #160	@ 0xa0
 800a19c:	2280      	movs	r2, #128	@ 0x80
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	0089      	lsls	r1, r1, #2
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	400b      	ands	r3, r1
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <__swsetup_r+0x86>
 800a1aa:	0021      	movs	r1, r4
 800a1ac:	0028      	movs	r0, r5
 800a1ae:	f000 f88f 	bl	800a2d0 <__smakebuf_r>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	5ee2      	ldrsh	r2, [r4, r3]
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	0013      	movs	r3, r2
 800a1ba:	400b      	ands	r3, r1
 800a1bc:	420a      	tst	r2, r1
 800a1be:	d00b      	beq.n	800a1d8 <__swsetup_r+0xac>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	6963      	ldr	r3, [r4, #20]
 800a1c6:	425b      	negs	r3, r3
 800a1c8:	61a3      	str	r3, [r4, #24]
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	4283      	cmp	r3, r0
 800a1d0:	d101      	bne.n	800a1d6 <__swsetup_r+0xaa>
 800a1d2:	0613      	lsls	r3, r2, #24
 800a1d4:	d4be      	bmi.n	800a154 <__swsetup_r+0x28>
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	0791      	lsls	r1, r2, #30
 800a1da:	d400      	bmi.n	800a1de <__swsetup_r+0xb2>
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	60a3      	str	r3, [r4, #8]
 800a1e0:	e7f3      	b.n	800a1ca <__swsetup_r+0x9e>
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	20000018 	.word	0x20000018

0800a1e8 <_raise_r>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	0004      	movs	r4, r0
 800a1ec:	000d      	movs	r5, r1
 800a1ee:	291f      	cmp	r1, #31
 800a1f0:	d904      	bls.n	800a1fc <_raise_r+0x14>
 800a1f2:	2316      	movs	r3, #22
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	4240      	negs	r0, r0
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <_raise_r+0x24>
 800a202:	008a      	lsls	r2, r1, #2
 800a204:	189b      	adds	r3, r3, r2
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	2a00      	cmp	r2, #0
 800a20a:	d108      	bne.n	800a21e <_raise_r+0x36>
 800a20c:	0020      	movs	r0, r4
 800a20e:	f000 f831 	bl	800a274 <_getpid_r>
 800a212:	002a      	movs	r2, r5
 800a214:	0001      	movs	r1, r0
 800a216:	0020      	movs	r0, r4
 800a218:	f000 f81a 	bl	800a250 <_kill_r>
 800a21c:	e7ed      	b.n	800a1fa <_raise_r+0x12>
 800a21e:	2a01      	cmp	r2, #1
 800a220:	d009      	beq.n	800a236 <_raise_r+0x4e>
 800a222:	1c51      	adds	r1, r2, #1
 800a224:	d103      	bne.n	800a22e <_raise_r+0x46>
 800a226:	2316      	movs	r3, #22
 800a228:	6003      	str	r3, [r0, #0]
 800a22a:	2001      	movs	r0, #1
 800a22c:	e7e5      	b.n	800a1fa <_raise_r+0x12>
 800a22e:	2100      	movs	r1, #0
 800a230:	0028      	movs	r0, r5
 800a232:	6019      	str	r1, [r3, #0]
 800a234:	4790      	blx	r2
 800a236:	2000      	movs	r0, #0
 800a238:	e7df      	b.n	800a1fa <_raise_r+0x12>
	...

0800a23c <raise>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4b03      	ldr	r3, [pc, #12]	@ (800a24c <raise+0x10>)
 800a240:	0001      	movs	r1, r0
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	f7ff ffd0 	bl	800a1e8 <_raise_r>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	46c0      	nop			@ (mov r8, r8)
 800a24c:	20000018 	.word	0x20000018

0800a250 <_kill_r>:
 800a250:	2300      	movs	r3, #0
 800a252:	b570      	push	{r4, r5, r6, lr}
 800a254:	4d06      	ldr	r5, [pc, #24]	@ (800a270 <_kill_r+0x20>)
 800a256:	0004      	movs	r4, r0
 800a258:	0008      	movs	r0, r1
 800a25a:	0011      	movs	r1, r2
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	f7f8 ffa2 	bl	80031a6 <_kill>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d103      	bne.n	800a26e <_kill_r+0x1e>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d000      	beq.n	800a26e <_kill_r+0x1e>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	2000049c 	.word	0x2000049c

0800a274 <_getpid_r>:
 800a274:	b510      	push	{r4, lr}
 800a276:	f7f8 ff90 	bl	800319a <_getpid>
 800a27a:	bd10      	pop	{r4, pc}

0800a27c <__swhatbuf_r>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	000e      	movs	r6, r1
 800a280:	001d      	movs	r5, r3
 800a282:	230e      	movs	r3, #14
 800a284:	5ec9      	ldrsh	r1, [r1, r3]
 800a286:	0014      	movs	r4, r2
 800a288:	b096      	sub	sp, #88	@ 0x58
 800a28a:	2900      	cmp	r1, #0
 800a28c:	da0c      	bge.n	800a2a8 <__swhatbuf_r+0x2c>
 800a28e:	89b2      	ldrh	r2, [r6, #12]
 800a290:	2380      	movs	r3, #128	@ 0x80
 800a292:	0011      	movs	r1, r2
 800a294:	4019      	ands	r1, r3
 800a296:	421a      	tst	r2, r3
 800a298:	d114      	bne.n	800a2c4 <__swhatbuf_r+0x48>
 800a29a:	2380      	movs	r3, #128	@ 0x80
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	2000      	movs	r0, #0
 800a2a0:	6029      	str	r1, [r5, #0]
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	b016      	add	sp, #88	@ 0x58
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	466a      	mov	r2, sp
 800a2aa:	f000 f853 	bl	800a354 <_fstat_r>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	dbed      	blt.n	800a28e <__swhatbuf_r+0x12>
 800a2b2:	23f0      	movs	r3, #240	@ 0xf0
 800a2b4:	9901      	ldr	r1, [sp, #4]
 800a2b6:	021b      	lsls	r3, r3, #8
 800a2b8:	4019      	ands	r1, r3
 800a2ba:	4b04      	ldr	r3, [pc, #16]	@ (800a2cc <__swhatbuf_r+0x50>)
 800a2bc:	18c9      	adds	r1, r1, r3
 800a2be:	424b      	negs	r3, r1
 800a2c0:	4159      	adcs	r1, r3
 800a2c2:	e7ea      	b.n	800a29a <__swhatbuf_r+0x1e>
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	2340      	movs	r3, #64	@ 0x40
 800a2c8:	e7e9      	b.n	800a29e <__swhatbuf_r+0x22>
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	ffffe000 	.word	0xffffe000

0800a2d0 <__smakebuf_r>:
 800a2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d2:	2602      	movs	r6, #2
 800a2d4:	898b      	ldrh	r3, [r1, #12]
 800a2d6:	0005      	movs	r5, r0
 800a2d8:	000c      	movs	r4, r1
 800a2da:	b085      	sub	sp, #20
 800a2dc:	4233      	tst	r3, r6
 800a2de:	d007      	beq.n	800a2f0 <__smakebuf_r+0x20>
 800a2e0:	0023      	movs	r3, r4
 800a2e2:	3347      	adds	r3, #71	@ 0x47
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6163      	str	r3, [r4, #20]
 800a2ec:	b005      	add	sp, #20
 800a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	aa02      	add	r2, sp, #8
 800a2f4:	f7ff ffc2 	bl	800a27c <__swhatbuf_r>
 800a2f8:	9f02      	ldr	r7, [sp, #8]
 800a2fa:	9001      	str	r0, [sp, #4]
 800a2fc:	0039      	movs	r1, r7
 800a2fe:	0028      	movs	r0, r5
 800a300:	f7fd fb2c 	bl	800795c <_malloc_r>
 800a304:	2800      	cmp	r0, #0
 800a306:	d108      	bne.n	800a31a <__smakebuf_r+0x4a>
 800a308:	220c      	movs	r2, #12
 800a30a:	5ea3      	ldrsh	r3, [r4, r2]
 800a30c:	059a      	lsls	r2, r3, #22
 800a30e:	d4ed      	bmi.n	800a2ec <__smakebuf_r+0x1c>
 800a310:	2203      	movs	r2, #3
 800a312:	4393      	bics	r3, r2
 800a314:	431e      	orrs	r6, r3
 800a316:	81a6      	strh	r6, [r4, #12]
 800a318:	e7e2      	b.n	800a2e0 <__smakebuf_r+0x10>
 800a31a:	2380      	movs	r3, #128	@ 0x80
 800a31c:	89a2      	ldrh	r2, [r4, #12]
 800a31e:	6020      	str	r0, [r4, #0]
 800a320:	4313      	orrs	r3, r2
 800a322:	81a3      	strh	r3, [r4, #12]
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	6120      	str	r0, [r4, #16]
 800a328:	6167      	str	r7, [r4, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00c      	beq.n	800a348 <__smakebuf_r+0x78>
 800a32e:	0028      	movs	r0, r5
 800a330:	230e      	movs	r3, #14
 800a332:	5ee1      	ldrsh	r1, [r4, r3]
 800a334:	f000 f820 	bl	800a378 <_isatty_r>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d005      	beq.n	800a348 <__smakebuf_r+0x78>
 800a33c:	2303      	movs	r3, #3
 800a33e:	89a2      	ldrh	r2, [r4, #12]
 800a340:	439a      	bics	r2, r3
 800a342:	3b02      	subs	r3, #2
 800a344:	4313      	orrs	r3, r2
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	9a01      	ldr	r2, [sp, #4]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	e7cc      	b.n	800a2ec <__smakebuf_r+0x1c>
	...

0800a354 <_fstat_r>:
 800a354:	2300      	movs	r3, #0
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	4d06      	ldr	r5, [pc, #24]	@ (800a374 <_fstat_r+0x20>)
 800a35a:	0004      	movs	r4, r0
 800a35c:	0008      	movs	r0, r1
 800a35e:	0011      	movs	r1, r2
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f7f8 ff80 	bl	8003266 <_fstat>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d103      	bne.n	800a372 <_fstat_r+0x1e>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d000      	beq.n	800a372 <_fstat_r+0x1e>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	2000049c 	.word	0x2000049c

0800a378 <_isatty_r>:
 800a378:	2300      	movs	r3, #0
 800a37a:	b570      	push	{r4, r5, r6, lr}
 800a37c:	4d06      	ldr	r5, [pc, #24]	@ (800a398 <_isatty_r+0x20>)
 800a37e:	0004      	movs	r4, r0
 800a380:	0008      	movs	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f8 ff7d 	bl	8003282 <_isatty>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d103      	bne.n	800a394 <_isatty_r+0x1c>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d000      	beq.n	800a394 <_isatty_r+0x1c>
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	bd70      	pop	{r4, r5, r6, pc}
 800a396:	46c0      	nop			@ (mov r8, r8)
 800a398:	2000049c 	.word	0x2000049c

0800a39c <_init>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	46c0      	nop			@ (mov r8, r8)
 800a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a2:	bc08      	pop	{r3}
 800a3a4:	469e      	mov	lr, r3
 800a3a6:	4770      	bx	lr

0800a3a8 <_fini>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	46c0      	nop			@ (mov r8, r8)
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr
