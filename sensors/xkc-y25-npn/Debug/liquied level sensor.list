
liquied level sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029b8  080029b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080029cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080029cc  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083f0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000139a  00000000  00000000  00028424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  000297c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00029e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013dd8  00000000  00000000  0002a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008781  00000000  00000000  0003e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b902  00000000  00000000  000469d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c22d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016bc  00000000  00000000  000c2324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028fc 	.word	0x080028fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028fc 	.word	0x080028fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 f9e9 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f849 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8e9 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f8b7 	bl	800062c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t massage_High[] ="Water LEVEL is Stable\n\r";
 80004be:	2418      	movs	r4, #24
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <main+0x90>)
 80004c4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80004c6:	c323      	stmia	r3!, {r0, r1, r5}
 80004c8:	ca23      	ldmia	r2!, {r0, r1, r5}
 80004ca:	c323      	stmia	r3!, {r0, r1, r5}
	  uint8_t massage_LOW[] = "Water LEVEL is Danger\n\r";
 80004cc:	003b      	movs	r3, r7
 80004ce:	4a1b      	ldr	r2, [pc, #108]	; (800053c <main+0x94>)
 80004d0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80004d2:	c323      	stmia	r3!, {r0, r1, r5}
 80004d4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80004d6:	c323      	stmia	r3!, {r0, r1, r5}
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)== GPIO_PIN_RESET)
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	009a      	lsls	r2, r3, #2
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fc94 	bl	8000e10 <HAL_GPIO_ReadPin>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d112      	bne.n	8000512 <main+0x6a>
	  {

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0x98>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fca9 	bl	8000e4a <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, massage_High, sizeof(massage_High), 1000);
 80004f8:	23fa      	movs	r3, #250	; 0xfa
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	1939      	adds	r1, r7, r4
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <main+0x9c>)
 8000500:	2218      	movs	r2, #24
 8000502:	f001 fc67 	bl	8001dd4 <HAL_UART_Transmit>
          HAL_Delay(1000);
 8000506:	23fa      	movs	r3, #250	; 0xfa
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fa2a 	bl	8000964 <HAL_Delay>
 8000510:	e7d5      	b.n	80004be <main+0x16>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart2, massage_LOW, sizeof(massage_LOW), 1000);
 8000512:	23fa      	movs	r3, #250	; 0xfa
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	0039      	movs	r1, r7
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x9c>)
 800051a:	2218      	movs	r2, #24
 800051c:	f001 fc5a 	bl	8001dd4 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <main+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fc8f 	bl	8000e4a <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800052c:	23fa      	movs	r3, #250	; 0xfa
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fa17 	bl	8000964 <HAL_Delay>
  {
 8000536:	e7c2      	b.n	80004be <main+0x16>
 8000538:	08002914 	.word	0x08002914
 800053c:	0800292c 	.word	0x0800292c
 8000540:	50000400 	.word	0x50000400
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b09d      	sub	sp, #116	; 0x74
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2438      	movs	r4, #56	; 0x38
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2338      	movs	r3, #56	; 0x38
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 f9c7 	bl	80028ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2314      	movs	r3, #20
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f002 f9bf 	bl	80028ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2324      	movs	r3, #36	; 0x24
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 f9b8 	bl	80028ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xdc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <SystemClock_Config+0xe0>)
 8000582:	401a      	ands	r2, r3
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xdc>)
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2202      	movs	r2, #2
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	0312      	lsls	r2, r2, #12
 80005b4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	0412      	lsls	r2, r2, #16
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fc5f 	bl	8000e84 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ca:	f000 f8b5 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2124      	movs	r1, #36	; 0x24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220f      	movs	r2, #15
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f81a 	bl	800162c <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005fc:	f000 f89c 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000600:	003b      	movs	r3, r7
 8000602:	2202      	movs	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	003b      	movs	r3, r7
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fa30 	bl	8001a74 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f88e 	bl	8000738 <Error_Handler>
  }
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b01d      	add	sp, #116	; 0x74
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART2_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000638:	22e1      	movs	r2, #225	; 0xe1
 800063a:	0252      	lsls	r2, r2, #9
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x58>)
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fb5b 	bl	8001d2c <HAL_UART_Init>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f85d 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000028 	.word	0x20000028
 8000688:	40004400 	.word	0x40004400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	240c      	movs	r4, #12
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 f925 	bl	80028ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006a8:	2101      	movs	r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2201      	movs	r2, #1
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_GPIO_Init+0xa4>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_GPIO_Init+0xa8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fbb6 	bl	8000e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2220      	movs	r2, #32
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2201      	movs	r2, #1
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <MX_GPIO_Init+0xa8>)
 80006fa:	0019      	movs	r1, r3
 80006fc:	0010      	movs	r0, r2
 80006fe:	f000 fa09 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000702:	0021      	movs	r1, r4
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	187a      	adds	r2, r7, r1
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 f9f7 	bl	8000b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b009      	add	sp, #36	; 0x24
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000
 8000734:	50000400 	.word	0x50000400

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_MspInit+0x24>)
 800074a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x24>)
 800074e:	2101      	movs	r1, #1
 8000750:	430a      	orrs	r2, r1
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <HAL_MspInit+0x24>)
 8000756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_MspInit+0x24>)
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	0549      	lsls	r1, r1, #21
 800075e:	430a      	orrs	r2, r1
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	240c      	movs	r4, #12
 8000776:	193b      	adds	r3, r7, r4
 8000778:	0018      	movs	r0, r3
 800077a:	2314      	movs	r3, #20
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f002 f8b4 	bl	80028ec <memset>
  if(huart->Instance==USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_UART_MspInit+0x80>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d129      	bne.n	80007e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_UART_MspInit+0x84>)
 8000790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_UART_MspInit+0x84>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0289      	lsls	r1, r1, #10
 8000798:	430a      	orrs	r2, r1
 800079a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_UART_MspInit+0x84>)
 800079e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_UART_MspInit+0x84>)
 80007a2:	2101      	movs	r1, #1
 80007a4:	430a      	orrs	r2, r1
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0x84>)
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	2201      	movs	r2, #1
 80007ae:	4013      	ands	r3, r2
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2204      	movs	r2, #4
 80007d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	23a0      	movs	r3, #160	; 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f999 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b009      	add	sp, #36	; 0x24
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	00008004 	.word	0x00008004

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f886 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000832:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000834:	f7ff fff7 	bl	8000826 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	; (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	; (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f002 f821 	bl	80028a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe21 	bl	80004a8 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
   ldr   r0, =_estack
 8000868:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000874:	080029c0 	.word	0x080029c0
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800087c:	200000b4 	.word	0x200000b4

08000880 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_COMP_IRQHandler>
	...

08000884 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x3c>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_Init+0x3c>)
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089c:	2000      	movs	r0, #0
 800089e:	f000 f811 	bl	80008c4 <HAL_InitTick>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d003      	beq.n	80008ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e001      	b.n	80008b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ae:	f7ff ff49 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_InitTick+0x5c>)
 80008ce:	681c      	ldr	r4, [r3, #0]
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x60>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0019      	movs	r1, r3
 80008d6:	23fa      	movs	r3, #250	; 0xfa
 80008d8:	0098      	lsls	r0, r3, #2
 80008da:	f7ff fc15 	bl	8000108 <__udivsi3>
 80008de:	0003      	movs	r3, r0
 80008e0:	0019      	movs	r1, r3
 80008e2:	0020      	movs	r0, r4
 80008e4:	f7ff fc10 	bl	8000108 <__udivsi3>
 80008e8:	0003      	movs	r3, r0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 f905 	bl	8000afa <HAL_SYSTICK_Config>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e00f      	b.n	8000918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d80b      	bhi.n	8000916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f8e2 	bl	8000ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_InitTick+0x64>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b003      	add	sp, #12
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	18d2      	adds	r2, r2, r3
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000008 	.word	0x20000008
 800094c:	200000b0 	.word	0x200000b0

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200000b0 	.word	0x200000b0

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	0003      	movs	r3, r0
 8000972:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001a      	movs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	189b      	adds	r3, r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	0002      	movs	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b7f      	cmp	r3, #127	; 0x7f
 80009c0:	d828      	bhi.n	8000a14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c2:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <__NVIC_SetPriority+0xd4>)
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	33c0      	adds	r3, #192	; 0xc0
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	589b      	ldr	r3, [r3, r2]
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	0011      	movs	r1, r2
 80009d8:	2203      	movs	r2, #3
 80009da:	400a      	ands	r2, r1
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	21ff      	movs	r1, #255	; 0xff
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	401a      	ands	r2, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	2303      	movs	r3, #3
 80009fa:	4003      	ands	r3, r0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <__NVIC_SetPriority+0xd4>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	33c0      	adds	r3, #192	; 0xc0
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a12:	e031      	b.n	8000a78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <__NVIC_SetPriority+0xd8>)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	400b      	ands	r3, r1
 8000a20:	3b08      	subs	r3, #8
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3306      	adds	r3, #6
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <__NVIC_SetPriority+0xd8>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001c      	movs	r4, r3
 8000a64:	230f      	movs	r3, #15
 8000a66:	4023      	ands	r3, r4
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	3306      	adds	r3, #6
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	18c3      	adds	r3, r0, r3
 8000a74:	3304      	adds	r3, #4
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	045b      	lsls	r3, r3, #17
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d301      	bcc.n	8000aa0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e010      	b.n	8000ac2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SysTick_Config+0x44>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	425b      	negs	r3, r3
 8000aac:	2103      	movs	r1, #3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff ff7c 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x44>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	210f      	movs	r1, #15
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	1c02      	adds	r2, r0, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ff5d 	bl	80009ac <__NVIC_SetPriority>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ffbf 	bl	8000a88 <SysTick_Config>
 8000b0a:	0003      	movs	r3, r0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b2a:	e155      	b.n	8000dd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4091      	lsls	r1, r2
 8000b36:	000a      	movs	r2, r1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <HAL_GPIO_Init+0x30>
 8000b42:	e146      	b.n	8000dd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2203      	movs	r2, #3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d005      	beq.n	8000b5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d130      	bne.n	8000bbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	43da      	mvns	r2, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	0013      	movs	r3, r2
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b92:	2201      	movs	r2, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	2201      	movs	r2, #1
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d017      	beq.n	8000bfa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2203      	movs	r2, #3
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d123      	bne.n	8000c4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	08da      	lsrs	r2, r3, #3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3208      	adds	r2, #8
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	58d3      	ldr	r3, [r2, r3]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2207      	movs	r2, #7
 8000c18:	4013      	ands	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	220f      	movs	r2, #15
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2107      	movs	r1, #7
 8000c32:	400b      	ands	r3, r1
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	6939      	ldr	r1, [r7, #16]
 8000c4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	029b      	lsls	r3, r3, #10
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d100      	bne.n	8000c90 <HAL_GPIO_Init+0x17c>
 8000c8e:	e0a0      	b.n	8000dd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c90:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <HAL_GPIO_Init+0x2dc>)
 8000c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c94:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <HAL_GPIO_Init+0x2dc>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c9c:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <HAL_GPIO_Init+0x2e0>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	589b      	ldr	r3, [r3, r2]
 8000ca8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	23a0      	movs	r3, #160	; 0xa0
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d01f      	beq.n	8000d0a <HAL_GPIO_Init+0x1f6>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x2e4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d019      	beq.n	8000d06 <HAL_GPIO_Init+0x1f2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <HAL_GPIO_Init+0x2e8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a48      	ldr	r2, [pc, #288]	; (8000e00 <HAL_GPIO_Init+0x2ec>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00d      	beq.n	8000cfe <HAL_GPIO_Init+0x1ea>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a47      	ldr	r2, [pc, #284]	; (8000e04 <HAL_GPIO_Init+0x2f0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x1e6>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <HAL_GPIO_Init+0x2f4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_GPIO_Init+0x1e2>
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	e00a      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	e008      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e004      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <HAL_GPIO_Init+0x1f8>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	2103      	movs	r1, #3
 8000d10:	400a      	ands	r2, r1
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d1c:	4935      	ldr	r1, [pc, #212]	; (8000df4 <HAL_GPIO_Init+0x2e0>)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2a:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	035b      	lsls	r3, r3, #13
 8000d42:	4013      	ands	r3, r2
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	039b      	lsls	r3, r3, #14
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4013      	ands	r3, r2
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	025b      	lsls	r3, r3, #9
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_GPIO_Init+0x2f8>)
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	1e13      	subs	r3, r2, #0
 8000de2:	d000      	beq.n	8000de6 <HAL_GPIO_Init+0x2d2>
 8000de4:	e6a2      	b.n	8000b2c <HAL_GPIO_Init+0x18>
  }
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b006      	add	sp, #24
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	50000400 	.word	0x50000400
 8000dfc:	50000800 	.word	0x50000800
 8000e00:	50000c00 	.word	0x50000c00
 8000e04:	50001000 	.word	0x50001000
 8000e08:	50001c00 	.word	0x50001c00
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	000a      	movs	r2, r1
 8000e1a:	1cbb      	adds	r3, r7, #2
 8000e1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	1cba      	adds	r2, r7, #2
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	4013      	ands	r3, r2
 8000e28:	d004      	beq.n	8000e34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e003      	b.n	8000e3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	0008      	movs	r0, r1
 8000e54:	0011      	movs	r1, r2
 8000e56:	1cbb      	adds	r3, r7, #2
 8000e58:	1c02      	adds	r2, r0, #0
 8000e5a:	801a      	strh	r2, [r3, #0]
 8000e5c:	1c7b      	adds	r3, r7, #1
 8000e5e:	1c0a      	adds	r2, r1, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	1cbb      	adds	r3, r7, #2
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e74:	1cbb      	adds	r3, r7, #2
 8000e76:	881a      	ldrh	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f000 fbbf 	bl	8001616 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e98:	4bc9      	ldr	r3, [pc, #804]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea2:	4bc7      	ldr	r3, [pc, #796]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x36>
 8000eb8:	e07e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d007      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	d112      	bne.n	8000eec <HAL_RCC_OscConfig+0x68>
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10d      	bne.n	8000eec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	4bbb      	ldr	r3, [pc, #748]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d100      	bne.n	8000ede <HAL_RCC_OscConfig+0x5a>
 8000edc:	e06b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x132>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d167      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f000 fb95 	bl	8001616 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d107      	bne.n	8000f08 <HAL_RCC_OscConfig+0x84>
 8000ef8:	4bb1      	ldr	r3, [pc, #708]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4bb0      	ldr	r3, [pc, #704]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0249      	lsls	r1, r1, #9
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e027      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	02db      	lsls	r3, r3, #11
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10e      	bne.n	8000f32 <HAL_RCC_OscConfig+0xae>
 8000f14:	4baa      	ldr	r3, [pc, #680]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4ba9      	ldr	r3, [pc, #676]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	02c9      	lsls	r1, r1, #11
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	4ba7      	ldr	r3, [pc, #668]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4ba6      	ldr	r3, [pc, #664]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e012      	b.n	8000f58 <HAL_RCC_OscConfig+0xd4>
 8000f32:	4ba3      	ldr	r3, [pc, #652]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4ba2      	ldr	r3, [pc, #648]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f38:	49a2      	ldr	r1, [pc, #648]	; (80011c4 <HAL_RCC_OscConfig+0x340>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4ba0      	ldr	r3, [pc, #640]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b9b      	ldr	r3, [pc, #620]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f52:	499d      	ldr	r1, [pc, #628]	; (80011c8 <HAL_RCC_OscConfig+0x344>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d015      	beq.n	8000f8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fcf6 	bl	8000950 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f68:	e009      	b.n	8000f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fcf1 	bl	8000950 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d902      	bls.n	8000f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f000 fb4c 	bl	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f7e:	4b90      	ldr	r3, [pc, #576]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d0ef      	beq.n	8000f6a <HAL_RCC_OscConfig+0xe6>
 8000f8a:	e015      	b.n	8000fb8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fce0 	bl	8000950 <HAL_GetTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f96:	f7ff fcdb 	bl	8000950 <HAL_GetTick>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e336      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa8:	4b85      	ldr	r3, [pc, #532]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	029b      	lsls	r3, r3, #10
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x112>
 8000fb4:	e000      	b.n	8000fb8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x140>
 8000fc2:	e099      	b.n	80010f8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	2220      	movs	r2, #32
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d009      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000fd2:	4b7b      	ldr	r3, [pc, #492]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b7a      	ldr	r3, [pc, #488]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000fd8:	2120      	movs	r1, #32
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	4393      	bics	r3, r2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d13e      	bne.n	8001070 <HAL_RCC_OscConfig+0x1ec>
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d13b      	bne.n	8001070 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ff8:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_RCC_OscConfig+0x188>
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e304      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b6c      	ldr	r3, [pc, #432]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <HAL_RCC_OscConfig+0x348>)
 8001012:	4013      	ands	r3, r2
 8001014:	0019      	movs	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	021a      	lsls	r2, r3, #8
 800101c:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800101e:	430a      	orrs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2209      	movs	r2, #9
 8001028:	4393      	bics	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800102e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001034:	f000 fc42 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001038:	0001      	movs	r1, r0
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	220f      	movs	r2, #15
 8001042:	4013      	ands	r3, r2
 8001044:	4a62      	ldr	r2, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x34c>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	000a      	movs	r2, r1
 800104a:	40da      	lsrs	r2, r3
 800104c:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <HAL_RCC_OscConfig+0x350>)
 800104e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001050:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_RCC_OscConfig+0x354>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2513      	movs	r5, #19
 8001056:	197c      	adds	r4, r7, r5
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fc33 	bl	80008c4 <HAL_InitTick>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d046      	beq.n	80010f8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800106a:	197b      	adds	r3, r7, r5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	e2d2      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	2b00      	cmp	r3, #0
 8001074:	d027      	beq.n	80010c6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2209      	movs	r2, #9
 800107c:	4393      	bics	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc62 	bl	8000950 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fc5d 	bl	8000950 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e2b8      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a4:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	d0f1      	beq.n	8001092 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_RCC_OscConfig+0x348>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	0019      	movs	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	021a      	lsls	r2, r3, #8
 80010be:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fc3d 	bl	8000950 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc38 	bl	8000950 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e293      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f1      	bne.n	80010dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	4013      	ands	r3, r2
 8001100:	d100      	bne.n	8001104 <HAL_RCC_OscConfig+0x280>
 8001102:	e0a2      	b.n	800124a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d140      	bne.n	800118c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x29e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e279      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <HAL_RCC_OscConfig+0x358>)
 8001128:	4013      	ands	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	0a19      	lsrs	r1, r3, #8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	0b5b      	lsrs	r3, r3, #13
 8001150:	3301      	adds	r3, #1
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	0212      	lsls	r2, r2, #8
 8001156:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	210f      	movs	r1, #15
 8001160:	400b      	ands	r3, r1
 8001162:	491b      	ldr	r1, [pc, #108]	; (80011d0 <HAL_RCC_OscConfig+0x34c>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_RCC_OscConfig+0x350>)
 800116a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_RCC_OscConfig+0x354>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2513      	movs	r5, #19
 8001172:	197c      	adds	r4, r7, r5
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fba5 	bl	80008c4 <HAL_InitTick>
 800117a:	0003      	movs	r3, r0
 800117c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800117e:	197b      	adds	r3, r7, r5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d061      	beq.n	800124a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	e244      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d040      	beq.n	8001216 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_RCC_OscConfig+0x33c>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0049      	lsls	r1, r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fbd5 	bl	8000950 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011aa:	e019      	b.n	80011e0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fbd0 	bl	8000950 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d912      	bls.n	80011e0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e22b      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40021000 	.word	0x40021000
 80011c4:	fffeffff 	.word	0xfffeffff
 80011c8:	fffbffff 	.word	0xfffbffff
 80011cc:	ffffe0ff 	.word	0xffffe0ff
 80011d0:	08002944 	.word	0x08002944
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004
 80011dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011e0:	4bca      	ldr	r3, [pc, #808]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0df      	beq.n	80011ac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ec:	4bc7      	ldr	r3, [pc, #796]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4ac7      	ldr	r2, [pc, #796]	; (8001510 <HAL_RCC_OscConfig+0x68c>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fa:	4bc4      	ldr	r3, [pc, #784]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001200:	4bc2      	ldr	r3, [pc, #776]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	0a19      	lsrs	r1, r3, #8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	061a      	lsls	r2, r3, #24
 800120e:	4bbf      	ldr	r3, [pc, #764]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	e019      	b.n	800124a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001216:	4bbd      	ldr	r3, [pc, #756]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4bbc      	ldr	r3, [pc, #752]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800121c:	49bd      	ldr	r1, [pc, #756]	; (8001514 <HAL_RCC_OscConfig+0x690>)
 800121e:	400a      	ands	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb95 	bl	8000950 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122c:	f7ff fb90 	bl	8000950 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1eb      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800123e:	4bb3      	ldr	r3, [pc, #716]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2208      	movs	r2, #8
 8001250:	4013      	ands	r3, r2
 8001252:	d036      	beq.n	80012c2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d019      	beq.n	8001290 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125c:	4bab      	ldr	r3, [pc, #684]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800125e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001260:	4baa      	ldr	r3, [pc, #680]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb72 	bl	8000950 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fb6d 	bl	8000950 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1c8      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001284:	4ba1      	ldr	r3, [pc, #644]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d0f1      	beq.n	8001272 <HAL_RCC_OscConfig+0x3ee>
 800128e:	e018      	b.n	80012c2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b9e      	ldr	r3, [pc, #632]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001294:	4b9d      	ldr	r3, [pc, #628]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001296:	2101      	movs	r1, #1
 8001298:	438a      	bics	r2, r1
 800129a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fb58 	bl	8000950 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fb53 	bl	8000950 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1ae      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012b8:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80012ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f1      	bne.n	80012a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2204      	movs	r2, #4
 80012c8:	4013      	ands	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0x44a>
 80012cc:	e0ae      	b.n	800142c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2023      	movs	r0, #35	; 0x23
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b8d      	ldr	r3, [pc, #564]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80012d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	055b      	lsls	r3, r3, #21
 80012de:	4013      	ands	r3, r2
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b8a      	ldr	r3, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80012e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e6:	4b89      	ldr	r3, [pc, #548]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0549      	lsls	r1, r1, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012f0:	183b      	adds	r3, r7, r0
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	d11a      	bne.n	8001338 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0049      	lsls	r1, r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001310:	f7ff fb1e 	bl	8000950 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fb19 	bl	8000950 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	; 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e174      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b7a      	ldr	r3, [pc, #488]	; (8001518 <HAL_RCC_OscConfig+0x694>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4013      	ands	r3, r2
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	429a      	cmp	r2, r3
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x4d0>
 8001344:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0049      	lsls	r1, r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	651a      	str	r2, [r3, #80]	; 0x50
 8001352:	e031      	b.n	80013b8 <HAL_RCC_OscConfig+0x534>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x4f2>
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800135e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001360:	4b6a      	ldr	r3, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001362:	496c      	ldr	r1, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x690>)
 8001364:	400a      	ands	r2, r1
 8001366:	651a      	str	r2, [r3, #80]	; 0x50
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800136a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136c:	4b67      	ldr	r3, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800136e:	496b      	ldr	r1, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x698>)
 8001370:	400a      	ands	r2, r1
 8001372:	651a      	str	r2, [r3, #80]	; 0x50
 8001374:	e020      	b.n	80013b8 <HAL_RCC_OscConfig+0x534>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	23a0      	movs	r3, #160	; 0xa0
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	429a      	cmp	r2, r3
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x51c>
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001386:	4b61      	ldr	r3, [pc, #388]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	00c9      	lsls	r1, r1, #3
 800138c:	430a      	orrs	r2, r1
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001394:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0049      	lsls	r1, r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	651a      	str	r2, [r3, #80]	; 0x50
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0x534>
 80013a0:	4b5a      	ldr	r3, [pc, #360]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a4:	4b59      	ldr	r3, [pc, #356]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013a6:	495b      	ldr	r1, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x690>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	651a      	str	r2, [r3, #80]	; 0x50
 80013ac:	4b57      	ldr	r3, [pc, #348]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013b2:	495a      	ldr	r1, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x698>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d015      	beq.n	80013ec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fac6 	bl	8000950 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c8:	e009      	b.n	80013de <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fac1 	bl	8000950 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_RCC_OscConfig+0x69c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e11b      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d0ef      	beq.n	80013ca <HAL_RCC_OscConfig+0x546>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fab0 	bl	8000950 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f4:	e009      	b.n	800140a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff faab 	bl	8000950 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_RCC_OscConfig+0x69c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e105      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800140c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d1ef      	bne.n	80013f6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001416:	2323      	movs	r3, #35	; 0x23
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001426:	493f      	ldr	r1, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x6a0>)
 8001428:	400a      	ands	r2, r1
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	4013      	ands	r3, r2
 8001434:	d049      	beq.n	80014ca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d026      	beq.n	800148c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800144c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_OscConfig+0x6a4>)
 8001458:	6a1a      	ldr	r2, [r3, #32]
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x6a4>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0189      	lsls	r1, r1, #6
 8001460:	430a      	orrs	r2, r1
 8001462:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fa74 	bl	8000950 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146e:	f7ff fa6f 	bl	8000950 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e0ca      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d0f1      	beq.n	800146e <HAL_RCC_OscConfig+0x5ea>
 800148a:	e01e      	b.n	80014ca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_RCC_OscConfig+0x688>)
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x688>)
 8001492:	2101      	movs	r1, #1
 8001494:	438a      	bics	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_RCC_OscConfig+0x6a4>)
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_RCC_OscConfig+0x6a4>)
 800149e:	4923      	ldr	r1, [pc, #140]	; (800152c <HAL_RCC_OscConfig+0x6a8>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa54 	bl	8000950 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ae:	f7ff fa4f 	bl	8000950 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0aa      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
 80014c8:	d1f1      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d100      	bne.n	80014d4 <HAL_RCC_OscConfig+0x650>
 80014d2:	e09f      	b.n	8001614 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d100      	bne.n	80014dc <HAL_RCC_OscConfig+0x658>
 80014da:	e078      	b.n	80015ce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d159      	bne.n	8001598 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_RCC_OscConfig+0x688>)
 80014ea:	4911      	ldr	r1, [pc, #68]	; (8001530 <HAL_RCC_OscConfig+0x6ac>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fa2e 	bl	8000950 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f8:	e01c      	b.n	8001534 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fa29 	bl	8000950 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d915      	bls.n	8001534 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e084      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
 800150c:	40021000 	.word	0x40021000
 8001510:	ffff1fff 	.word	0xffff1fff
 8001514:	fffffeff 	.word	0xfffffeff
 8001518:	40007000 	.word	0x40007000
 800151c:	fffffbff 	.word	0xfffffbff
 8001520:	00001388 	.word	0x00001388
 8001524:	efffffff 	.word	0xefffffff
 8001528:	40010000 	.word	0x40010000
 800152c:	ffffdfff 	.word	0xffffdfff
 8001530:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	049b      	lsls	r3, r3, #18
 800153c:	4013      	ands	r3, r2
 800153e:	d1dc      	bne.n	80014fa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001540:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_RCC_OscConfig+0x7a0>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	431a      	orrs	r2, r3
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 800155c:	430a      	orrs	r2, r1
 800155e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0449      	lsls	r1, r1, #17
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff f9ef 	bl	8000950 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff f9ea 	bl	8000950 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e045      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	049b      	lsls	r3, r3, #18
 8001592:	4013      	ands	r3, r2
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x6f4>
 8001596:	e03d      	b.n	8001614 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 800159e:	4922      	ldr	r1, [pc, #136]	; (8001628 <HAL_RCC_OscConfig+0x7a4>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9d4 	bl	8000950 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff f9cf 	bl	8000950 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e02a      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	049b      	lsls	r3, r3, #18
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x72a>
 80015cc:	e022      	b.n	8001614 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e01d      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_RCC_OscConfig+0x79c>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10f      	bne.n	8001610 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	23f0      	movs	r3, #240	; 0xf0
 80015f4:	039b      	lsls	r3, r3, #14
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	401a      	ands	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b00a      	add	sp, #40	; 0x28
 800161c:	bdb0      	pop	{r4, r5, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	ff02ffff 	.word	0xff02ffff
 8001628:	feffffff 	.word	0xfeffffff

0800162c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e128      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b96      	ldr	r3, [pc, #600]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d91e      	bls.n	800168c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	4b90      	ldr	r3, [pc, #576]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001660:	f7ff f976 	bl	8000950 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001668:	e009      	b.n	800167e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f7ff f971 	bl	8000950 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a8a      	ldr	r2, [pc, #552]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e109      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b87      	ldr	r3, [pc, #540]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	22f0      	movs	r2, #240	; 0xf0
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	d100      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x8a>
 80016b4:	e089      	b.n	80017ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016be:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	029b      	lsls	r3, r3, #10
 80016c6:	4013      	ands	r3, r2
 80016c8:	d120      	bne.n	800170c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e1      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d114      	bne.n	800170c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0d5      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2204      	movs	r2, #4
 80016f4:	4013      	ands	r3, r2
 80016f6:	d109      	bne.n	800170c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0ca      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0c2      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2203      	movs	r2, #3
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b62      	ldr	r3, [pc, #392]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f916 	bl	8000950 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d111      	bne.n	8001754 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001730:	e009      	b.n	8001746 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff f90d 	bl	8000950 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0a5      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	220c      	movs	r2, #12
 800174c:	4013      	ands	r3, r2
 800174e:	2b08      	cmp	r3, #8
 8001750:	d1ef      	bne.n	8001732 <HAL_RCC_ClockConfig+0x106>
 8001752:	e03a      	b.n	80017ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d111      	bne.n	8001780 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff f8f7 	bl	8000950 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e08f      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	220c      	movs	r2, #12
 8001778:	4013      	ands	r3, r2
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_ClockConfig+0x132>
 800177e:	e024      	b.n	80017ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d11b      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001788:	e009      	b.n	800179e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7ff f8e1 	bl	8000950 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e079      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	220c      	movs	r2, #12
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d1ef      	bne.n	800178a <HAL_RCC_ClockConfig+0x15e>
 80017aa:	e00e      	b.n	80017ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f8d0 	bl	8000950 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e068      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	220c      	movs	r2, #12
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d21e      	bcs.n	8001816 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ea:	f7ff f8b1 	bl	8000950 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	e009      	b.n	8001808 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7ff f8ac 	bl	8000950 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_RCC_ClockConfig+0x274>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e044      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_ClockConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d1ee      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x27c>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2208      	movs	r2, #8
 800183a:	4013      	ands	r3, r2
 800183c:	d00a      	beq.n	8001854 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <HAL_RCC_ClockConfig+0x280>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	00da      	lsls	r2, r3, #3
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001854:	f000 f832 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001858:	0001      	movs	r1, r0
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_ClockConfig+0x278>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	220f      	movs	r2, #15
 8001862:	4013      	ands	r3, r2
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x284>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	000a      	movs	r2, r1
 800186a:	40da      	lsrs	r2, r3
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_RCC_ClockConfig+0x288>)
 800186e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_ClockConfig+0x28c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	250b      	movs	r5, #11
 8001876:	197c      	adds	r4, r7, r5
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff f823 	bl	80008c4 <HAL_InitTick>
 800187e:	0003      	movs	r3, r0
 8001880:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001882:	197b      	adds	r3, r7, r5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	e000      	b.n	8001892 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40022000 	.word	0x40022000
 80018a0:	00001388 	.word	0x00001388
 80018a4:	40021000 	.word	0x40021000
 80018a8:	fffff8ff 	.word	0xfffff8ff
 80018ac:	ffffc7ff 	.word	0xffffc7ff
 80018b0:	08002944 	.word	0x08002944
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ca:	230c      	movs	r3, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d014      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018d2:	d900      	bls.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1a>
 80018d4:	e07b      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x112>
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x24>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d00b      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e076      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2210      	movs	r2, #16
 80018e6:	4013      	ands	r3, r2
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018ee:	e07c      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_GetSysClockFreq+0x140>)
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f4:	e079      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x144>)
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fa:	e076      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fe:	0c9a      	lsrs	r2, r3, #18
 8001900:	230f      	movs	r3, #15
 8001902:	401a      	ands	r2, r3
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x148>)
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	0d9a      	lsrs	r2, r3, #22
 800190e:	2303      	movs	r3, #3
 8001910:	4013      	ands	r3, r2
 8001912:	3301      	adds	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	4013      	ands	r3, r2
 8001920:	d01a      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x144>)
 800192c:	2300      	movs	r3, #0
 800192e:	69b8      	ldr	r0, [r7, #24]
 8001930:	69f9      	ldr	r1, [r7, #28]
 8001932:	f7fe fc95 	bl	8000260 <__aeabi_lmul>
 8001936:	0002      	movs	r2, r0
 8001938:	000b      	movs	r3, r1
 800193a:	0010      	movs	r0, r2
 800193c:	0019      	movs	r1, r3
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f7fe fc69 	bl	8000220 <__aeabi_uldivmod>
 800194e:	0002      	movs	r2, r0
 8001950:	000b      	movs	r3, r1
 8001952:	0013      	movs	r3, r2
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
 8001956:	e037      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d01a      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800196c:	2300      	movs	r3, #0
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	f7fe fc75 	bl	8000260 <__aeabi_lmul>
 8001976:	0002      	movs	r2, r0
 8001978:	000b      	movs	r3, r1
 800197a:	0010      	movs	r0, r2
 800197c:	0019      	movs	r1, r3
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f7fe fc49 	bl	8000220 <__aeabi_uldivmod>
 800198e:	0002      	movs	r2, r0
 8001990:	000b      	movs	r3, r1
 8001992:	0013      	movs	r3, r2
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
 8001996:	e017      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	0018      	movs	r0, r3
 800199c:	2300      	movs	r3, #0
 800199e:	0019      	movs	r1, r3
 80019a0:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_RCC_GetSysClockFreq+0x140>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	f7fe fc5c 	bl	8000260 <__aeabi_lmul>
 80019a8:	0002      	movs	r2, r0
 80019aa:	000b      	movs	r3, r1
 80019ac:	0010      	movs	r0, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	001c      	movs	r4, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	001d      	movs	r5, r3
 80019b8:	0022      	movs	r2, r4
 80019ba:	002b      	movs	r3, r5
 80019bc:	f7fe fc30 	bl	8000220 <__aeabi_uldivmod>
 80019c0:	0002      	movs	r2, r0
 80019c2:	000b      	movs	r3, r1
 80019c4:	0013      	movs	r3, r2
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019cc:	e00d      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	0b5b      	lsrs	r3, r3, #13
 80019d4:	2207      	movs	r2, #7
 80019d6:	4013      	ands	r3, r2
 80019d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	3301      	adds	r3, #1
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0212      	lsls	r2, r2, #8
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b00e      	add	sp, #56	; 0x38
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	003d0900 	.word	0x003d0900
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	007a1200 	.word	0x007a1200
 8001a04:	0800295c 	.word	0x0800295c

08001a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a20:	f7ff fff2 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a24:	0001      	movs	r1, r0
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4013      	ands	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	40d9      	lsrs	r1, r3
 8001a36:	000b      	movs	r3, r1
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08002954 	.word	0x08002954

08001a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a4c:	f7ff ffdc 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a50:	0001      	movs	r1, r0
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	2207      	movs	r2, #7
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	000b      	movs	r3, r1
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08002954 	.word	0x08002954

08001a74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a7c:	2017      	movs	r0, #23
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001a8e:	e0c7      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a90:	4b9b      	ldr	r3, [pc, #620]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d109      	bne.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b98      	ldr	r3, [pc, #608]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa0:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0549      	lsls	r1, r1, #21
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d11a      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abc:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0049      	lsls	r1, r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7fe ff41 	bl	8000950 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7fe ff3c 	bl	8000950 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e107      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b87      	ldr	r3, [pc, #540]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001af2:	4b83      	ldr	r3, [pc, #524]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	039b      	lsls	r3, r3, #14
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	039b      	lsls	r3, r3, #14
 8001b06:	4013      	ands	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	401a      	ands	r2, r3
 8001b18:	23c0      	movs	r3, #192	; 0xc0
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10a      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b20:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	401a      	ands	r2, r3
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d101      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0df      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03b      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	23c0      	movs	r3, #192	; 0xc0
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	4013      	ands	r3, r2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d033      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d02e      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b66:	4a68      	ldr	r2, [pc, #416]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b6c:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b70:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0309      	lsls	r1, r1, #12
 8001b76:	430a      	orrs	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b7e:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b80:	4962      	ldr	r1, [pc, #392]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b82:	400a      	ands	r2, r1
 8001b84:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b86:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d014      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe fedb 	bl	8000950 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fed6 	bl	8000950 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a59      	ldr	r2, [pc, #356]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0a0      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bb4:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0ef      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	401a      	ands	r2, r3
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001bf8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	401a      	ands	r2, r3
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c0a:	2317      	movs	r3, #23
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c1a:	493f      	ldr	r1, [pc, #252]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2204      	movs	r2, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4013      	ands	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	fffcffff 	.word	0xfffcffff
 8001d0c:	fff7ffff 	.word	0xfff7ffff
 8001d10:	00001388 	.word	0x00001388
 8001d14:	ffcfffff 	.word	0xffcfffff
 8001d18:	efffffff 	.word	0xefffffff
 8001d1c:	fffff3ff 	.word	0xfffff3ff
 8001d20:	ffffcfff 	.word	0xffffcfff
 8001d24:	fbffffff 	.word	0xfbffffff
 8001d28:	fff3ffff 	.word	0xfff3ffff

08001d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e044      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2278      	movs	r2, #120	; 0x78
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fd0b 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f8d0 	bl	8001f14 <UART_SetConfig>
 8001d74:	0003      	movs	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e024      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fb61 	bl	8002450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <HAL_UART_Init+0xa4>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	212a      	movs	r1, #42	; 0x2a
 8001daa:	438a      	bics	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fbf9 	bl	80025b8 <UART_CheckIdleState>
 8001dc6:	0003      	movs	r3, r0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	ffffb7ff 	.word	0xffffb7ff

08001dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d000      	beq.n	8001dee <HAL_UART_Transmit+0x1a>
 8001dec:	e08c      	b.n	8001f08 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_UART_Transmit+0x28>
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e084      	b.n	8001f0a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d109      	bne.n	8001e20 <HAL_UART_Transmit+0x4c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e074      	b.n	8001f0a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2284      	movs	r2, #132	; 0x84
 8001e24:	2100      	movs	r1, #0
 8001e26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2221      	movs	r2, #33	; 0x21
 8001e2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fd8f 	bl	8000950 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1dba      	adds	r2, r7, #6
 8001e3a:	2150      	movs	r1, #80	; 0x50
 8001e3c:	8812      	ldrh	r2, [r2, #0]
 8001e3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1dba      	adds	r2, r7, #6
 8001e44:	2152      	movs	r1, #82	; 0x52
 8001e46:	8812      	ldrh	r2, [r2, #0]
 8001e48:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	015b      	lsls	r3, r3, #5
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d108      	bne.n	8001e68 <HAL_UART_Transmit+0x94>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	e003      	b.n	8001e70 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e70:	e02f      	b.n	8001ed2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	f000 fc42 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e03b      	b.n	8001f0a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	05d2      	lsls	r2, r2, #23
 8001ea4:	0dd2      	lsrs	r2, r2, #23
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	3302      	adds	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	e007      	b.n	8001ec0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2252      	movs	r2, #82	; 0x52
 8001ec4:	5a9b      	ldrh	r3, [r3, r2]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2252      	movs	r2, #82	; 0x52
 8001ed0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2252      	movs	r2, #82	; 0x52
 8001ed6:	5a9b      	ldrh	r3, [r3, r2]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1c9      	bne.n	8001e72 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	f000 fc0c 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e005      	b.n	8001f0a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b008      	add	sp, #32
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f1c:	231a      	movs	r3, #26
 8001f1e:	2218      	movs	r2, #24
 8001f20:	189b      	adds	r3, r3, r2
 8001f22:	19db      	adds	r3, r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4ac3      	ldr	r2, [pc, #780]	; (8002254 <UART_SetConfig+0x340>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4abe      	ldr	r2, [pc, #760]	; (8002258 <UART_SetConfig+0x344>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4ab8      	ldr	r2, [pc, #736]	; (800225c <UART_SetConfig+0x348>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f84:	4313      	orrs	r3, r2
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4ab4      	ldr	r2, [pc, #720]	; (8002260 <UART_SetConfig+0x34c>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4ab0      	ldr	r2, [pc, #704]	; (8002264 <UART_SetConfig+0x350>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d131      	bne.n	800200c <UART_SetConfig+0xf8>
 8001fa8:	4baf      	ldr	r3, [pc, #700]	; (8002268 <UART_SetConfig+0x354>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	2203      	movs	r2, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d01d      	beq.n	8001ff0 <UART_SetConfig+0xdc>
 8001fb4:	d823      	bhi.n	8001ffe <UART_SetConfig+0xea>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d00c      	beq.n	8001fd4 <UART_SetConfig+0xc0>
 8001fba:	d820      	bhi.n	8001ffe <UART_SetConfig+0xea>
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <UART_SetConfig+0xb2>
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d00e      	beq.n	8001fe2 <UART_SetConfig+0xce>
 8001fc4:	e01b      	b.n	8001ffe <UART_SetConfig+0xea>
 8001fc6:	231b      	movs	r3, #27
 8001fc8:	2218      	movs	r2, #24
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	19db      	adds	r3, r3, r7
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e0b4      	b.n	800213e <UART_SetConfig+0x22a>
 8001fd4:	231b      	movs	r3, #27
 8001fd6:	2218      	movs	r2, #24
 8001fd8:	189b      	adds	r3, r3, r2
 8001fda:	19db      	adds	r3, r3, r7
 8001fdc:	2202      	movs	r2, #2
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e0ad      	b.n	800213e <UART_SetConfig+0x22a>
 8001fe2:	231b      	movs	r3, #27
 8001fe4:	2218      	movs	r2, #24
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	19db      	adds	r3, r3, r7
 8001fea:	2204      	movs	r2, #4
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	e0a6      	b.n	800213e <UART_SetConfig+0x22a>
 8001ff0:	231b      	movs	r3, #27
 8001ff2:	2218      	movs	r2, #24
 8001ff4:	189b      	adds	r3, r3, r2
 8001ff6:	19db      	adds	r3, r3, r7
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e09f      	b.n	800213e <UART_SetConfig+0x22a>
 8001ffe:	231b      	movs	r3, #27
 8002000:	2218      	movs	r2, #24
 8002002:	189b      	adds	r3, r3, r2
 8002004:	19db      	adds	r3, r3, r7
 8002006:	2210      	movs	r2, #16
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e098      	b.n	800213e <UART_SetConfig+0x22a>
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a96      	ldr	r2, [pc, #600]	; (800226c <UART_SetConfig+0x358>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d131      	bne.n	800207a <UART_SetConfig+0x166>
 8002016:	4b94      	ldr	r3, [pc, #592]	; (8002268 <UART_SetConfig+0x354>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	220c      	movs	r2, #12
 800201c:	4013      	ands	r3, r2
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d01d      	beq.n	800205e <UART_SetConfig+0x14a>
 8002022:	d823      	bhi.n	800206c <UART_SetConfig+0x158>
 8002024:	2b08      	cmp	r3, #8
 8002026:	d00c      	beq.n	8002042 <UART_SetConfig+0x12e>
 8002028:	d820      	bhi.n	800206c <UART_SetConfig+0x158>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <UART_SetConfig+0x120>
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00e      	beq.n	8002050 <UART_SetConfig+0x13c>
 8002032:	e01b      	b.n	800206c <UART_SetConfig+0x158>
 8002034:	231b      	movs	r3, #27
 8002036:	2218      	movs	r2, #24
 8002038:	189b      	adds	r3, r3, r2
 800203a:	19db      	adds	r3, r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e07d      	b.n	800213e <UART_SetConfig+0x22a>
 8002042:	231b      	movs	r3, #27
 8002044:	2218      	movs	r2, #24
 8002046:	189b      	adds	r3, r3, r2
 8002048:	19db      	adds	r3, r3, r7
 800204a:	2202      	movs	r2, #2
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e076      	b.n	800213e <UART_SetConfig+0x22a>
 8002050:	231b      	movs	r3, #27
 8002052:	2218      	movs	r2, #24
 8002054:	189b      	adds	r3, r3, r2
 8002056:	19db      	adds	r3, r3, r7
 8002058:	2204      	movs	r2, #4
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e06f      	b.n	800213e <UART_SetConfig+0x22a>
 800205e:	231b      	movs	r3, #27
 8002060:	2218      	movs	r2, #24
 8002062:	189b      	adds	r3, r3, r2
 8002064:	19db      	adds	r3, r3, r7
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e068      	b.n	800213e <UART_SetConfig+0x22a>
 800206c:	231b      	movs	r3, #27
 800206e:	2218      	movs	r2, #24
 8002070:	189b      	adds	r3, r3, r2
 8002072:	19db      	adds	r3, r3, r7
 8002074:	2210      	movs	r2, #16
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e061      	b.n	800213e <UART_SetConfig+0x22a>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7c      	ldr	r2, [pc, #496]	; (8002270 <UART_SetConfig+0x35c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d106      	bne.n	8002092 <UART_SetConfig+0x17e>
 8002084:	231b      	movs	r3, #27
 8002086:	2218      	movs	r2, #24
 8002088:	189b      	adds	r3, r3, r2
 800208a:	19db      	adds	r3, r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e055      	b.n	800213e <UART_SetConfig+0x22a>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <UART_SetConfig+0x360>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d106      	bne.n	80020aa <UART_SetConfig+0x196>
 800209c:	231b      	movs	r3, #27
 800209e:	2218      	movs	r2, #24
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	19db      	adds	r3, r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e049      	b.n	800213e <UART_SetConfig+0x22a>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6b      	ldr	r2, [pc, #428]	; (800225c <UART_SetConfig+0x348>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d13e      	bne.n	8002132 <UART_SetConfig+0x21e>
 80020b4:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <UART_SetConfig+0x354>)
 80020b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4013      	ands	r3, r2
 80020be:	22c0      	movs	r2, #192	; 0xc0
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <UART_SetConfig+0x202>
 80020c6:	22c0      	movs	r2, #192	; 0xc0
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d82a      	bhi.n	8002124 <UART_SetConfig+0x210>
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d011      	beq.n	80020fa <UART_SetConfig+0x1e6>
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	4293      	cmp	r3, r2
 80020dc:	d822      	bhi.n	8002124 <UART_SetConfig+0x210>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <UART_SetConfig+0x1d8>
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	00d2      	lsls	r2, r2, #3
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00e      	beq.n	8002108 <UART_SetConfig+0x1f4>
 80020ea:	e01b      	b.n	8002124 <UART_SetConfig+0x210>
 80020ec:	231b      	movs	r3, #27
 80020ee:	2218      	movs	r2, #24
 80020f0:	189b      	adds	r3, r3, r2
 80020f2:	19db      	adds	r3, r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e021      	b.n	800213e <UART_SetConfig+0x22a>
 80020fa:	231b      	movs	r3, #27
 80020fc:	2218      	movs	r2, #24
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	19db      	adds	r3, r3, r7
 8002102:	2202      	movs	r2, #2
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e01a      	b.n	800213e <UART_SetConfig+0x22a>
 8002108:	231b      	movs	r3, #27
 800210a:	2218      	movs	r2, #24
 800210c:	189b      	adds	r3, r3, r2
 800210e:	19db      	adds	r3, r3, r7
 8002110:	2204      	movs	r2, #4
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e013      	b.n	800213e <UART_SetConfig+0x22a>
 8002116:	231b      	movs	r3, #27
 8002118:	2218      	movs	r2, #24
 800211a:	189b      	adds	r3, r3, r2
 800211c:	19db      	adds	r3, r3, r7
 800211e:	2208      	movs	r2, #8
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e00c      	b.n	800213e <UART_SetConfig+0x22a>
 8002124:	231b      	movs	r3, #27
 8002126:	2218      	movs	r2, #24
 8002128:	189b      	adds	r3, r3, r2
 800212a:	19db      	adds	r3, r3, r7
 800212c:	2210      	movs	r2, #16
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e005      	b.n	800213e <UART_SetConfig+0x22a>
 8002132:	231b      	movs	r3, #27
 8002134:	2218      	movs	r2, #24
 8002136:	189b      	adds	r3, r3, r2
 8002138:	19db      	adds	r3, r3, r7
 800213a:	2210      	movs	r2, #16
 800213c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a46      	ldr	r2, [pc, #280]	; (800225c <UART_SetConfig+0x348>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d000      	beq.n	800214a <UART_SetConfig+0x236>
 8002148:	e09a      	b.n	8002280 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800214a:	231b      	movs	r3, #27
 800214c:	2218      	movs	r2, #24
 800214e:	189b      	adds	r3, r3, r2
 8002150:	19db      	adds	r3, r3, r7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d01d      	beq.n	8002194 <UART_SetConfig+0x280>
 8002158:	dc20      	bgt.n	800219c <UART_SetConfig+0x288>
 800215a:	2b04      	cmp	r3, #4
 800215c:	d015      	beq.n	800218a <UART_SetConfig+0x276>
 800215e:	dc1d      	bgt.n	800219c <UART_SetConfig+0x288>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <UART_SetConfig+0x256>
 8002164:	2b02      	cmp	r3, #2
 8002166:	d005      	beq.n	8002174 <UART_SetConfig+0x260>
 8002168:	e018      	b.n	800219c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800216a:	f7ff fc57 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 800216e:	0003      	movs	r3, r0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002172:	e01c      	b.n	80021ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <UART_SetConfig+0x354>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2210      	movs	r2, #16
 800217a:	4013      	ands	r3, r2
 800217c:	d002      	beq.n	8002184 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800217e:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <UART_SetConfig+0x364>)
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002182:	e014      	b.n	80021ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <UART_SetConfig+0x368>)
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002188:	e011      	b.n	80021ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800218a:	f7ff fb97 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800218e:	0003      	movs	r3, r0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002192:	e00c      	b.n	80021ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800219a:	e008      	b.n	80021ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80021a0:	231a      	movs	r3, #26
 80021a2:	2218      	movs	r2, #24
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	19db      	adds	r3, r3, r7
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
        break;
 80021ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <UART_SetConfig+0x2a2>
 80021b4:	e133      	b.n	800241e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	0013      	movs	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d305      	bcc.n	80021d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d906      	bls.n	80021e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80021d2:	231a      	movs	r3, #26
 80021d4:	2218      	movs	r2, #24
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	19db      	adds	r3, r3, r7
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e11e      	b.n	800241e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	6939      	ldr	r1, [r7, #16]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	000b      	movs	r3, r1
 80021ee:	0e1b      	lsrs	r3, r3, #24
 80021f0:	0010      	movs	r0, r2
 80021f2:	0205      	lsls	r5, r0, #8
 80021f4:	431d      	orrs	r5, r3
 80021f6:	000b      	movs	r3, r1
 80021f8:	021c      	lsls	r4, r3, #8
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	1900      	adds	r0, r0, r4
 800220c:	4169      	adcs	r1, r5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f7fe f800 	bl	8000220 <__aeabi_uldivmod>
 8002220:	0002      	movs	r2, r0
 8002222:	000b      	movs	r3, r1
 8002224:	0013      	movs	r3, r2
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222a:	23c0      	movs	r3, #192	; 0xc0
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	429a      	cmp	r2, r3
 8002230:	d309      	bcc.n	8002246 <UART_SetConfig+0x332>
 8002232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	035b      	lsls	r3, r3, #13
 8002238:	429a      	cmp	r2, r3
 800223a:	d204      	bcs.n	8002246 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	e0eb      	b.n	800241e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002246:	231a      	movs	r3, #26
 8002248:	2218      	movs	r2, #24
 800224a:	189b      	adds	r3, r3, r2
 800224c:	19db      	adds	r3, r3, r7
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e0e4      	b.n	800241e <UART_SetConfig+0x50a>
 8002254:	efff69f3 	.word	0xefff69f3
 8002258:	ffffcfff 	.word	0xffffcfff
 800225c:	40004800 	.word	0x40004800
 8002260:	fffff4ff 	.word	0xfffff4ff
 8002264:	40013800 	.word	0x40013800
 8002268:	40021000 	.word	0x40021000
 800226c:	40004400 	.word	0x40004400
 8002270:	40004c00 	.word	0x40004c00
 8002274:	40005000 	.word	0x40005000
 8002278:	003d0900 	.word	0x003d0900
 800227c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	429a      	cmp	r2, r3
 800228a:	d000      	beq.n	800228e <UART_SetConfig+0x37a>
 800228c:	e070      	b.n	8002370 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800228e:	231b      	movs	r3, #27
 8002290:	2218      	movs	r2, #24
 8002292:	189b      	adds	r3, r3, r2
 8002294:	19db      	adds	r3, r3, r7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d822      	bhi.n	80022e2 <UART_SetConfig+0x3ce>
 800229c:	009a      	lsls	r2, r3, #2
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <UART_SetConfig+0x528>)
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff fbb9 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 80022aa:	0003      	movs	r3, r0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ae:	e021      	b.n	80022f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022b0:	f7ff fbca 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 80022b4:	0003      	movs	r3, r0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b8:	e01c      	b.n	80022f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ba:	4b61      	ldr	r3, [pc, #388]	; (8002440 <UART_SetConfig+0x52c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	4013      	ands	r3, r2
 80022c2:	d002      	beq.n	80022ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022c4:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <UART_SetConfig+0x530>)
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022c8:	e014      	b.n	80022f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <UART_SetConfig+0x534>)
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ce:	e011      	b.n	80022f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d0:	f7ff faf4 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 80022d4:	0003      	movs	r3, r0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022d8:	e00c      	b.n	80022f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022e0:	e008      	b.n	80022f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022e6:	231a      	movs	r3, #26
 80022e8:	2218      	movs	r2, #24
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	19db      	adds	r3, r3, r7
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
        break;
 80022f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d100      	bne.n	80022fc <UART_SetConfig+0x3e8>
 80022fa:	e090      	b.n	800241e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	005a      	lsls	r2, r3, #1
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	18d2      	adds	r2, r2, r3
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0019      	movs	r1, r3
 800230e:	0010      	movs	r0, r2
 8002310:	f7fd fefa 	bl	8000108 <__udivsi3>
 8002314:	0003      	movs	r3, r0
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b0f      	cmp	r3, #15
 800231c:	d921      	bls.n	8002362 <UART_SetConfig+0x44e>
 800231e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	429a      	cmp	r2, r3
 8002326:	d21c      	bcs.n	8002362 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	b29a      	uxth	r2, r3
 800232c:	200e      	movs	r0, #14
 800232e:	2418      	movs	r4, #24
 8002330:	1903      	adds	r3, r0, r4
 8002332:	19db      	adds	r3, r3, r7
 8002334:	210f      	movs	r1, #15
 8002336:	438a      	bics	r2, r1
 8002338:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	b29b      	uxth	r3, r3
 8002340:	2207      	movs	r2, #7
 8002342:	4013      	ands	r3, r2
 8002344:	b299      	uxth	r1, r3
 8002346:	1903      	adds	r3, r0, r4
 8002348:	19db      	adds	r3, r3, r7
 800234a:	1902      	adds	r2, r0, r4
 800234c:	19d2      	adds	r2, r2, r7
 800234e:	8812      	ldrh	r2, [r2, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1902      	adds	r2, r0, r4
 800235a:	19d2      	adds	r2, r2, r7
 800235c:	8812      	ldrh	r2, [r2, #0]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	e05d      	b.n	800241e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002362:	231a      	movs	r3, #26
 8002364:	2218      	movs	r2, #24
 8002366:	189b      	adds	r3, r3, r2
 8002368:	19db      	adds	r3, r3, r7
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e056      	b.n	800241e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002370:	231b      	movs	r3, #27
 8002372:	2218      	movs	r2, #24
 8002374:	189b      	adds	r3, r3, r2
 8002376:	19db      	adds	r3, r3, r7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b08      	cmp	r3, #8
 800237c:	d822      	bhi.n	80023c4 <UART_SetConfig+0x4b0>
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <UART_SetConfig+0x538>)
 8002382:	18d3      	adds	r3, r2, r3
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002388:	f7ff fb48 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 800238c:	0003      	movs	r3, r0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002390:	e021      	b.n	80023d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002392:	f7ff fb59 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002396:	0003      	movs	r3, r0
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800239a:	e01c      	b.n	80023d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <UART_SetConfig+0x52c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2210      	movs	r2, #16
 80023a2:	4013      	ands	r3, r2
 80023a4:	d002      	beq.n	80023ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <UART_SetConfig+0x530>)
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023aa:	e014      	b.n	80023d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <UART_SetConfig+0x534>)
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b0:	e011      	b.n	80023d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023b2:	f7ff fa83 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 80023b6:	0003      	movs	r3, r0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ba:	e00c      	b.n	80023d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023c2:	e008      	b.n	80023d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80023c8:	231a      	movs	r3, #26
 80023ca:	2218      	movs	r2, #24
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	19db      	adds	r3, r3, r7
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
        break;
 80023d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	085a      	lsrs	r2, r3, #1
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	18d2      	adds	r2, r2, r3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0019      	movs	r1, r3
 80023ec:	0010      	movs	r0, r2
 80023ee:	f7fd fe8b 	bl	8000108 <__udivsi3>
 80023f2:	0003      	movs	r3, r0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d90a      	bls.n	8002412 <UART_SetConfig+0x4fe>
 80023fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	025b      	lsls	r3, r3, #9
 8002402:	429a      	cmp	r2, r3
 8002404:	d205      	bcs.n	8002412 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	b29a      	uxth	r2, r3
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	e005      	b.n	800241e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002412:	231a      	movs	r3, #26
 8002414:	2218      	movs	r2, #24
 8002416:	189b      	adds	r3, r3, r2
 8002418:	19db      	adds	r3, r3, r7
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2200      	movs	r2, #0
 8002422:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2200      	movs	r2, #0
 8002428:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800242a:	231a      	movs	r3, #26
 800242c:	2218      	movs	r2, #24
 800242e:	189b      	adds	r3, r3, r2
 8002430:	19db      	adds	r3, r3, r7
 8002432:	781b      	ldrb	r3, [r3, #0]
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b00e      	add	sp, #56	; 0x38
 800243a:	bdb0      	pop	{r4, r5, r7, pc}
 800243c:	08002968 	.word	0x08002968
 8002440:	40021000 	.word	0x40021000
 8002444:	003d0900 	.word	0x003d0900
 8002448:	00f42400 	.word	0x00f42400
 800244c:	0800298c 	.word	0x0800298c

08002450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	d00b      	beq.n	800247a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <UART_AdvFeatureConfig+0x144>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d00b      	beq.n	800249c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <UART_AdvFeatureConfig+0x148>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00b      	beq.n	80024be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a3b      	ldr	r2, [pc, #236]	; (800259c <UART_AdvFeatureConfig+0x14c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2208      	movs	r2, #8
 80024c4:	4013      	ands	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <UART_AdvFeatureConfig+0x150>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2210      	movs	r2, #16
 80024e6:	4013      	ands	r3, r2
 80024e8:	d00b      	beq.n	8002502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <UART_AdvFeatureConfig+0x154>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2220      	movs	r2, #32
 8002508:	4013      	ands	r3, r2
 800250a:	d00b      	beq.n	8002524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <UART_AdvFeatureConfig+0x158>)
 8002514:	4013      	ands	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	4013      	ands	r3, r2
 800252c:	d01d      	beq.n	800256a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <UART_AdvFeatureConfig+0x15c>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	035b      	lsls	r3, r3, #13
 800254e:	429a      	cmp	r2, r3
 8002550:	d10b      	bne.n	800256a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <UART_AdvFeatureConfig+0x160>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	4013      	ands	r3, r2
 8002572:	d00b      	beq.n	800258c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <UART_AdvFeatureConfig+0x164>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  }
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}
 8002594:	fffdffff 	.word	0xfffdffff
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	fffbffff 	.word	0xfffbffff
 80025a0:	ffff7fff 	.word	0xffff7fff
 80025a4:	ffffefff 	.word	0xffffefff
 80025a8:	ffffdfff 	.word	0xffffdfff
 80025ac:	ffefffff 	.word	0xffefffff
 80025b0:	ff9fffff 	.word	0xff9fffff
 80025b4:	fff7ffff 	.word	0xfff7ffff

080025b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b092      	sub	sp, #72	; 0x48
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2284      	movs	r2, #132	; 0x84
 80025c4:	2100      	movs	r1, #0
 80025c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025c8:	f7fe f9c2 	bl	8000950 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2208      	movs	r2, #8
 80025d8:	4013      	ands	r3, r2
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d12c      	bne.n	8002638 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	0391      	lsls	r1, r2, #14
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4a46      	ldr	r2, [pc, #280]	; (8002700 <UART_CheckIdleState+0x148>)
 80025e8:	9200      	str	r2, [sp, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f000 f88c 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d021      	beq.n	8002638 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f4:	f3ef 8310 	mrs	r3, PRIMASK
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80025fe:	2301      	movs	r3, #1
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	f383 8810 	msr	PRIMASK, r3
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	438a      	bics	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2278      	movs	r2, #120	; 0x78
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e05f      	b.n	80026f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2204      	movs	r2, #4
 8002640:	4013      	ands	r3, r2
 8002642:	2b04      	cmp	r3, #4
 8002644:	d146      	bne.n	80026d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	03d1      	lsls	r1, r2, #15
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <UART_CheckIdleState+0x148>)
 8002650:	9200      	str	r2, [sp, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	f000 f858 	bl	8002708 <UART_WaitOnFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d03b      	beq.n	80026d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	60fb      	str	r3, [r7, #12]
  return(result);
 8002662:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	2301      	movs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4921      	ldr	r1, [pc, #132]	; (8002704 <UART_CheckIdleState+0x14c>)
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268e:	f3ef 8310 	mrs	r3, PRIMASK
 8002692:	61bb      	str	r3, [r7, #24]
  return(result);
 8002694:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
 8002698:	2301      	movs	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f383 8810 	msr	PRIMASK, r3
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f383 8810 	msr	PRIMASK, r3
}
 80026be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	2120      	movs	r1, #32
 80026c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2278      	movs	r2, #120	; 0x78
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e011      	b.n	80026f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	2120      	movs	r1, #32
 80026e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2278      	movs	r2, #120	; 0x78
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b010      	add	sp, #64	; 0x40
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	01ffffff 	.word	0x01ffffff
 8002704:	fffffedf 	.word	0xfffffedf

08002708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002718:	e04b      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3301      	adds	r3, #1
 800271e:	d048      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7fe f916 	bl	8000950 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04b      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d035      	beq.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d111      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2208      	movs	r2, #8
 800275a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 f83c 	bl	80027dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2284      	movs	r2, #132	; 0x84
 8002768:	2108      	movs	r1, #8
 800276a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2278      	movs	r2, #120	; 0x78
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02c      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	401a      	ands	r2, r3
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	429a      	cmp	r2, r3
 800278a:	d112      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f81f 	bl	80027dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2284      	movs	r2, #132	; 0x84
 80027a2:	2120      	movs	r1, #32
 80027a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2278      	movs	r2, #120	; 0x78
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e00f      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	4013      	ands	r3, r2
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	425a      	negs	r2, r3
 80027c2:	4153      	adcs	r3, r2
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	001a      	movs	r2, r3
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d0a4      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	; 0x38
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	617b      	str	r3, [r7, #20]
  return(result);
 80027ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4926      	ldr	r1, [pc, #152]	; (80028a0 <UART_EndRxTransfer+0xc4>)
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002816:	f3ef 8310 	mrs	r3, PRIMASK
 800281a:	623b      	str	r3, [r7, #32]
  return(result);
 800281c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
 8002820:	2301      	movs	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	2b01      	cmp	r3, #1
 800284e:	d118      	bne.n	8002882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002850:	f3ef 8310 	mrs	r3, PRIMASK
 8002854:	60bb      	str	r3, [r7, #8]
  return(result);
 8002856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	2301      	movs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2110      	movs	r1, #16
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f383 8810 	msr	PRIMASK, r3
}
 8002880:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	2120      	movs	r1, #32
 8002888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b00e      	add	sp, #56	; 0x38
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	fffffedf 	.word	0xfffffedf

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	2600      	movs	r6, #0
 80028a8:	4d0c      	ldr	r5, [pc, #48]	; (80028dc <__libc_init_array+0x38>)
 80028aa:	4c0d      	ldr	r4, [pc, #52]	; (80028e0 <__libc_init_array+0x3c>)
 80028ac:	1b64      	subs	r4, r4, r5
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	2600      	movs	r6, #0
 80028b6:	f000 f821 	bl	80028fc <_init>
 80028ba:	4d0a      	ldr	r5, [pc, #40]	; (80028e4 <__libc_init_array+0x40>)
 80028bc:	4c0a      	ldr	r4, [pc, #40]	; (80028e8 <__libc_init_array+0x44>)
 80028be:	1b64      	subs	r4, r4, r5
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	00b3      	lsls	r3, r6, #2
 80028ca:	58eb      	ldr	r3, [r5, r3]
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	00b3      	lsls	r3, r6, #2
 80028d4:	58eb      	ldr	r3, [r5, r3]
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	080029b8 	.word	0x080029b8
 80028e0:	080029b8 	.word	0x080029b8
 80028e4:	080029b8 	.word	0x080029b8
 80028e8:	080029bc 	.word	0x080029bc

080028ec <memset>:
 80028ec:	0003      	movs	r3, r0
 80028ee:	1882      	adds	r2, r0, r2
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d100      	bne.n	80028f6 <memset+0xa>
 80028f4:	4770      	bx	lr
 80028f6:	7019      	strb	r1, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e7f9      	b.n	80028f0 <memset+0x4>

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
